--- monadic list functions stack overflow early
module tests.comp.Issue67 where

import Data.List
import frege.Prelude as P 

{-
chunked !n [] = []
chunked !n xs = take n xs : chunked n (drop n xs)

unsafeSequence = foldr (liftM2 (:)) (return [])

sequence = fold (liftM2 (++)) (return []) . map unsafeSequence . chunked 512
-- sequence' = liftM concat . map unsafeSequence . chunked 512 

filterM mp = fold (liftM2 (++)) (return []) . map (P.filterM mp) . chunked 512

foldM p z = fold (\acc\as -> acc >>= flip (P.foldM p) as) (return z)  . chunked 512

sequence_ [] = return ()
sequence_ (x:xs) = x >> sequence_ xs

-}       

many  = [1L..100_000]
manym = map Just many
manyio = println "a" : replicate 99998 (print "") ++ [println "z"]

main = do
    -- forever (println "a")
    sequence_ manyio
    println 'A' >> sequence_ (replicate 99998 (print "")) >> println 'Z'
    println 'A' >> sequence  (replicate 99998 (print "")) >> println 'Z'
    -- ((>>=println) . fmap length . sequence) manyio
    println (fmap length . filterM (Just . even) $ many)
    println (foldM (\a\b -> Just (a+b)) 0 many) 
