--- This is an undocumented module
module tests.qc.Map where

import Test.QuickCheck
import Test.QuickCheckArbitrary ()  -- avoid doc error
import Data.TreeMap
import Data.List (elemBy)


aTree = arbitrary :: Gen (Tree Int String)
aList = arbitrary :: Gen [(Int, String)]

--- The empty tree is 'Tree.Nil'
p_emptyIsNil = property (nil empty) 
    where 
        nil Tree.Nil = true
        nil _        = false

--- An AVL tree is balanced so that the height of the left and right subtree differ by at most 1
p_balance = forAll aTree (\t -> abs t.balance < 2)

--- The height of a tree is 1 more than the maximum of the heights of its subtrees
p_height = forAll aTree (\t ->
    null t && t.height == 0 || t.height == 1 + max t.left.height t.right.height)

--- After insertion, a lookup with the same key yields the inserted value        
p_insert = forAll aTree (\t -> 
            forAll Int.arbitrary (\k ->
                forAll String.arbitrary (\v ->
                    lookup (insert t k v) k == Just v)))

--- After deletion of a key, lookup results in Nothing
p_delete = forAll aTree (\t ->
            not (null t) ==> forAll (elements (keys t)) (\k ->
                lookup (delete t k) k == Nothing))

--- After deletion of all keys, a tree is empty
p_deleteAll = forAll aTree (\t ->
    null (fold delete t (keys t)))
    
{-- 
    A tree constructed from a list has only key value pairs that are elements of that list,
    and it has a an entry for every key of the list.
    -}
p_list = forAll aList (\xs ->
    let ys = each (Tree.fromList xs)
        eby = elemBy (using fst) 
    in all (`elem` xs) ys && all (`eby` ys) xs) 

--- Tree.insertList (Tree.insertList Nil xs) ys == Tree.insertList Nil (xs ++ ys)
p_insertList = forAll aList (\ys ->
                forAll aList (\xs ->
        let ta = Tree.insertList (Tree.insertList empty xs) ys 
            tb = Tree.insertList empty (xs ++ ys)
        in each ta == each tb))

