// enable UTF-8: «««««••••••••••••»»»»»»

/**
 * This module provides definitions for many java classes, interfaces and methods
 * from the java.io package.  
 */
 
package frege.IO where

/*
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 */

infixl 5 `<<` 

class Closeable t where
    // void close() throws IOException
    native close :: t s ->  ST s (Exception ())


data File s = native java.io.File where
    native new                :: String -> Mutable File s
    native newFS     new      :: File s -> String -> Mutable File s
    pure native getParentFile :: File s -> (Maybe (File s))
    pure native toURI         :: File s -> URI
    pure native getPath       :: File s -> String
    pure native isAbsolute    :: File s -> Bool
    pure native separator        java.io.File.separator
                              :: String
    pure native pathSeparator    java.io.File.pathSeparator
                              :: String
    native canRead       :: File s -> IO Bool
    native canWrite      :: File s -> IO Bool
    native isDirectory   :: File s -> IO Bool
    native isFile        :: File s -> IO Bool
    native exists        :: File s -> IO Bool
    native mkdirs        :: File s -> IO Bool
    native lastModified  :: File s -> IO Long

    toURL (f::File s) = case f.toURI.toURL of
            Right url -> url
            Left exc  -> throw exc
    native list          :: File s -> IO (Maybe StringArr)
    
instance Serializable File where
    pure native copySerializable frege.RT.copySerializable :: File a -> File b
    

instance Show (File s) where show = File.getPath

data URI = pure native java.net.URI where
    pure native new                        :: String -> Exception URI
    pure native create java.net.URI.create :: String -> URI
    pure native toURL                      :: URI -> Exception (Frozen URL)
    pure native toString                   :: URI -> String
    pure native toASCIIString              :: URI -> String
    pure native relativize                 :: URI -> URI -> URI


data URL s = native java.net.URL where
        native openStream        :: URL s -> IO (Exception (InputStream s))
        pure native toString     :: URL s -> String
/*    
data URLArr = native "java.net.URL[]" where
        protected native getAt  "frege.Run.Arr.vaget" :: URLArr -> Int -> Maybe URL
        protected native setAt  "frege.Run.Arr.vaset" :: URLArr -> Int -> URL -> IO ()
        protected native length "frege.Run.Arr.valen" :: URLArr -> Int
        protected native new    "frege.Run.Arr.vanewURL" :: Int -> URLArr
        fromList [] = URLArr.new 0
        fromList is =
            let
                ilen = is.length
                iarr = URLArr.new ilen
                loop (iarr::URLArr) j (x:xs) = do iarr.[j <- x]; loop iarr (j+1) xs
                loop (iarr::URLArr) _ []     = Prelude.IO.return iarr
            in Prelude.IO.performUnsafe $ loop iarr 0 is
    ;



data CharBuffer = native java.nio.CharBuffer;

// output
class Appendable app where
    append  :: app -> String -> IO app
;

// (<<)    :: IO Appendable:app -> Show:d -> IO Appendable:app;
(ioa) << (b) = do
            a <- ioa
            append a (display b)
;

data PrintStream = native java.io.PrintStream where {
    native println :: PrintStream -> IO ();
};

data OutputStreamWriter = native java.io.OutputStreamWriter where {
    native new      :: PrintStream -> String -> IO (Exception OutputStreamWriter);
    native close    :: OutputStreamWriter -> IO (Exception ());
    pure native toWriter "(java.io.Writer)" :: OutputStreamWriter -> Writer;
};

data Writer = native java.io.Writer;

data PrintWriter = native java.io.PrintWriter where {
    native println  :: PrintWriter -> IO ();
    native open new :: String -> IO (Exception PrintWriter);
    native new      :: File   -> IO (Exception PrintWriter);
    native encoded new :: File -> String -> IO (Exception PrintWriter);
    native fromWriter   new    :: Writer -> IO PrintWriter;
    native fromWriterAf new    :: Writer -> Bool -> IO PrintWriter;
    native close    :: PrintWriter -> IO (Exception ());
    pure native toWriter "(java.io.Writer)" :: PrintWriter -> Writer;
};

data StringWriter = native java.io.StringWriter where {
    native append :: StringWriter -> String -> IO StringWriter;
    println  :: StringWriter -> IO ();
    println sw = do { sw.append "\n"; void };
    native new      :: () -> IO StringWriter;
    native close    :: StringWriter -> IO (Exception ());
    native toString :: StringWriter -> IO String;
};

instance Closeable PrintWriter;
instance Closeable StringWriter;

data StringBuilder = native java.lang.StringBuilder where {
    protected native new      :: String -> IO StringBuilder;
    protected native toString :: StringBuilder -> IO String;
};

instance Appendable PrintStream where {
    native append :: PrintStream -> String -> IO PrintStream;
};

instance Appendable PrintWriter where {
    native append :: PrintWriter -> String -> IO PrintWriter;
};

// instance Appendable OutputStreamWriter where {
//     native append :: OutputStreamWriter -> String -> IO OutputStreamWriter;
// };

instance Appendable StringBuilder where {
    native append :: StringBuilder -> String -> IO StringBuilder;
};

instance Appendable StringWriter;

// instance Show StringBuilder where {
//     show = StringBuilder.toString;
// };


native stdout  java.lang.System.out  :: IO PrintStream;
native stderr  java.lang.System.err  :: IO PrintStream;

// Input

native stdin  "java.lang.System.in"  :: IO InputStream;

class Readable a where {
    readcb :: a -> CharBuffer -> IO (Exception Int);
};

class Reader Closeable:a where {
    read :: a -> IO (Exception Int);
};

class LineReader Reader:a where {
    readLine :: a -> IO (Exception (Maybe String));
    getlines :: a -> IO [String];
};
*/
data InputStream s = native java.io.InputStream
/*
data FileInputStream = native java.io.FileInputStream where
    native new      :: File   -> IO (Exception FileInputStream)
    native open new :: String -> IO (Exception FileInputStream)
    //* downcast from 'FileInputStream' to 'InputStream'
    protected native inputStream "(java.io.InputStream)" :: FileInputStream -> InputStream
;

data InputStreamReader = native java.io.InputStreamReader where
    native close :: InputStreamReader -> IO (Exception ())
    native read  :: InputStreamReader -> IO (Exception Int)
    native new   :: InputStream -> IO (InputStreamReader)
    native encoded new :: InputStream -> String -> IO (Exception InputStreamReader)
  ;

data FileReader = native java.io.FileReader where
    native close :: FileReader -> IO (Exception ())
    native read  :: FileReader -> IO (Exception Int)
    native new   :: File -> IO (Exception FileReader)
    native open new :: String -> IO (Exception FileReader)
;

data StringReader = native java.io.StringReader where
    native close :: StringReader -> IO (Exception ())
    native read  :: StringReader -> IO (Exception Int)
    protected native new   :: String -> StringReader
;


instance Reader     InputStreamReader;
instance Reader     FileReader;
instance Reader     StringReader;

data BufferedReader = native java.io.BufferedReader where
    native close :: BufferedReader -> IO (Exception ())
    native read :: BufferedReader -> IO (Exception Int)
    native readLine :: BufferedReader -> IO (Exception (Maybe String))
    native new :: FileReader -> IO BufferedReader
    native fromISR new :: InputStreamReader -> IO BufferedReader
    open s = do
                fr <- FileReader.open s
                case fr of
                    Left msg -> Prelude.IO.return (Left msg)
                    Right f  -> do
                                    br <- new f
                                    Prelude.IO.return (Right br)
    native fromSR new :: StringReader -> IO BufferedReader
    from s = fromSR (StringReader.new s);
    // getlines :: BufferedReader -> IO [String];
    getlines (br::BufferedReader) = loop [] (repeat br.readLine) where
        loop acc (a:as) = do
            xms <- a
            case xms of
                Right (Just s) ->  loop (s:acc) as
                _              ->  Prelude.IO.return (reverse acc)
        loop acc [] = error "cannot happen because (repeat br.readLine) is infinite"
;

instance LineReader BufferedReader;

// Class Loading & Resources
data URLClassLoader = native java.net.URLClassLoader where
        protected native new   :: URLArr -> Exception URLClassLoader
        native loadClass       :: URLClassLoader -> String -> IO (Exception Class)
        native getResource     :: URLClassLoader -> String -> IO (Maybe URL)
        native findResource    :: URLClassLoader -> String -> IO (Maybe URL)
    ;
native getSystemResource  java.lang.ClassLoader.getSystemResource :: String -> IO (Maybe URL);


// System

pure native getenv       System.getenv            :: String -> Maybe String;
pure native getProperty  System.getProperty       :: String -> Maybe String;
native exit                   frege.Run.exitFrege      :: Int -> IO a;
native currentTimeMillis      System.currentTimeMillis :: () -> IO Long;
*/*/
