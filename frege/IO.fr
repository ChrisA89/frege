// enable UTF-8: «««««••••••••••••»»»»»»

/**
 * This module provides definitions for many java classes, interfaces and methods
 * from the java.io package.  
 */
 
package frege.IO where

/*
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 */

infixl 5 `<<` 

class Closeable t where
    // void close() throws IOException
    native close :: t s ->  ST s (Exception ())


data File s = native java.io.File where
    native new                :: String -> Mutable File s
    native newFS     new      :: File s -> String -> Mutable File s
    pure native getParentFile :: Frozen File -> (Maybe (Frozen File))
    pure native toURI         :: Frozen File -> URI
    pure native getPath       :: Frozen File -> String
    pure native isAbsolute    :: Frozen File -> Bool
    pure native separator        java.io.File.separator
                              :: String
    pure native pathSeparator    java.io.File.pathSeparator
                              :: String
    native canRead       :: File RealWorld -> IO Bool
    native canWrite      :: File RealWorld -> IO Bool
    native isDirectory   :: File RealWorld -> IO Bool
    native isFile        :: File RealWorld -> IO Bool
    native exists        :: File RealWorld -> IO Bool
    native mkdirs        :: File RealWorld -> IO Bool
    native lastModified  :: File RealWorld -> IO Long

    toURL (f::Frozen File) = case f.toURI.toURL of
            Right url -> url
            Left exc  -> throw exc
    native list          :: File s -> IO (Maybe StringArr)
    
instance Serializable File 
    
instance Show (File Immutable) where show = File.getPath

data URI = pure native java.net.URI where
    pure native new                        :: String -> Exception URI
    pure native create java.net.URI.create :: String -> URI
    pure native toURL                      :: URI -> Exception (Frozen URL)
    pure native toString                   :: URI -> String
    pure native toASCIIString              :: URI -> String
    pure native relativize                 :: URI -> URI -> URI


data URL s = native java.net.URL where
        native openStream        :: URL RealWorld -> IO (Exception (InputStream RealWorld))
        pure native toString     :: Frozen URL -> String


type URLArr = Frozen URLArray
instance Cloneable URLArray where
    native our frege.RT.our :: URLArray s -> ST s (Frozen URLArray)

data URLArray s = native "java.net.URL[]" where
    native new "frege.rt.Boxed.<java.net.URL>arrayNew" :: Int -> Mutable URLArray s
    native getAt  "frege.rt.Boxed.<java.net.URL>arrayGet"
                                                :: URLArray s -> Int -> ST s (Maybe (URL s))
    native setAt  "frege.rt.Boxed.<java.net.URL>arraySet"
                                                :: URLArray s -> Int -> Frozen URL -> ST s ()
    pure native frozenGetAt "frege.rt.Boxed.<java.net.URL>arrayGet"
                                                :: URLArr -> Int -> Maybe (Frozen URL)
    /// use this only if it is absolutely sure that there are no nulls in the array
    pure native elemAt "frege.rt.Boxed.<java.net.URL>arrayGet"
                                                :: URLArr -> Int -> Frozen URL
    pure native length "frege.rt.Boxed.<java.net.URL>arrayLen"
                                                :: URLArr -> Int
    toList (a::URLArr) = elems a 0
        where
            elems (a::URLArr) i
                | i < a.length = case frozenGetAt a i of
                    Just s  -> s:elems a (i+1)
                    Nothing -> elems a (i+1)
                | otherwise = []
    fromListST :: [Frozen URL] -> ST u URLArr                
    fromListST urls = (URLArr.new urls.length >>= loop 0 urls) >>= our where
        loop j (x:xs) arr = do URLArr.setAt arr j x; loop (j+1) xs arr
        loop j []     arr = return arr
    fromList urls = ST.run (fromListST urls)       
            

        
/*    
data CharBuffer = native java.nio.CharBuffer;
*/
// output
class Appendable a where
    native append  :: a s -> String -> Mutable a s


(<<)    :: forall a d Appendable a, Show d . IO (a RealWorld) -> d -> IO (a RealWorld)
ioa << b = do
            a <- ioa
            append a (display b)

type PrintStream = PrintStreamS RealWorld
data PrintStreamS s = native java.io.PrintStream where
    native println :: PrintStream -> IO ()


type OutputStreamWriter = OutputStreamWriterS RealWorld
data OutputStreamWriterS s = native java.io.OutputStreamWriter where
    native new      :: PrintStream -> String -> IO (Exception OutputStreamWriter)
    native close    :: OutputStreamWriter -> IO (Exception ())
    native toWriter "(java.io.Writer)" :: OutputStreamWriterS x -> ST x (WriterS x)


type Writer = WriterS RealWorld
data WriterS s = native java.io.Writer

type PrintWriter = PrintWriterS RealWorld
data PrintWriterS s = native java.io.PrintWriter where
    native print    :: PrintWriter -> String -> IO ()
    native println  :: PrintWriter -> String -> IO ()
    native printLn  println :: PrintWriter -> IO ()
    native open new :: String -> IO (Exception PrintWriter)
    native new      :: File RealWorld -> IO (Exception PrintWriter)
    native encoded new :: File RealWorld -> String -> IO (Exception PrintWriter)
    native fromWriter   new    :: Writer -> IO PrintWriter
    native fromWriterAf new    :: Writer -> Bool -> IO PrintWriter
    // native close    :: PrintWriter -> IO (Exception ())
    native toWriter "(java.io.Writer)" :: PrintWriterS x -> ST x (WriterS x)

instance Closeable PrintWriter

/*
data StringWriter = native java.io.StringWriter where {
    native append :: StringWriter -> String -> IO StringWriter;
    println  :: StringWriter -> IO ();
    println sw = do { sw.append "\n"; void };
    native new      :: () -> IO StringWriter;
    native close    :: StringWriter -> IO (Exception ());
    native toString :: StringWriter -> IO String;
};
instance Closeable StringWriter;
instance Appendable StringWriter;
*/

data StringBuilder s = native java.lang.StringBuilder where 
    native new      :: String -> Mutable StringBuilder s
    native toString :: StringBuilder s -> ST s String


instance Appendable PrintStreamS
instance Appendable PrintWriterS

// instance Appendable OutputStreamWriter where {
//     native append :: OutputStreamWriter -> String -> IO OutputStreamWriter;
// };

instance Appendable StringBuilder


/*
// instance Show StringBuilder where {
//     show = StringBuilder.toString;
// };


native stdout  java.lang.System.out  :: IO PrintStream;
native stderr  java.lang.System.err  :: IO PrintStream;

// Input

native stdin  "java.lang.System.in"  :: IO InputStream;

class Readable a where {
    readcb :: a -> CharBuffer -> IO (Exception Int);
};

class Reader Closeable:a where {
    read :: a -> IO (Exception Int);
};

class LineReader Reader:a where {
    readLine :: a -> IO (Exception (Maybe String));
    getlines :: a -> IO [String];
};
*/
data InputStream s = native java.io.InputStream
/*
data FileInputStream = native java.io.FileInputStream where
    native new      :: File   -> IO (Exception FileInputStream)
    native open new :: String -> IO (Exception FileInputStream)
    /// downcast from 'FileInputStream' to 'InputStream'
    protected native inputStream "(java.io.InputStream)" :: FileInputStream -> InputStream
;

data InputStreamReader = native java.io.InputStreamReader where
    native close :: InputStreamReader -> IO (Exception ())
    native read  :: InputStreamReader -> IO (Exception Int)
    native new   :: InputStream -> IO (InputStreamReader)
    native encoded new :: InputStream -> String -> IO (Exception InputStreamReader)
  ;

data FileReader = native java.io.FileReader where
    native close :: FileReader -> IO (Exception ())
    native read  :: FileReader -> IO (Exception Int)
    native new   :: File -> IO (Exception FileReader)
    native open new :: String -> IO (Exception FileReader)
;

data StringReader = native java.io.StringReader where
    native close :: StringReader -> IO (Exception ())
    native read  :: StringReader -> IO (Exception Int)
    protected native new   :: String -> StringReader
;


instance Reader     InputStreamReader;
instance Reader     FileReader;
instance Reader     StringReader;

data BufferedReader = native java.io.BufferedReader where
    native close :: BufferedReader -> IO (Exception ())
    native read :: BufferedReader -> IO (Exception Int)
    native readLine :: BufferedReader -> IO (Exception (Maybe String))
    native new :: FileReader -> IO BufferedReader
    native fromISR new :: InputStreamReader -> IO BufferedReader
    open s = do
                fr <- FileReader.open s
                case fr of
                    Left msg -> Prelude.IO.return (Left msg)
                    Right f  -> do
                                    br <- new f
                                    Prelude.IO.return (Right br)
    native fromSR new :: StringReader -> IO BufferedReader
    from s = fromSR (StringReader.new s);
    // getlines :: BufferedReader -> IO [String];
    getlines (br::BufferedReader) = loop [] (repeat br.readLine) where
        loop acc (a:as) = do
            xms <- a
            case xms of
                Right (Just s) ->  loop (s:acc) as
                _              ->  Prelude.IO.return (reverse acc)
        loop acc [] = error "cannot happen because (repeat br.readLine) is infinite"
;

instance LineReader BufferedReader;
*/
// Class Loading & Resources
type URLClassLoader = URLClassLoaderS RealWorld 
data URLClassLoaderS s = native java.net.URLClassLoader where
        native new             :: URLArr -> IO (Exception URLClassLoader)
        native loadClass       :: URLClassLoader -> String -> IO (Exception Class)
        native getResource     :: URLClassLoader -> String -> IO (Maybe (URL RealWorld))
        native findResource    :: URLClassLoader -> String -> IO (Maybe (URL RealWorld))
    
native getSystemResource  java.lang.ClassLoader.getSystemResource :: String -> IO (Maybe (URL RealWorld))


// System

pure native getenv       System.getenv            :: String -> Maybe String
pure native getProperty  System.getProperty       :: String -> Maybe String
native exit                   System.exit         :: Int -> IO ()
native currentTimeMillis      System.currentTimeMillis :: () -> IO Long

