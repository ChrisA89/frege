{-- 

    Support for Java reflective arrays.

-}
protected module frege.prelude.PreludeArrays where

import frege.prelude.PreludeBase 
import frege.prelude.PreludeList as L(ListSource, length, map, fold, zipWith, null) 
import frege.prelude.Maybe (mapMaybe)
import frege.prelude.PreludeMonad
import frege.prelude.PreludeIO
import frege.control.Semigroupoid
import frege.control.Category

--- short hand for 'Mutable' @s@ ('JArray' @a@)
type ArrayOf s a = Mutable s (JArray a)

{--
    The type @JArray X@ corresponds to Java's @J[]@ for any type @X@
    where @J@ is the corresponding java type of @X@,
    but note that Java does not really have generic arrays.
    
    We can use arrays generically inside Frege, but native code 
    that expects or returns arrays will not be generic.  
    
    The native interface will take every occurence of 
    
    > JArray X
    
    or
    
    > Mutable s (JArray X)
    
    in native declarations to denote the corresponding Java array type.
    But when the type argument is variable, it will be just @Object@.
    This corresponds to the usage in 
    'http://docs.oracle.com/javase/7/docs/api/index.html?java/lang/reflect/Array.html the array reflection API'.

    Multi-dimensional arrays are not very well supported out of the box.
    If one needs more than 1 dimensions, the type will get quite complex,
    as of course arrays are mutable and so one will have multiple levels
    of 'JArray' nested in 'Mutable' nested in 'JArray' and so forth.
    Moreover, multi-dimensional arrays cannot be generic at all.
    
    Note that there are really 2 different APIs: 
    
    1. With the 'JArray.getElemAt', 'JArray.getItemAt', 'JArray.setItemAt', 'JArray.setElemAt',
    'JArray.itemAt' and 'JArray.elemAt' it is possible to work on Java objects with
    java compile time type @java.lang.Object@ *or* @X[]@ for some java type @X@
    *or* @java.lang.Object[]@, 
    but the run time type is always @java.lang.Object[]@. 
    2. With the 'newArray', 'getElement', 'getItemAt', 'setItemAt', 
    'setElemAt', 'itemAt' and 'elemAt' functions of the 'ArrayElem' class
    for some type @F@ that is an instance of 'ArrayElem', 
    we can work on Java objects with
    java compile time type @X[]@, 
    where @X@ is the Java type corresponding to @F@,    
    but the run time type is always @X[]@.    
    
    The former ones are usable only in polymorphic functions where the type argument 
    for 'JArray' is a variable and we don't (want to) have 'ArrayElem' constraints. 
    They are not good for interfacing native methods that take or return arrays of a certain type.
    Run time type errors are possible because native methods could put anything there.
    However, when used in Frege only, the typing is safe.
    
    The latter ones are truely type safe, because their frege type corresponds to the
    expected Java compile time type, which is also the actual run time type.  
    
    Here is a cheet sheet for the different array get and set methods:
    
    >             Array type            Argument/    Description
    >                                   Result
     
    > setAt       Mutable (JArray s X)  Maybe X     set @null@  or data element
    > setElemAt   Mutable (JArray s X)  X           set data element
    > getAt       Mutable (JArray s X)  Maybe X     get @null@  or data element
    > getElemAt   Mutable (JArray s X)  X           get data element (unsafe)
    > itemAt      JArray s X            Maybe X     get @null@  or data element (pure)
    > elemAt      JArray s X            X           get data element (pure, unsafe)
    
    "unsafe" in this contect means that the function may fail with a @NullPointerException@.
-}
data JArray a = native "java.lang.Object" where

    ---  create a one dimensional Java array 
    native new   java.lang.reflect.Array.newInstance :: Class a -> Int -> STMutable s (JArray a)
    
    --  create a two dimensional Java array 
    -- native new2D java.lang.reflect.Array.newInstance 
    --                 :: Class a -> Int -> Int -> ST s (Mutable s (JArray (Mutable s (JArray a))))
    
    --- create a one dimensional Java array that holds 'Mutable' data
    native newM  java.lang.reflect.Array.newInstance :: Class a -> Int -> STMutable s (JArray (Mutable s a))
    
    {-- 
        Tell the length of an immutable Java array.
        
        Because the length of an array cannot change, 
        it is safe to use this function with 'readonly'. 
    -}  
    pure native length  java.lang.reflect.Array.getLength :: JArray a -> Int
    
    --- Return the length of a mutable array in the 'ST' monad.
    getLength :: ArrayOf α β -> ST α Int
    getLength = readonly length
    
    {--
        Get the array element at a given index. This will throw an
        'IndexOutOfBoundsException' if the index is lower than 0 or
        greater or equal to the length of the array.
        
        Because in general, array elements may be @null@, the return
        value is wrapped in 'Maybe', as usual.
    -}
    pure native itemAt  java.lang.reflect.Array.get  :: JArray a -> Int -> Maybe a
    
    {--
        Like 'JArray.itemAt' but the result is not wrapped in 'Maybe'.
        
        This is appropriate for arrays of primitive values.
        For all other arrays, the user is expected to prove that the
        element cannot be @null@ or else risk a 'NullPointerException'
    -}
    pure native elemAt  java.lang.reflect.Array.get  :: JArray a -> Int -> a
    
    {--
        Get the array element at a certain index of a mutable array and
        return it in the 'ST' monad.
        
        This will throw an
        'IndexOutOfBoundsException' if the index is lower than 0 or
        greater or equal to the length of the array.
        
        Because in general, array elements may be @null@, the return
        value is wrapped in 'Maybe', as usual.
    -}
    native       getAt  java.lang.reflect.Array.get  :: Mutable s (JArray a) -> Int -> ST s (Maybe a)
    
    {--
        Set the element at a certain index of a mutable array to a value
        that is wrapped in 'Maybe'. This won't work for primitive element types.

        This will throw an
        'IndexOutOfBoundsException' if the index is lower than 0 or
        greater or equal to the length of the array.
        
        To set the corresponding array element to @null@, pass 'Nothing',
        otherwise pass a 'Just' value.  
    -}
    native       setAt  java.lang.reflect.Array.set  :: Mutable s (JArray a) -> Int -> Maybe a -> ST s ()

    {-- 
        Get the array element at a certain index of a mutable array and
        return it in the 'ST' monad.
        
        This will throw an
        'IndexOutOfBoundsException' if the index is lower than 0 or
        greater or equal to the length of the array.

        Unlike with 'JArray.getAt' the element *must not be @null@*.
                        
        This is appropriate for arrays of primitive values.
        For all other arrays, the user is expected to prove that the
        element cannot be @null@ or else risk a 'NullPointerException'.
    -} 
    native   getElemAt  java.lang.reflect.Array.get  :: Mutable s (JArray a) -> Int -> ST s a

    {--
        Set the element at a certain index of a mutable array.

        This will throw an
        'IndexOutOfBoundsException' if the index is lower than 0 or
        greater or equal to the length of the array. 
    -}
    native   setElemAt  java.lang.reflect.Array.set  :: Mutable s (JArray a) -> Int -> a -> ST s ()

    {--
        Create a mutable array from a finite list.            
    -}
    fromList :: ArrayElem α => [α] -> STMutable β (JArray α)
    fromList xs = do
        let !len = xs.length 
        arr <- newArray len
        zipWithM_ (ArrayElem.setElemAt arr) [0..len-1] xs
        return arr

    {--
        Create a mutable array from a finite index/value list.
        
        Indexes not mentioned in the list remain @null@ for 
        non primitive array elements and 0 otherwise.            
    -}
    fromIndexList :: ArrayElem α => [(Int,α)] -> STMutable β (JArray α)
    fromIndexList xs = do
        let !len = L.fold max 0 (L.map fst xs) 
        arr <- newArray (if null xs then 0 else len+1)
        mapM_ (\(i,a) -> ArrayElem.setElemAt arr i a)  xs
        return arr

    {--
        Apply a function to an array element and 
        write the result to another array at the same index.
        
        If the target array is a primitive one, 
        there must be no null elements in the source array.
    -}
    mapElem :: (ArrayElem γ, ArrayElem α) => (γ->α) -> JArray γ -> ArrayOf β α -> Int -> ST β ()
    mapElem f src dest index = ArrayElem.setAt dest index value 
        where value = fmap f (ArrayElem.itemAt src index) 
    
    --- Map a function over the elements of an immutable array.
    --- The results will be collected in a new mutable array of the same length.
    --- If the target element type is a primitive one, no *null* elements are allowed in the source array.
    map :: (ArrayElem α, ArrayElem β) => (α->β) -> JArray α -> STMutable γ (JArray β)
    map f src = do
            let !max = length src
            dest  <- newArray max
            mapM_ (JArray.mapElem f src dest) [0..max-1]
            return dest
    
    --- Modify a mutable array by applying a function to all its elements.
    modify :: ArrayElem α => (α->α) -> ArrayOf β α -> ST β ()
    modify f dest = do
            max <- dest.getLength
            mapM_ (modifyAt f dest) [0..max-1]
    
    --- Equivalent of 'fold' for mutable arrays. 
    fold :: ArrayElem α => (β->α->β) -> β -> ArrayOf γ α -> ST γ β
    fold f acc arr = arr.getLength >>= foldM collect acc . enumFromTo 0
        where
            collect acc i = ArrayElem.getAt arr i >>= return . maybe acc (f acc)      
    
    {--
        Create a mutable array of a given size and compute the values of its elements
        by some function. The function gets the current index and  
        the already computed values in  the form of an immutable array,
        where it can access elements with a *smaller* index than the current one. 
        
        The restriction to smaller indexes is because array elements are
        strict in Frege. For example, we can't store unevaluated values in
        an @int[]@ array, because the Java type of unevaluated values is not @int@.
        
        To create an array of 1000 fibonacchi numbers, one could write:
        
        > cache fib 1000 where
        >   fib 0 _ = 1n
        >   fib 1 _ = 1n
        >   fib n a = a.[n-1] + a.[n-2]
    -}
    cache f n = do
                arr <- newArray n
                mapM_ (\i -> readonly (f i) arr >>= setElemAt arr i) [0..n-1]
                return arr


instance ListSource JArray where
    --- Unload an immutable array to a list
    --- The resulting list consists of all the non null elements of the array argument.
    toList :: JArray a -> [a]
    toList ra = mapMaybe ra.itemAt [0..ra.length-1] 

--- Create an immutable array from a finite list whose elements are 'ArrayElem`
--- Uses 'JArray.fromList' and makes it read-only.
arrayFromList :: ArrayElem α => [α] -> JArray α
arrayFromList xs = (JArray.fromList xs >>= readonly id).run

--- Create an immutable array from a finite index/value list.
--- Uses 'JArray.fromIndexList' and makes it read-only.    
arrayFromIndexList :: ArrayElem α => [(Int, α)] -> JArray α
arrayFromIndexList xs = (JArray.fromIndexList xs >>= readonly id).run    
-- Array Elements


{-- 
    Map a function over the elements of an immutable array,
    and collect the results in another immutable array.

    Uses 'JArray.map' and makes result read-only. 
-}
arrayMap :: (ArrayElem α, ArrayElem β) => (α->β) -> JArray α -> JArray β
arrayMap f arr = ST.run (JArray.map f arr >>= readonly id)

{--
    Left fold an immutable array
-}
arrayFold :: (α->β->α) -> α -> JArray β -> α
arrayFold f acc = fold f acc . JArray.toList

{--
    Memoize a number of results from a function that maps
    'Int' to the array element.
    
    Uses 'JArray.cache' and makes it immutable
    -}
arrayCache f n = (JArray.cache f n >>= readonly id).run


{--
    Type class for basic 'JArray' operations. The *element type*
    must be an instance of this class to support arrays of that type.
    
    'ArrayElem' is not derivable, derive sub-class 'ArrayElement' instead.
    
    The operations are mostly overloaded on return type and provide the 
    appropriate @java.lang.Class@ object when needed. 
    
    This supports one dimensional and two dimensional arrays.
    Note that 'JArray' cannot be an instance of 'ArrayElem' itself,
    because it has no fixed @java.lang.Class@ instance.
-}
class ArrayElem JavaType a => a where
    --- Create a one dimensional array with elements of the instantiated type.
    native newArray "new[]"   :: Int -> ST s (ArrayOf s a)
    -- newArray :: Int -> ST s (ArrayOf s a)
    -- Create a two dimensional array with elements of the instantiated type.
    -- new2DArray  :: Int -> Int -> ST s (ArrayOf s (ArrayOf s a))
    --- Get item at index from immutable array, see 'JArray.itemAt'
    itemAt      :: JArray a -> Int -> Maybe a
    --- Get non-null element at index from immutable array, see 'JArray.elemAt'
    elemAt      :: JArray a -> Int -> a
    --- Get item at index from mutable array, see 'JArray.getAt'
    getAt       :: Mutable s (JArray a) -> Int -> ST s (Maybe a)
    --- Set item or null at index in mutable array, see 'JArray.setAt'
    setAt       :: Mutable s (JArray a) -> Int -> Maybe a -> ST s ()
    --- Get non null item at index from mutable array, see 'JArray.getElemAt'
    getElemAt   :: Mutable s (JArray a) -> Int -> ST s a
    --- Set item at index in mutable array. see 'JArray.setElemAt'
    setElemAt   :: Mutable s (JArray a) -> Int -> a -> ST s ()
    --- Modify item at index in mutable array with result of function application.
    modifyAt    :: (a -> a) -> Mutable s (JArray a) -> Int -> ST s ()
    modifyAt f arr i = getAt arr i >>= setAt arr i . fmap f 
    --- Modify non null item at index in mutable array with result of function application.
    modifyElemAt    :: (a -> a) -> Mutable s (JArray a) -> Int -> ST s ()
    modifyElemAt f arr i = getElemAt arr i >>= setElemAt arr i . f 
    
    -- newArray n = JArray.new javaClass n
    

{-- 
    Type class for array elements of primitive type.
    
    Not thought for public use, as all instances are pre-defined.
    
    The default implementation of 'PrimitiveArrayElement.setAt'
    does not support passing 'Nothing', because there can be no
    @null@ in primitive arrays.
-}
class PrimitiveArrayElement ArrayElem a => a where
    --- Default implementation suitable for primitive types.
    --- It is an error to put 'Nothing' in a primitive array.
    setAt arr inx = setElemAt arr inx . maybe (error "cannot have null in primitive arrays") id
                    
    --- Default implementation suitable for primitive types, wraps result with 'Just'
    getAt arr inx = getElemAt arr inx >>= return . Just
    --- Default implementation suitable for primitive types, wraps result with 'Just'
    itemAt arr inx = Just (elemAt arr inx)


--- 'ArrayElement' is the class one derives for array elements.
--- In addition to the base class 'ArrayElem' it also supports mutable array elements.
class ArrayElement ArrayElem a => a where
    --- Create an array of mutable items. 
    --- Such an array may never be immutable itself. 
    newArrayM  :: Int -> ST s (ArrayOf s (Mutable s a))
    newArrayM n = JArray.newM javaClass n
    
    --- Get item at index from immutable array, see 'JArray.itemAt'
    itemAt      = JArray.itemAt
    --- Get non-null element at index from immutable array, see 'JArray.elemAt'
    elemAt      = JArray.elemAt
    --- Get item at index from mutable array, see 'JArray.getAt'
    getAt       = JArray.getAt
    --- Set item or null at index in mutable array, see 'JArray.setAt'
    setAt       = JArray.setAt
    --- Set item at index in mutable array. see 'JArray.setElemAt'
    setElemAt   = JArray.setElemAt
    --- Get non null item at index from mutable array, see 'JArray.getElemAt'
    getElemAt   = JArray.getElemAt
    
-- Instances for primitive array elements. 
-- These use the specialised getXXX/setXXX function from java.lang.reflect.Array

instance PrimitiveArrayElement Int where
    native javaClass "int.class" :: Class Int
    pure native  elemAt     java.lang.reflect.Array.getInt  :: JArray Int -> Int -> Int
    native       getElemAt  java.lang.reflect.Array.getInt  :: Mutable s (JArray Int) -> Int -> ST s Int
    native       setElemAt  java.lang.reflect.Array.setInt  :: Mutable s (JArray Int) -> Int -> Int -> ST s ()

instance PrimitiveArrayElement Long where
    native javaClass "long.class" :: Class Long
    pure native  elemAt     java.lang.reflect.Array.getLong  :: JArray Long -> Int -> Long
    native       getElemAt  java.lang.reflect.Array.getLong  :: Mutable s (JArray Long) -> Int -> ST s Long
    native       setElemAt  java.lang.reflect.Array.setLong  :: Mutable s (JArray Long) -> Int -> Long -> ST s ()

instance PrimitiveArrayElement Char where
    native javaClass "char.class" :: Class Char
    pure native  elemAt     java.lang.reflect.Array.getChar  :: JArray Char -> Int -> Char
    native       getElemAt  java.lang.reflect.Array.getChar  :: Mutable s (JArray Char) -> Int -> ST s Char
    native       setElemAt  java.lang.reflect.Array.setChar  :: Mutable s (JArray Char) -> Int -> Char -> ST s ()

instance PrimitiveArrayElement Bool where
    native javaClass "boolean.class" :: Class Bool
    pure native  elemAt     java.lang.reflect.Array.getBoolean  :: JArray Bool -> Int -> Bool
    native       getElemAt  java.lang.reflect.Array.getBoolean  :: Mutable s (JArray Bool) -> Int -> ST s Bool
    native       setElemAt  java.lang.reflect.Array.setBoolean  :: Mutable s (JArray Bool) -> Int -> Bool -> ST s ()
        
instance PrimitiveArrayElement Float where
    native javaClass "float.class" :: Class Float
    pure native  elemAt     java.lang.reflect.Array.getFloat  :: JArray Float -> Int -> Float
    native       getElemAt  java.lang.reflect.Array.getFloat  :: Mutable s (JArray Float) -> Int -> ST s Float
    native       setElemAt  java.lang.reflect.Array.setFloat  :: Mutable s (JArray Float) -> Int -> Float -> ST s ()

instance PrimitiveArrayElement Double where
    native javaClass "double.class" :: Class Double
    pure native  elemAt     java.lang.reflect.Array.getDouble  :: JArray Double -> Int -> Double
    native       getElemAt  java.lang.reflect.Array.getDouble  :: Mutable s (JArray Double) -> Int -> ST s Double
    native       setElemAt  java.lang.reflect.Array.setDouble  :: Mutable s (JArray Double) -> Int -> Double -> ST s ()

instance ArrayElement (String) where
    native javaClass "java.lang.String.class" :: Class String 

instance ArrayElement (a -> b) where
    native javaClass "frege.runtime.Lambda.class" :: Class (a -> b)
    
derive ArrayElement Integer
derive ArrayElement (Maybe a)
derive ArrayElement (Either a b)
derive ArrayElement (a,b)
derive ArrayElement (a,b,c)
