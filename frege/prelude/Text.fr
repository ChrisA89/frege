-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{--
    Classes and Instances to convert values to 'String's ('show') and 'String's to values
    ('read').

    There are a few differences to Haskell, notably

    - 'Show' does not have operations showsPrec and showList
    - 'Read' cannot be derived and supports numbers only
-}

package frege.prelude.Text where

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}

import frege.prelude.Base         -- must import explicitly since we are in a Prelude module


{--
 * Class 'Show' provides operations to convert values to 'String's.

 * This class can be derived for all algebraic data types whose constituents
 * are themselves instances of 'Show'.
 -}
class Show show where
    --- computes the string representation of a value
    show    :: show -> String
    {--
     * 'showsub' is used for 'show'ing elements of a value of an allgebraic data type
     * in derived instances of 'Show'.
     *
     * The generated code in derived instances for types that are not
     * enumerations is
     * > showsub x = "(" ++ show x ++ ")"
     * so that values are enclosed in parentheses.
     * Certain types like records, lists, tuples and many primitive types do not need
     * extra parentheses, and thus 'showsub' is the same as 'show', which is also the
     * default implementation.
     *
     * In short,
     * - in derived instances, 'showsub' will do the right thing.
     * - in all other instances, 'showsub' will do the same as 'show' if not
     *   implemented differently.
     *
     * Example:
     * > derive Show ( Maybe b)
     * implements the following:
     * > show Nothing = "Nothing"
     * > show (Just x) = "Just " ++ x.showsub
     * > showsub x = "(" ++ show x ++ ")"
     * so that
     * > show (Just (Just 42)) == "Just (Just 42)"
     *
     -}
    showsub :: show -> String
    {--
     * 'display' computes an alternate string represantation of a value.
     * The default implementation is to do the same as 'show'.
     * See 'Char.display' and 'String.display' for examples of different implementation.
     -}
    display :: show -> String
    showsub x = show x
    display d = show d

instance Show Bool where
    show b = if b then "true" else "false"

instance Show Char where
    --- reconstructs a Java char literal from a character, i.e.
    --- > show 'a' = "'a'"
    pure native show frege.RT.quoteChr :: Char -> String
    --- construct a string that consists of just this character
    display c = ctos c

instance Show Integer where
    --- the 'String' representation of the 'Integer' argument, uses @BigInteger.toString@
    pure native show   toString :: Integer -> String

instance Show Int where
    --- the 'String' representation of the 'Int' argument, uses @java.lang.String.valueOf@
    pure native show   java.lang.String.valueOf    :: Int -> String


instance Show Long where
    --- the 'String' representation of the 'Long' argument, uses @java.lang.Long.toString@
    pure native show       java.lang.Long.toString     :: Long -> String

instance Show Float where
    pure native show java.lang.Float.toString :: Float -> String

instance Show Double where
    pure native show java.lang.Double.toString :: Double -> String

instance Show String where
    --- reconstructs a Java string literal from a string, i.e.
    --- > show "abc" = "\"abc\""
    pure native show frege.RT.quoteStr :: String -> String
    display s = s

instance Show JException where
    {-- creates a string representation of a Java exception, consisting of
       the class name and the message, like
       > "java.lang.ArithmeticException: division by zero"
    -}
    show jx = jx.catched ++ ": " ++ jx.getMessage

-- some derived Show instances for standard types.

derive Show     ()
derive Show     (a,b)
derive Show     (a,b,c)
derive Show     Ordering
derive Show     Maybe a
derive Show     Either a b