{--
    Copyright Â© 2011, Ingo Wechsung
 
    All rights reserved.
 
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

    -   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    -   Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.
 
    *THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.*
-}

{--
 *
 * This package provides basic definitions for the Frege language.
 *
 * The /Prelude/ packages are imported explicitely or implicetely during compilation
 * of any other package.
 * They define basic data structures, classes and functions.
 *
 *
 * This package is /implementation specific/ insofar as the compiler may
 * assume that certain items are defined here in a certain way.
 * Changes may thus lead
 * to compiler crashes or java code that will be rejected by the java compiler.
 -}

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
-}


protected package frege.prelude.List where

import frege.prelude.Base as PreludeBase
import frege.prelude.Base(StringJ)

{--
    A class for containers/collections that have an empty value.
    -}
class Empty c where
    --- *true* if and only if the container is 'empty'
    null :: c e -> Bool
    --- the empty container
    empty :: c e
     
{--
    A class for data types that can be viewed as list.
    
    Such data types are instances of 'Empty' 
    and support 'head', 'tail', 'length' and concatenation ('++')
    
    This class provides no means to construct a list. 
    -}
class ListLike  Empty list => list where
    --- computes the length of a list in a type dependend way
    length :: list elem -> Int
    --- Get the element at the head of a non empty list, otherwise 'undefined'
    head :: list elem -> elem
    --- Get the tail elements. This is 'undefined' if the list is empty.
    tail :: list elem -> list elem
    --- concatenate two lists, strings or whatever
    ---  > empty ++ x == x && x ++ empty == x
    (++) :: list e -> list e -> list e

{--
    A class for things we can make a list from
    -}
class ListSource t  where
    --- converts the value to a list
    toList :: t e -> [e]


--  ----------------------
--  Instances for ListLike
--  ----------------------

instance ListLike StringJ where
    
    -- 'String.length' is defined in the 'StringJ' type
    
    --- The first element of a 'String' or 'undefined' if the string is empty.
    head s = s.itemAt 0 
    
    --- The tail of a 'String' or undefined if it is empty
    tail s = strtail s 1
    
    -- concatenation is defined in 'String.++'
     
    --- True if and only if the length of the string is 0
    null s = length s == 0
    
    --- A polymorphic empty string. 
    --- This is the only string value whose type is not 'String' that must ever exist.
    pure native empty frege.RT.emptyString :: StringJ elem   

instance ListLike [] where
    --- Get the length of a list
    length as = len as 0 where
        len (_:as) !acc = len as (acc+1)
        len []     !acc = acc
    
    --- The first element of a list or 'undefined' if it is empty.
    head (hd:_) = hd
    head []     = error "Prelude.head []"
    
    --- The tail of a list or undefined if it is empty
    tail (_:tl) = tl
    tail []     = error "Prelude.tail []"
    
    --- Concatenation of 2 lists
    (a:as) ++ bs = a : as ++ bs
    _      ++ bs = bs
    
    --- *true* for the empty list, false otherwise
    null [] = true
    null _  = false
    
    --- the empty list
    empty = []

--  ------------------------
--  Instances for ListSource
--  ------------------------
instance ListSource [] where
    --- The list itself.
    toList xs = xs

instance ListSource Maybe where
    --- Singleton with element from 'Just' or empty list for 'Nothing' 
    toList (Just a) = [a]
    toList Nothing  = []

instance ListSource  Either l where
    --- Singleton with element from 'Right' or empty list for 'Left'
    toList (Left _) = []
    toList (Right a) = [a]

instance ListSource StringJ where
    --- List of characters, computed lazily in contrast to 'unpacked'
    toList s
        | null s    = []
        | otherwise = head s : toList (tail s)

--
--  Conversion between 'String's and lists and String functions that need the above
--

--- Eagerly converts a 'String' to a list.
unpacked :: String -> [Char]
unpacked s = loop (length s - 1) [] where
        loop :: Int -> [Char] -> [Char]
        loop i res
            | i >= 0 = loop (i-1) (s.charAt i : res)
            | otherwise = res

{--
    convert a list of characters to a string
    > packed ['a', 'b', 'c' ] == "abc"
    Not very efficient, may be replaced by a java function that does it with a
    string buffer later.
    -}
packed [] = ""
packed cs = fold (++) "" (map ctos cs)

{--
    @strhead s n@ returns the initial portion of s with at most n characters.
    if s.'length' is lower than n, only so much characters are returned.
    -}
strhead s i = substr s 0 (min i s.length)

--
--  Common list functions. Includes what Haskell 2010 has in Data.List
--       

{--
    'concat' concatenates the sublists of the argument which is a list of list.
    It is ok if the argument is an infinite list or any of the sublists is infinite.
    In either case, the result will also be infinite.
    -}
concat xss = foldr (++) empty xss

{--
    @cycle xs@ builds a value that is an infinite repetition of /xs/, which must not be empty.
    -}
cycle xs | null xs   = error "Prelude.cycle []"
         | otherwise = xs ++ cycle xs

{--
 * @sortBy f xs@ is a stable sort (merge sort), it uses /f/ to decide the order of elements.
 * If @a `f` b@ is true, then /a/ comes before /b/, otherwise /b/ comes before /a/.
 *
 * see also 'comparing',  'descending'
 -}
sortBy _ []  = [];
sortBy _ [x] = [x];
sortBy by xs = merge (sortBy by l1) (sortBy by l2)
    where
        (l1,l2) = splitted xs
        merge [] x = x
        merge x [] = x
        merge (a:as) (b:bs)
             | a `by` b   = a : merge as (b:bs)
             | otherwise  = b : merge (a:as) bs
        splitted [] = ([],[])
        splitted xs = (take n2 xs, drop n2 xs) where n2 = length xs `quot` 2

{-- 
    Standard sort uses operator '<=' and demands that the type of 
    the list elements is an instance of 'Ord'
    -}
sort = sortBy (<=)        