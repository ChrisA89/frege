--- Utility functions for the parser.
module frege.compiler.grammar.Util where 

import  Compiler.enums.TokenID
import Compiler.types.Positions
import Compiler.types.Tokens


import  frege.compiler.Data
import  frege.compiler.GUtil  hiding(yyerror)
import  frege.compiler.Utilities  as  U()
import  frege.compiler.Nice()

import  Data.NanoParsec  as  N  hiding(between)
import  Control.monad.trans.MonadTrans

-- -------------------------------------------------------------------- meta

--- make sure item is unqualified (applies to 'operator' only)
unqualified o = o >>= lift . U.unqualified


{-
    qvarid:  QUALIFIER QUALIFIER varop  { \n\t\v     -> With2 n t v}
        |    QUALIFIER varop            { \t\v       -> With1 t v}
        |    VARID                      { \v         -> Simple v }
-}
qualified t1 t2 = do
        q1 <- token QUALIFIER
        do 
                q2 <- token QUALIFIER
                v  <- t1
                return (With2 q1 q2 v)
            <|> do
                v  <- t1
                return (With1 q1 v)
    <|>
        Simple <$> t2

--- remember the input stream. Suceeds always.
mark   = N.getPos
--- resume parsing with a modified input stream
resume = N.putPos

--- skip over tokens until ";" or "}" taking braced blocks into account
skipdef = do
        pos <- mark
        resume (skip 0 pos)
    where
        skip !n pos 
            | Nothing <- uncons pos = pos
        skip 0 pos
            | Just (t,ts) <- u, isChar ';' t = pos
            | Just (t,ts) <- u, isChar '}' t = pos
            where u = uncons pos
        skip n pos
            | Just (t,ts) <- u, isChar '}' t = skip (n-1) ts
            | Just (t,ts) <- u, isChar '{' t = skip (n+1) ts
            | Just (t,ts) <- u, otherwise    = skip n ts
            | otherwise                      = error "skip"
            where u = uncons pos


--- mark begin and end of some item
positioned p = do
        here <- mark
        result <- p
        there <- mark
        return (position here there, result)
    where
        position from to = case uncons from of
            Just (f, _) -> case uncons to of
                Just (t, _) 
                    | t != f -> Pos f (head . takeWhile (!=t) . toList $ from)
                    | otherwise = Pos t t
                Nothing -> Pos f (last (toList from))
            Nothing -> Position.null


--- > between "parser" '(' ')' parser
--- like 'N.between', but flags missing closing symbol with meaningful message  
between what left right parser = do
    tokch left
    r <- parser
    tokch right 
        <|> yyerror ("missing " ++ show right ++ " after " ++ what ++ ", found ")
    reduce what r


-- -------------------------------------------------------------------- lexical stuff
    
token t     = satisfy (isToken t)   >>= tracetok


tokch c     = satisfy (isChar  c)   >>= tracetok


keywd s     = satisfy (isKey   s)   >>= tracetok


isToken x   =  (x==) . Token.tokid


isChar  c t = isToken CHAR t  && yychar t == c


isKey   s t = isToken VARID t && t.value == s


-- -------------------------------------------------------------------- Error handling
yydebug = maybe false (const true) (System.getenv "YYDEBUG")


tracetok t 
    | yydebug, traceLn (show t.line ++ ": consuming " ++ yynice t) = return t
    | otherwise = return t


reduce s x 
    | yydebug, traceLn ("reducing " ++ s) = return x
    | otherwise = return x


yyfound bad msg = lift do 
    U.error (yyline bad) (
        Nice.text (msg++",") Nice.<+> Nice.nest 4 (
            Nice.text "found: " Nice.<+> Nice.text (yynice bad)
        )
      )


yyerror msg = do
    pos <- mark
    let t = errortoken pos
    lift $ U.error (yyline t) (Nice.text msg Nice.<+> Nice.text (yynice t))
    return t


--- extract the first token or EOF marker from a stream
errortoken = maybe eof fst . uncons
    where
        eof = Token{tokid = COMMENT, value = "END OF INPUT", 
                    line = maxBound, offset = maxBound, 
                    qual=[], col=1}

--- checks property on next token and prints error message if not satisfied
expecting f msg = satisfy f >>= tracetok <|> yyerror msg


--- reduces a 'Token' to a 'Vbl'
vbl p = do
    t <- p
    return Vbl{pos=yyline t, name=Simple t, typ=Nothing}


--- reduces a 'Sname' to a 'Vbl'
vbls p = do
    name <- p
    return Vbl{pos = yyline (SName.id name), name, typ=Nothing}


