--- experimental Parser
package frege.compiler.grammar.Parser
        -- inline(ยง, k, s, i, b)
    where 

-- import Compiler.enums.Flags
import  Compiler.enums.TokenID
import  Compiler.enums.Visibility

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.SNames(Simple)
import  Compiler.types.Packs
import  Compiler.types.ImportDetails
import  Compiler.types.Definitions
import  Compiler.types.Global as G

import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(enclosed)
import  Compiler.common.CompilerOptions as CO(standardGlobal)

import Compiler.GUtil hiding (yyerror, unqualified)
import Compiler.Main()

import Lib.PP ()
-- import Test.QuickCheck as Q()
import Data.NanoParsec as N hiding (between)
import Control.monad.trans.MonadTrans
-- import Data.List
import Data.TreeMap (Tree, insertkv)



-- import outsourced modules
import  frege.compiler.grammar.Util

--- the main program
main args = do
    g       <- standardGlobal
    scanned <- CO.getOpts args
    case scanned  of
        Just (opts, ourargs) -> mapM_ (run g opts) ourargs
        Nothing -> return ()


run :: Global -> Options -> String -> IO ()
run g opts source = do                
        let opt' = opts.{source} -- .{flags <- flip BitSet.unionE IDE}
            g'   = g.{options = opt', gen <- GenSt.{printer=stdout}}
            passes = head Main.passes 
                        : (liftStG runParser, "parsing")
                        : drop 2 Main.passes
        (_, g) <- StIO.run (forM_ passes Main.runpass) g' 
        when (g.errors > 0) do
            stderr.println "Source code has errors. See you later."
            


runParser = do
        g      <- getST
        result <- modul.run (filter Token.noComment g.sub.toks.toList)
        case result of
            (Right (Program.Module (packname, defs, doc)), str) -> do
                changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname,
                                                definitions = defs,
                                                packageDoc = doc}}
                stio ("tokens",  g.sub.toks.length)
            (Left err, ts) -> do
                E.error (pos ts) (PP.text err PP.</> PP.text " at " 
                                        PP.<+> PP.text (if null ts 
                                                then "EOF" 
                                                else yynice (head ts)))
                stio ("tokens", g.sub.toks.length) 
            nothing -> stio ("tokens", g.sub.toks.length)
    where
        pos [] = Position.null
        pos (t:_) = Position.Pos t t


--- tokens allowed in package names
allowedInPackageNames = [VARID, DATA, TYPE, NATIVE, PURE, PACKAGE, IMPORT]


varidkw = choice (map token allowedInPackageNames)


operator = satisfy op
    where op x = let tid = Token.tokid x in tid >= LOP1 && tid <= NOP16


noexpression t = Vbl{pos=yyline t, name=Simple t, typ=Nothing}


-- -------------------------------------------------------------------- Grammar

--- alias name for imported item                  
alias = token VARID <|> token CONID <|> unqualified operator


--- some documentation comments, without separator
docs     = joined "\n" . map _.value <$> some (token DOCUMENTATION)


--- some documentation, separated and ended by semicolon
docDefs  = joined "\n" <$> docs `sepEndBy1` tokch ';'


--- > Data.List
packagename = magicPack <$> packagename1


--- > a.Q.x.y.Pack
packagename1 = do 
        t <- token CONID
        lift do
             changeST Global.{sub <- SubSt.{idKind <- insertkv (KeyTk t) (Left())}}
        return t.value 
    <|> do
        a <- varidkw <* tokch '.' <|> token QUALIFIER
        c <- packagename1
        reduce "packagename1" (a.value++ "." ++ c)


--- > package foo.bar.Baz
packageclause = do
        doc <- optional docs
        token PACKAGE
        c <- packagename   
        reduce "packageclause" (c, doc)


memspecs = memspec `sepEndBy` tokch ','


memspec = 
        do
            v <- alias
            a <- optional alias
            let x = fromMaybe v a
            return protoItem.{name  = Simple v, alias = enclosed  x.value}
    <|> do
            token PUBLIC
            fmap ImportItem.export memspec


unop  = tokch '!' <|>  tokch '?'


varop = token VARID <|> unop


qvarid = qualified varop (token VARID)


qconid = qualified (token CONID) (token CONID)


opname = opSname <$> operator


{-
    importitem:
        qvarid                          { \v        -> protoItem.{ name = v } }
        | CONID '(' memspecs ')'        { \v\_\ms\_ -> protoItem.{ name = Simple v, members = Just ms} }
        | CONID '(' ')'                 { \v\_\_    -> protoItem.{ name = Simple v, members = Just []} }
        | qconid                        { \v        -> protoItem.{ name = v } }
        | operator                      { \t        -> protoItem.{ name = opSname t } }
        | unop                          { \v        -> protoItem.{ name = Simple v} }
-}
importitem =
    protoItem.{name=} <$> qvarid 
    <|> do
        c  <- token CONID
        ms <- between "member specifications" '(' ')' memspecs
        reduce "importitem Q(...)" protoItem.{name = Simple c, members = Just ms}
    <|> protoItem.{name=} <$> qconid
    <|> protoItem.{name=} <$> opname
    <|> protoItem.{name=} . Simple <$> unop


{-
    importspec:
    importitem                      { \s      -> ImportItem.{alias = (U.enclosed . Token.value . SName.id . ImportItem.name) s} s}
    | importitem alias              { \s\a    -> ImportItem.{alias = U.enclosed (Token.value a)} s }
    | PUBLIC importspec             { \_\s    -> ImportItem.export s }
-}        
-- importspec :: ParserT [] Token StG ImportItem
importspec = 
    (token PUBLIC >> ImportItem.export `fmap` importspec)
    <|> do 
        item  <- importitem
        ali   <- alias <|> return item.name.id
        return (ImportItem.{alias = enclosed ali.value} item)


--- 'importspec', 'importspec', 
importspecs = importspec `sepEndBy` (tokch ',')


importliste = 
                          linkNone.{items=} <$> liste
    <|> (token PUBLIC   >> _.{publik=true}  <$> importliste)
    <|> (keywd "hiding" >> linkAll.{items=} <$> liste)
    <|> reduce "empty import list" linkAll
  where
    liste = between "import items" '(' ')' importspecs


importdef = do
        token IMPORT
        (pos, pack) <- positioned packagename
        as <- optional asNamespace
        imports <- importliste
        reduce "import" ImpDcl{pos, pack, as, imports}
    where
        asNamespace = do
            as <- optional (keywd "as")
            c  <- token CONID
            lift do
                changeST Global.{sub <- SubSt.{idKind <- insertkv (KeyTk c) (Left()) }}
            return c.value


documentation = do
    comment <- token DOCUMENTATION
    reduce "documentation" DocDcl {pos = yyline comment, text = comment.value}


--- a term
term = vbls qvarid


{--
    gqual:
        expr                            { \e ->  Left (Nothing, e) }
        | expr GETS expr                { \p\g\e -> do
                                            pat <- exprToPat p
                                            YYM.return (Left (Just pat, e)) }
-}
gqual = do
        e <- expr
        o <- optional (token GETS >> expr)
        case o  of
            Nothing -> return (Left (Nothing, e))
            Just x -> lift do
                pat <- exprToPat e
                return (Left (Just pat, x))


{--
    lcqual:
        gqual
        | expr '=' expr                  { \e\t\x -> do { fh <- funhead e; YYM.return (Right (fundef fh x)) }}
        | LET '{' letdefs '}'            { \_\_\ds\_ -> Right ds }
-}
lcqual = cond (token LET) lqual gqual
    where
        lqual = do
            token LET
            Right <$> between "let definitions" '{' '}' letdefs
        gqual = do
            p <- expr
            pos <- mark
            t <- pany >>= tracetok
            case t.tokid  of
                GETS                = ege p
                CHAR | isChar '=' t = eee p
                _                   = do
                    resume pos
                    return (Left (Nothing, p))
        ege e = do
            x <- expr
            lift do
                pat <- exprToPat e
                return (Left (Just pat, x))
        eee e = do
            x <- expr
            fh <- lift do
                funhead e
            return (Right (fundef fh x))


{--
    primary:
        term
        | DO  '{' dodefs  '}'             { \d\_\defs\_   -> do mkMonad (yyline d) defs }
        | primary   '.' VARID             { \p\_\(v::Token) -> umem p v id}
        | primary   '.' operator          { \p\_\v -> do {v <- unqualified v;
                                                        YYM.return (umem p v id)}}
        | primary   '.' unop              { \p\_\v -> umem p v id}
        | qualifiers    '{' VARID '?' '}' { \q\_\(v::Token)\_\_ ->
                                                Vbl (yyline v) (q v.{value <- ("has$" ++)}) Nothing}
        | qualifiers    '{' VARID '=' '}' { \q\_\(v::Token)\_\_ ->
                                                Vbl (yyline v) (q v.{value <- ("upd$" ++)}) Nothing}
        | qualifiers    '{' VARID GETS '}' { \q\_\(v::Token)\_\_ ->
                                                Vbl (yyline v) (q v.{value <- ("chg$" ++)}) Nothing}
        | qualifiers    '{' getfields '}' { \q\(p::Token)\fs\_ -> let {
                            // n   = Simple q;
                            flp = Vbl (yyline p) (wellKnown p "flip") Nothing;
                            bul = Vbl (yyline p) (contextName p "โข")   Nothing;
                            c []     = undefined;
                            c (f:fs) = fold cex (chup f) fs where {
                                cex x f = bul `nApp` x `nApp` chup f;
                                chup :: (Token, Bool, Exp) -> Exp;
                                chup (r, true, e)  = flp `nApp` Vbl (yyline r) (q r.{value <- ("chg$"++)}) Nothing `nApp` e;
                                chup (r, false, e) = flp `nApp` Vbl (yyline r) (q r.{value <- ("upd$"++)}) Nothing `nApp` e;
                                          }} in c fs }
        | primary   '.' '{' VARID '?' '}' { \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("has$"++)} id}
        | primary   '.' '{' VARID '=' '}' { \p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("upd$"++)} id}
        | primary   '.' '{' VARID GETS '}' {\p\_\_\(v::Token)\_\_ -> umem p v.{value <- ("chg$"++)} id}
        | primary   '.' '{' getfields '}' { \x\(p::Token)\_\fs\_ ->
                                    let {
                            u x [] = x;
                            u x ((r::Token, true , e):xs) = u (umem x r.{value <- ("chg$" ++)} (`nApp` e))  xs;
                            u x ((r::Token, false, e):xs) = u (umem x r.{value <- ("upd$" ++)} (`nApp` e))  xs;
                                    } in u x fs}
        | primary '.' '[' expr ']'      { \p\(t::Token)\_\v\_  ->
                                            let elem = t.position.change VARID "elemAt"
                                            in Vbl {pos=elem, name=Simple elem.first, typ=Nothing}
                                                `nApp` p
                                                `nApp` v}
-}
primary = primary_nr


--- the non-recursive part of a primary
primary_nr = term
    <|> do
        d <- token DO
        (between "do block" '{' '}' dodefs >>= lift . mkMonad (yyline d))
            <+> (yyerror "error in do block"  >> return (noexpression d))  
    where
        dodefs = lcqual `sepEndBy1` tokch ';'


unex = primary
    <|> liftM2 nApp (vbl unop) primary


appex = foldl1 nApp <$> some unex


binex = appex


topex = binex


expr = topex


funlhs = binex >>= lift . funhead


fundcl (pos, name, pats) expr = FunDcl {poss=[pos], vis=Public, name, pats, expr, doc=Nothing}


function = do
    head <- funlhs
    expecting (isChar '=') "'=' expected, found"
    e <- expr <+> do
            t <- yyerror "syntax error in right hand side of function definition at "
            skipdef
            return (noexpression t)
    reduce "function" (fundcl head e)


letdef = function


letdefs = letdef `sepEndBy1` tokch ';'


localdef = function


publicdefinition = localdef


visibledefinition = do
        modifier <- optional (token PRIVATE 
                                <|> token PROTECTED 
                                <|> token PUBLIC)
        publicdf <- publicdefinition
        case maybe PUBLIC _.tokid modifier of
            PRIVATE     -> return (updVis Private   publicdf)
            PROTECTED   -> return (updVis Protected publicdf)
            _           -> return publicdf


definition  =
        documentation 
        <|> importdef
        <|> visibledefinition


definitions = definition `sepEndBy1` some (tokch ';')


--- parse whole program    
modul :: ParserT [] Token StG Program
modul = do
        (packname, doc) <- packageclause
        defs <- tokch ';' *> definitions 
            <|> token WHERE *> between "top level definitions" '{' '}' definitions
        eos <|> do
            t <- pany
            lift (E.warn (yyline t) (PP.text "end of program before end of file")) 
        reduce "module" $ Program.Module (packname, defs, doc)


