--- Code generation for functions and CAFs

module frege.compiler.gen.java.VarCode where

import Data.TreeMap(TreeMap)
import Lib.PP(text)

import Compiler.enums.Flags(TRACEG)
import Compiler.classes.Nice(nice, nicer)
import Compiler.types.Global(Symbol, StG,
                                getST)
import Compiler.types.Symbols(SymV)
import Compiler.common.Errors as E(logmsg)

import Compiler.Utilities as U()

import Compiler.gen.java.Common
import Compiler.gen.java.Abstract
import Compiler.gen.java.Bindings

varCode :: TreeMap Symbol Binding -> Symbol -> StG [JDecl]
varCode binds sym = do
    g <- getST
    E.logmsg TRACEG sym.pos (text ("varCode for " ++ nicer sym g))
    si <- symInfo sym
    case sym of 
        SymV{expr = Just{}}
            | null si.argSigs = pure [comment]  -- nust be CAF
            | otherwise = funDef binds sym
            where
                comment = JComment (nicer sym g) 
        _  = error ("varCode: no SymV? " ++ nicer sym g)

funDef :: TreeMap Symbol Binding -> Symbol -> StG [JDecl]
funDef binds sym = do
    g <- getST
    E.logmsg TRACEG sym.pos (text ("compiling " ++ sym.nice g))
    pure [JComment (nicer sym g)]