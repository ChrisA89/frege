--- Code generation for functions and CAFs

module frege.compiler.gen.java.VarCode where

import frege.Prelude hiding (<+>)

import Data.TreeMap(TreeMap)
import Lib.PP(text, <>, <+>, <+/>)
import Data.Bits(BitSet, BitSet.member)

import Compiler.enums.Flags(TRACEG)
import Compiler.enums.RFlag(RTailRec)
import Compiler.classes.Nice(nice, nicer)
import Compiler.types.Global(Symbol, StG, Global(),
                                getST, changeST)
import Compiler.types.Symbols(SymV)
import Compiler.types.Expression(Expr, ExprT)
import Compiler.types.Positions(Positioned)
import Compiler.common.Errors as E(logmsg)
import Compiler.common.Annotate(anno)

import Compiler.Utilities as U(javaName)
import frege.compiler.Transform     as T()

import Compiler.gen.java.Common
import Compiler.gen.java.Abstract
import Compiler.gen.java.Bindings
import Compiler.gen.java.Match

varCode ‚à∑ TreeMap Symbol Binding ‚Üí Symbol ‚Üí StG [JDecl]
varCode binds sym = do
    g <- getST
    E.logmsg TRACEG sym.pos (text ("varCode for " ++ nicer sym g))
    si <- symInfo sym
    case sym of 
        SymV{expr = Just{}}
            | null si.argSigs = pure [comment]  -- nust be CAF
            | otherwise = funDef sym binds 
            where
                comment = JComment (nicer sym g) 
        _  = error ("varCode: no SymV? " ++ nicer sym g)

--- Generate code for a function with arguments
funDef ‚à∑ Symbol ‚Üí TreeMap Symbol Binding ‚Üí StG [JDecl]
funDef sym binds = do
    g   ‚Üê getST
    if g.toplevel
    then topFun sym binds
    else localFun sym binds

--- Generate code for a top level function
topFun ‚à∑ Symbol ‚Üí TreeMap Symbol Binding ‚Üí StG [JDecl]
topFun (sym@SymV {expr = Just dx}) binds = do
    g   ‚Üê getST
    E.logmsg TRACEG sym.pos (text "topFun:" 
                <+> text (nice sym.name g) <> text " :: "
                <> text (nicer sym.typ.rho g) 
                <> text ", depth="  <> anno sym.depth
                <> text ", rstate=" <> (text ‚Ä¢ show) sym.rkind)

    -- x   ‚Üê dx                -- get expression
    si  ‚Üê symInfo sym

    let !arity = length si.argSigs
    when (arity != sym.depth) do
        E.fatal sym.pos (text "funDef: arity=" <> anno arity <> text ", depth=" <> anno sym.depth)
        return ()
    let
        argNames = getArgs g
        ctxNames = getCtxs g
        isTailRec = RTailRec `member` sym.rkind
        argAttr  = if isTailRec then empty else attrFinal
        ctxArgs  = map (unFinal isTailRec) (zipWith (constraintArg g)  sym.typ.rho.context  ctxNames)
        -- for polymorphic recursion, we must also change the constraints
        unFinal ‚à∑ Bool ‚Üí FormalArg ‚Üí FormalArg
        unFinal s (arg@(a,b,c,d))
            | s = (empty, b, c, d ++ "f")
            | otherwise = arg
        methArgs  = argDefs argAttr si argNames
        methName  = (javaName g sym.name).base

    stmts ‚Üê compiling sym (genFunction sym si.returnJT methArgs binds)

    let worker      = JMethod {attr = attrs [JFinal, JPublic, JStatic],
                       gargs = targs sym.typ,
                       jtype = si.returnJT,
                       name  = methName,
                       args  = ctxArgs ++ methArgs,
                       body  = JBlock stmts}
 
    defs        = [{-lClass,-} worker]

    pure ([JComment ((nicer sym g) ++ "  " ++ show sym.strsig ++ "  " ++ show sym.rkind),
         JComment (nicer sym.typ g)] ++ defs)


topFun sym binds = do
    g ‚Üê getST
    error ("topFun: no SymV with expression " ++ nicer sym g)


localFun ‚à∑ Symbol ‚Üí TreeMap Symbol Binding ‚Üí StG [JDecl]
localFun sym binds = do
    g ‚Üê getST
    E.logmsg TRACEG sym.pos (text ("compiling local " ++ sym.nice g))
    pure [JComment (nicer sym g)]

{--
    > compiling symbol action 
    
    run @action@ with @symbol@ in the current compiling environment
    -}
compiling ‚à∑ Symbol ‚Üí StG ùñÜ ‚Üí StG ùñÜ
compiling sym action = do
    changeST Global.{genEnv ‚Üê (sym:)}
    r ‚Üê action
    changeST Global.{genEnv ‚Üê tail}
    pure r

{--
    - invokes 'genLambda' to generate code for a function
    - wraps the code in a while statement for tail calling functions
    -}
genFunction (sym@SymV {expr = Just dex}) rmode args binds = do
        -- g <- getST
        ex <- dex
        if not (RTailRec `member` sym.rkind) 
            then genLambda rmode ex args binds
            else do
                g <- getST
                let
                    ctxs  = zipWith (constraintArg g)  sym.typ.rho.context  (getCtxs g)
                    fargs = [ (attrFinal, sig, jt, nm ++ "f") | (_,sig,jt,nm) <- args ]
                    decls = [ JMember { attr = attrFinal, jtype = jt,
                                        name = nm,
                                        init = Just (JAtom (nm++"f"))}
                                            | (_,_,jt,nm) <- ctxs ]
                            ++ [ JMember { attr = attrFinal,
                                         jtype = jt,
                                         name = nm ++ "f",
                                         init = Just (JAtom nm)} | (_,sig,jt,nm) <- args ]
                    stmts = map JLocal decls
                code <-  genLambda rmode ex fargs binds
                pure [JCond "tailrecursion: while" (JAtom "true") (stmts ++ code)]
genFunction sym rmode args binds = error "genFunction: no function"

{--
  * Code for outer lambdas.
  *
  * Set's up a 'Binding' for the corresponding method argument and
  * 'match'es its pattern against it with the enclosed expression as continuation.
  -}
genLambda rm (Lam {pat, ex}) ((arg@(_, _, _, s)) : args) binds = do
    g <- getST
    ps <- T.patternStrictness pat
    let komplett = T.patsComplete g [pat]
        badguard = T.openCaseWhen g ex
        assert = isNothing komplett
         -- mustthrow = not assert && isNothing badguard
        margs = map JAtom [show ((last g.genEnv).name.nice g),
                                                 show (getpos pat)] ++ [JAtom s]
        -- construct new NoMatch("Module.foo", 42, arg$1)
        jthrow = [JThrow (JNew (Ref jnNoMatch []) margs)]
 
    (_, code) <- match assert pat (adaptArg g arg ps)
                            (genLambda rm ex args) binds
    case komplett of
         Just p -> do
             E.warn (getpos pat) (text "function pattern is refutable, "
                             <> text "consider adding a case for "
                             <+/> text (nicer p g))
             pure (code ++ jthrow)
         _ -> case badguard of
             Just (Left x) -> do
                 E.warn (getpos x) (text "guard (" <> text (nicer x g) <> text  ") may evaluate to false.")
                 pure (code ++ jthrow)
             Just (Right p) -> do
                 E.warn (getpos p) (text"pattern guard (" <> text (nicer p g) <> text ") may fail to match.")
                 pure (code ++ jthrow)
             Nothing -> pure code
 
 
genLambda rm x [] binds {-
    | Lam {pat} <- x = do
        g <- getST
        E.fatal (getpos x) (text ("genLambda: argument for " ++ nice pat g ++ " missing"))
    | otherwise -} = do
        g <- getST
        E.logmsg TRACEG (getpos x) (text ("genLambda[]: " ++ nice x g)) 
        genReturn rm x binds
 
genLambda _ x _ _ = do
    g <- getST
    E.fatal (getpos x) (text ("genLambda: bad expression: " ++ nice x g))
    
genReturn _ _ _ = return [JReturn (JAtom{name="null"})]