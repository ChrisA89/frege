--- The compiler driver & builder
package frege.compiler.Build

    where

import  frege.Prelude hiding(<+>)
import  Lib.PP(msgdoc, text, <+>)
import  Control.monad.State
import  Data.TreeMap(Tree, each)

import  frege.Version(version)

import  Compiler.enums.Flags
import  Compiler.types.Global
import  Compiler.common.Desugar
import  Compiler.common.CompilerOptions (standardGlobal, getOpts)
import  Compiler.common.Errors as E()
import  Compiler.types.Tokens
import  Compiler.types.Packs
import  Compiler.types.Positions
import  Compiler.Utilities as U()

import  Compiler.grammar.Lexer as L()
import  Compiler.grammar.Frege as F()
import  Compiler.passes.Fix()
import  Compiler.passes.Imp()
import  Compiler.passes.Enter()
import  Compiler.passes.Fields()
import  Compiler.passes.TypeAlias()
import  Compiler.passes.Instances()
import  Compiler.passes.Transdef()
import  Compiler.Classes()
import  Compiler.Typecheck as TC()
import  Compiler.Transform as TF()
import  Compiler.GenMeta   as GM()
import  Compiler.GenJava7  as G7()
import  Compiler.passes.Final as FI()
import  Control.Concurrent as C()


main :: [String] -> IO Bool
main args = do
    stdg    <- standardGlobal
    scanned <- getOpts args
    case scanned  of
        Just (opts, fs) = do
                    let g = stdg.{options = opts}
                    (result, g) <- StateT.run (compiler fs) g
                    return result
        Nothing -> CompilerOptions.usage >> return false

instance Cloneable (JArray String)

{-- 
    Provide an entry point whose name is *not* 'main' and that takes
    a 'String' array.
    -}
runcompiler :: ArrayOf RealWorld String -> IO Bool
runcompiler args = Mutable.freeze args >>=  main . _.toList

compiler fs = do
    changeSTT Global.{options <- _.{source = "-"}}
    files <- processDirs fs
    g <- getSTT
    if (g.errors > 0) 
    then do
        printErrors
        return false
    else do
        -- liftStG (E.verb Position.null (msgdoc ("compiling: " ++ joined ", " files)))
        if isOn g.options.flags MAKE
        then do
            todo <- parseAll empty files
            mvar <- liftIO C.MVar.newEmpty
            -- result <- make mvar 0 todo
            return false
        else do
            results <- liftIO $ mapM (compileFile g.options) files 
            return (and results)

--- output error messages without clearing them
printErrors = do
    g <- getSTT
    liftIO (forM_ (reverse g.sub.messages) (g.stderr.println . Message.text))

--- Compile a single file with given options 
compileFile opts ef = do
    newg <- standardGlobal
    let f = either snd id ef
    let g = newg.{options = opts.{source = f}}
    -- StateT.put newg.{options = g.options.{source = f}}
    -- changeSTT Global.{options <- _.{source = f}}
    (_, g) <- StateT.run (forM_ passes runpass) g
    return (g.errors == 0)

--- All the passes that must normally be run
passes = [ (lexPass, "lexer"),
           (liftStG parsePass, "parser"),
           (liftStG Fix.pass, "join definitions"),
           (Imp.pass, "import packages"),
           (liftStG (Classes.passI true), "verify imported instances"),
           (liftStG Enter.pass, "enter definitions"),
           (liftStG Fields.pass, "field definitions"),
           (liftStG TypeAlias.pass, "process type aliases"), 
           (liftStG Instances.pass, "derive and enter instances"),
           (Transdef.pass, "resolve names"),
            (liftStG Classes.passC,          "verify class definitions"),        -- TRACE6
            (liftStG $ Classes.passI false,  "verify own instances"),            -- TRACE6
            (liftStG TF.pass7,          "simplify lets"),                   -- TRACE7
            (TC.pass,                   "type check"),                      -- TRACET, TRACEO
            (liftStG TF.pass9,          "simplify expressions"),            -- TRACE9
            (liftStG TF.pass8,          "globalize anonymous lambdas"),     -- TRACE8
            (liftStG TF.pass10,         "strictness analysis"),             -- TRACES
            (openPrinter,     "open file"),
            (GM.genmeta,      "generate meta data"),   -- none
            (G7.pass,         "generate java7 code"),  -- TRACEG
            (closePrinter,    "close java file"),
            (javac,           "run java compiler"),
            (liftStG FI.cleanSymtab,  "clean up"),
        ]

{-- 
    When we @-make@, we don't need the java compiler pass,
    because java compiling is done at the end.
    
    And we don't need the lexer and parser pass, because parsing is done
    separatly in 'lexparse' 
    -}
makepasses = filter ((!~ ´run java´) . snd) (drop 2 passes)

lexPass = do
    g <- getSTT
    result <- L.pass
    -- changeSTT Global.{sub <- _.{toks = arrayFromList result}}
    return ("tokens", length result)
 

parsePass = do
        g       <- getST
        result <- F.pass (filter Token.noComment g.sub.toks.toList)
        case result of
            Just (Program.Module (packname, defs, doc)) -> do
                changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname}}
                changeST Global.{sub <- (SubSt.{sourcedefs = defs}
                                         • SubSt.{packageDoc = doc})}
                stio ("tokens",  g.sub.toks.length)
            nothing -> stio ("tokens", g.sub.toks.length)

    
-- lexparse :: Global -> String -> Global
lexparse p = do
    changeSTT _.{options <- _.{source = p}}
    L.pass
    liftStG parsePass
    

---  make filename from package name  @x.y.z.Packet@ =>  @dest/x/y/z/Packet.java@
targetPath :: Global -> String -> String
targetPath g suffix = 
                g.options.dir ++ "/"
                    ++ (´\.´.matcher (g.unpack g.thisPack)).replaceAll("/")
                    ++ suffix



openPrinter = do
    g <- getSTT
    case g.options.source of
        "-" -> do
            GM.banner version
            return ("standard output", 1)
        _   -> do
            openFilePrinter ".java"
            GM.banner version
            return ("file", 1)


openFilePrinter suffix = do
    g <- getSTT
    let target = targetPath g suffix
    pw <- liftIO do
        file <- File.new target
        parentFile <- file.getParentFile
        case parentFile of
            Just dir ->  dir.mkdirs    -- make sure all directories are there
            Nothing -> return false
        PrintWriter.new file "UTF-8"
    changeSTT Global.{gen <- GenSt.{printer=pw}}

--- close the current file printer and continue to print to 'stdout' 
closePrinter = do
    g <- getSTT
    liftIO g.printer.close
    changeSTT _.{gen <- _.{printer = stdout}}
    return ("file", 1) 

--- utility function to run a command.
--- takes a command line and produces an exit code
native runJavac frege.runtime.Javac.runJavac :: MutableIO (JArray String) -> IO Int


--- run the java compiler
javac :: StIO (String, Int)
javac = do
    g <- getSTT
    let target = targetPath g ".java"
    let command = maybe ["javac"] ´\s+´.splitted  (System.getProperty "frege.javac")
        arguments = ["-cp", joined U.pathSep (U.ourPath g.options),
                    "-d",  g.options.dir,
                    "-sourcepath", joined U.pathSep g.options.sourcePath,
                    "-encoding", "UTF-8",
                    target]
    when (isOn g.options.flags RUNJAVAC) do
        rc <- liftIO (JArray.fromList (command ++ arguments) >>= runJavac)
        when (rc != 0) do
            liftStG $ E.error (packageEnd g) 
                        (msgdoc "java compiler errors are most likely caused by erronous native definitions")
    return ("source file", 1)


runpass :: (StIO (String, Int), String) -> StIO  ()
runpass (pass,description) = do
    state <- getSTT
    when (state.errors == 0) do
        now   <- liftIO $ System.currentTimeMillis()
        (itemnm, items) <- pass
        state <- getSTT
        later <- liftIO $ System.currentTimeMillis()
        when (isOff state.options.flags IDEMODE) do
            printErrors
            changeSTT _.{sub <- _.{messages = []}}
        when (state.errors > 0) (liftIO $ state.printer.close)
        when (length description > 0 && isOn state.options.flags VERBOSE) do
            liftIO $ do  
                state.stderr.printf
                    "%-40.40s  took %7.3fs, %d %s (%d %s/s)"
                    description
                    ((later-now+1).float / 1e3f)
                    items
                    itemnm
                    ((Int.long (max 1 items)*1000L) `quot` max 1L (later-now))
                    itemnm
                state.stderr.println

--- Process the list of file arguments
--- Regular files are taken over
--- Directories are walked and found source files returned
--- Module names are translated to file names through the source path
processDirs :: [String] -> StIO [Either (Pack, String) String] 
processDirs fs = concat <$> mapM process fs
    where
        process :: String -> StIO [Either (Pack, String) String]
        process f = do
            file    <- liftIO $ File.new f
            regular <- liftIO $ file.isFile
            dir     <- liftIO $ file.isDirectory
            absolut <- liftIO $ file.isAbsolute
            if regular then return [Right f]
            else if dir then liftIO $ fmap Right <$> walk file
            else do
                g <- getSTT
                -- f could be a path relative to a source directory
                -- or a package name
                if f ~ ´\.fr$´
                then do
                    -- it looks like a file name
                    -- if it is an absolute one, then it doesn't exist
                    -- otherwise 'regular' would be true
                    if absolut then liftStG do
                        changeST Global.{options <- _.{source = "-"}}
                        E.error Position.null (msgdoc (
                            "could not read `" ++ f ++ "`")) 
                        return [] 
                    else do
                        -- resolve the path against the source path
                        rslvd <- liftIO $ resolveSP g f
                        case rslvd of 
                            Nothing -> liftStG do
                                changeST Global.{options <- _.{source = "-"}}
                                E.error Position.null (msgdoc (
                                    "could not find `" ++ f ++ "` in source path."))
                                return []
                            Just p -> return [Right p] 
                else do
                    -- take it as a path name
                    let pack = Pack.new (magicPack f)
                    rslvd <- liftIO $ resolvePackSP g pack.raw
                    case rslvd of 
                        Nothing -> liftStG do
                            changeST Global.{options <- _.{source = "-"}}
                            E.error Position.null (msgdoc (
                                "could not find a file corresponding to module `" ++ f ++ "` in source path."))
                            return []
                        Just p -> return [Left (pack, p)]

                                        
--- check if argument is a file
packfile :: String -> IO Bool
packfile f = do
    is <- File.new f
    r  <- is.isFile
    return r

--- walk a directory and return all Frege source files found.
walk :: MutableIO File -> IO [String]
walk file = do
    isd      <- file.isDirectory
    if isd
    then do
        subfiles <- file.list
        case subfiles of
            Just files -> do
                ls <- readonly toList files
                let subwalk f = File.new file f >>= walk 
                concat <$> mapM subwalk ls
            Nothing    -> return []
    else do
        regular  <- file.isFile
        readable <- file.canRead
        name     <- file.getPath
        if regular && readable && name ~ ´\.fr´
        then return [name]
        else return [] 

--- look up an external package name in source path
resolvePackSP :: Global -> String -> IO (Maybe String)
resolvePackSP g pack = do
    let path = (´\.´.matcher (magicPack pack)).replaceAll "/" ++ ".fr"
    resolveSP g path

--- Look up a (relative) file name in source path
resolveSP :: Global -> String -> IO (Maybe String)
resolveSP g path = do 
    paths <- mapM File.new g.options.sourcePath
            >>= mapM (flip File.new path) 
            >>= filterM _.isFile
            >>= mapM    _.getPath
    return (listToMaybe paths)

 
--- to do item
data Todo = 
    --- file has been parsed and dependencies added to tree
    CompileAfterDeps {
        global  :: Global       --- global state for this package
        reason  :: Maybe Pack   --- 'Nothing' means command line
    }                       
    | 
    --- module was found as dependency of some other, or was asked for on command line
    CheckUpdate {
        pack    :: Pack         --- build the package if needed
        reason  :: Maybe Pack   --- 'Nothing' means command line
    }

--- build tree
type TodoList = Tree Pack Todo 

--- Take over errors of another state
mergeErrors :: Global -> StIO ()
mergeErrors gc = changeSTT _.{sub <- _.{numErrors <- (gc.errors+)} • 
                                     _.{messages  <- (gc.sub.messages++)}}

--- Replace the state with the argument, return the old state
switchState :: Global -> StIO Global
switchState new = do
    old <- getSTT
    StateT.put new
    return old
    
{-- 
    Parse the files found on the command line
-}
parseAll :: TodoList -> [Either (Pack, String) String] -> StIO TodoList
parseAll tree [] = return tree

-- Take a note that we need to re-build the module, if necessary
parseAll tree (Left (p,_):ps) = do
        parseAll tnew ps 
    where
        tnew = tree.insert p CheckUpdate{pack=p, reason=Nothing}

-- Parse the file, find the module name and dependencies
parseAll tree (Right p:ps) = do
    g <- getSTT
    when (isOn g.options.flags VERBOSE) do
        liftIO $ stderr.println ("parsing " ++ p)
    lexparse p
    printErrors
    gc <- switchState g
    mergeErrors gc
    
    if gc.errors > 0 
    then parseAll tree ps 
    else do
        let 
            tree' = tree.insert gc.thisPack CompileAfterDeps{global=gc, reason=Nothing}
            deps = Imp.dependsOn gc
            checkUpdate t p = t.insert p CheckUpdate{pack=p, reason=Just gc.thisPack}
            tnew = fold checkUpdate tree' deps  
        parseAll tnew ps 
 