{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
    Utility functions, classes and data structures for code generation
 -}
{-
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 *
 -}

package frege.compiler.GenUtil where

import frege.Prelude except(group,print,println)
import frege.compiler.Data
import frege.compiler.Utilities as U(print, println)
import frege.compiler.Nice as PP public

--- This is $Revision$
protected version = v "$Revision$" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0

--- line width for code generation
line = 96
--- lots of blanks
blanks = (cstos • take 1000) (repeat ' ')
--- pretty print to stdout
pp x = do sequence_  (layoutXS (best line 0 x)); println ""

layoutIO None = stio ()
layoutIO (Text s x) = do
    print s
    layoutIO x
layoutIO (Line i x) = do
    println ""
    print (substr blanks 0 (i `mod` line))
    layoutIO x

layoutXS None = []
layoutXS (Text s x) = print s : layoutXS x
layoutXS (Line i x) = println "" : print (substr blanks 0 (i `mod` line)) : layoutXS x


instance Anno JName where
    anno jn = text (show jn)
-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Types ---------------------------------------
-- -------------------------------------------------------------------------------------

{--
 * a Java type
 -}
data JType =
      !Ref   { jname :: JName,  targs :: [JType] }  --- generic java type @x.y.Class<A,B>@
    -- !TArg  { var   :: String }                    --- type argument @A@
    -- !TVbl  { var   :: String }                    --- lazy type variable @A extends Lazy<A>@
    | !Nativ { typ   :: String, targs :: [JType] }  --- native type
    | !Arr   { etype :: JType }                     --- array type
    | !Lazy  { etype :: JType }                     --- lazy type

derive Eq JType

instance Anno JType where
    anno (Ref  {jname,targs}) = text (show jname) <> annoGenerics targs
    -- anno (TArg var          ) = text var
    -- anno (TVbl var          ) = text var <+> text "extends" <+> anno (lazy (TArg var))
    anno (Nativ {typ,targs} ) = text typ  <> annoGenerics targs
    anno (Arr  {etype}      ) = anno etype <> text "[]"
    anno (Lazy {})            = text "Lazy<FV>"

--- the @Val@ type
jtVal    = Ref {jname = JName "" "Val", targs = []}

--- the @FV@ type
jtValue  = Ref {jname = JName "" "FV", targs = []}

--- the @Lazy<FV>@ type
lazyVal = lazy jtValue

--- the @MH@ type, which is a boxed @MethodHandle@
jtFun    = Ref {jname = JName "" "Lambda", targs = []}

--- the @Box.Int@ type
jtInt    = Ref {jname = JName "" "Box.Int", targs = []}

jtNativeString = Nativ "java.lang.String" []
jtString = boxed jtNativeString

--- create @Lazy<T>@ for @T@, see 'lazy'
jtLazy   = Lazy

--- create the boxed form of a java type
boxed (Lazy x) = x
boxed (Nativ #^L(am(bda)?)?\d+$# [])              = jtFun
boxed (Nativ "boolean" []) = Ref {jname = JName "" "Box.Bool", targs = []}
boxed (Nativ "byte" [])    = Ref {jname = JName "" "Box.Byte", targs = []}
boxed (Nativ "short" [])   = Ref {jname = JName "" "Box.Short", targs = []}
boxed (Nativ "char" [])    = Ref {jname = JName "" "Box.Char", targs = []}
boxed (Nativ "int" [])     = Ref {jname = JName "" "Box.Int", targs = []}
boxed (Nativ "long" [])    = Ref {jname = JName "" "Box.Long", targs = []}
boxed (Nativ "double" [])  = Ref {jname = JName "" "Box.Double", targs = []}
boxed (Nativ "float" [])   = Ref {jname = JName "" "Box.Float", targs = []}
boxed (prim@Nativ _ _)     = Ref {jname = JName "" "Box", targs = [prim]}
boxed (arr@Arr _)          = Ref {jname = JName "" "Box", targs = [arr]}
boxed x = x

--- make the lazy form of a java type, does nothing if already lazy
lazy (t@Lazy{}) = t
lazy x = jtLazy (boxed x)

--- create the strict form of a java type
strict x = case boxed x of
    Ref {jname = JName "" "Box", targs = [x]} -> x
    Ref {jname = JName "" "Box.Bool"}     -> Nativ "boolean"  []
    Ref {jname = JName "" "Box.Byte"}     -> Nativ "byte"  []
    Ref {jname = JName "" "Box.Short"}    -> Nativ "short"  []
    Ref {jname = JName "" "Box.Char"}     -> Nativ "char" []
    Ref {jname = JName "" "Box.Int"}      -> Nativ "int" []
    Ref {jname = JName "" "Box.Long"}     -> Nativ "long" []
    Ref {jname = JName "" "Box.Double"}   -> Nativ "double" []
    Ref {jname = JName "" "Box.Float"}    -> Nativ "float" []
    other -> other


-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Expressions ---------------------------------
-- -------------------------------------------------------------------------------------

{--
 * A java expression
 -}
type JExpr = JX
data JX =
    JAtom {name :: String}              --- local variable, null, this, true, false, literal etc.
    | JNew JType [JExpr]                --- @new Foo(...)@
    | JNewClass JType [JExpr] [JDecl]   --- @new Foo(...) {...}@
    | JNewArray JType JExpr             --- @new Foo[...]
    | JInvoke JExpr [JExpr]             --- @foo(...)@
    | JStMem {jname :: JName, targs :: [JType]}         --- @X.<a,b,c>name@
    | JExMem {jex :: JExpr, name :: String}             --- obj.m
    -- JExMemG {jex :: JExpr, name :: String, targs :: [JType]}
    | JCast JType JExpr                 --- (T)(x)
    | JUnop { op :: String, jex :: JExpr }              --- @!x@
    | JBin {j1 :: JExpr, op::String, j2 :: JExpr}       --- @a + b@
    | JQC {j1 :: JExpr, j2 :: JExpr, j3 :: JExpr}       --- a ? b : c
    where
        ---  Syntactic precedence of java constructs
        ---  Higher numbers mean more tight binding.
        prec JQC{}     = 1
        prec JBin{}    = 2
        prec JUnop{}   = 3
        prec JCast{}   = 4
        -- prec JExMemG{} = 9
        prec JExMem{}  = 9
        prec JStMem{}  = 9
        prec JInvoke{} = 9
        prec JAtom{}   = 9
        prec JNew{}    = 7
        prec JNewClass{} = 7
        prec JNewArray{} = 7
        --- print @x@ or @(x)@ depending on relative precedences
        subex :: JExpr -> JExpr -> PP.DOCUMENT
        subex e x
                  | prec e == 2 && prec x <= 2 = text "(" <> anno x <> text ")"
                  | prec x < prec e = text "(" <> anno x <> text ")"
                  | otherwise                      = anno x
        --- create a 'JAtom'
        atom   = JAtom
        --- @invoke args expr@ ---> expr.(args)
        invoke = flip JInvoke
        --- @new args type@    ---> new type(args)
        new    = flip JNew
        --- @cast type expr@   ---> (type) expr
        cast   = JCast
        --- @xmem "name" expr@  ---> expr.name
        xmem   = flip JExMem
        --- @static X.y@ ---> X.y
        static = flip JStMem []

instance Anno JExpr where
    anno (JAtom {name}) = text name
    anno (JNew jt exs) = text "new" <+> jt.anno <> annoArgList exs
    anno (JNewClass jt exs decls) = text "new"
                            <+> jt.anno
                            <>  annoArgList exs
                            <+> (PP.block "{" (PP.stack (map JDecl.anno decls)) "}")
    anno (JNewArray jt ex) = text "new"
                            <+> jt.anno
                            <>  text "[" <> anno ex <> text "]"
    anno (JInvoke (JStMem (JName "" b) []) exs) = text b <> PP.nest 4 (annoArgList exs)
    anno (JInvoke (JStMem (JName a b) gs) exs) = text a <~/> PP.nest 4 (
                                    text "." <> annoGenerics gs <> text b <> annoArgList exs)
    anno (e@JInvoke (JExMem jex s) exs) = e.subex jex <~/> PP.nest 4 (
                                    text "." <> text s <> annoArgList exs)
    -- anno (e@JInvoke (JExMemG jex s gs) exs) = e.subex jex <~/> PP.nest 4 (
    --                                text "." <> annoGenerics gs <> text s <> annoArgList exs)
    anno (e@JInvoke x exs) = e.subex x <> annoArgList exs
    anno (e@JCast jt x) = text "(" <> jt.anno <> text ")" <> e.subex x
    anno (JStMem (JName "" b) []) = text b
    anno (JStMem (JName a b) gs) = text a <> text "." <> annoGenerics gs <> text b
    -- anno (e@JExMemG jex s gs) = e.subex jex <> text "." <> annoGenerics gs <> text s
    anno (e@JExMem jex s)     = e.subex jex <> text "." <> text s
    anno (un@JUnop op j1) = text op <+> un.subex j1
    anno (bin@JBin j1 op j2) = bin.subex j1 <+> text op <+> bin.subex j2
    anno (jqc@JQC j1 j2 j3) = jqc.subex j1
                        <+> PP.nest 4    (text "?" <+> jqc.subex j2
                                    <+/> (text ":" <+> jqc.subex j3))

{--
 * Check if a 'JExpr' is cheap enough so that we can save a local variable
 *
 * Cheap java expressions are:
 * 1. a local variable
 * 2. literal, this, null etc.
 * 3. a cast of a cheap expression
 * 4. a static variable X.m
 * 5. access to a member of a cheap expression.
 *
 * This is transitive, so that X.y.z.a.b.c.d.e.f would be "cheap", but we will not
 * see this because member variables of frege types are all lazy, i.e., there will
 * be an _e() needed to go deeper. But _e() is of course not cheap.
 -}
cheap (JAtom _) = true
cheap (JCast _ ex) = cheap ex
cheap (JStMem _ _) = true
cheap (JExMem ex _) = cheap ex
cheap _ = false

{--
    Optimize a java expression like
    > (Lambda) x.apply(y)._e()
    to
    > x.app(y)
--}
postOpt (jx@JAtom{}) = jx
postOpt (JNew typ exs)     = JNew typ (map postOpt exs)
postOpt (JNewClass typ exs decls)
                           = JNewClass typ (map postOpt exs) decls
postOpt (JNewArray jt jx)  = JNewArray jt (postOpt jx)
postOpt (JInvoke jx jxs)   = JInvoke (postOpt jx) (map postOpt jxs)
postOpt (jx@JStMem {})     = jx
postOpt (jx@JExMem {jex})  = jx.{jex <- postOpt}
postOpt (jx@JUnop  {jex})  = jx.{jex <- postOpt}
postOpt (jx@JBin {j1, j2}) = jx.{j1 <- postOpt, j2 <- postOpt}
postOpt (JQC j1 j2 j3)     = JQC (postOpt j1) (postOpt j2) (postOpt j3)
postOpt (JCast typ x)
    | typ == jtFun,
      JInvoke e []     <- x,
      JExMem a "_e"    <- e,
      JInvoke b [y]    <- a,
      JExMem c "apply" <- b = (JX.invoke [y] • JX.xmem "app") (postOpt c)
    | otherwise             = JCast typ (postOpt x)

-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Statements ----------------------------------
-- -------------------------------------------------------------------------------------

{--
 * A java statement
 -}
data JStmt =
    JError String           --- code that makes javac fail (generated by incomplete code generation)
    | JEmpty                --- empty statement
    | JBlock [JStmt]        --- { statements }
    | JReturn JExpr         --- return expr
    | JThrow  JExpr         --- throw expr
    | JAssert JExpr         --- assert expr
    | JEx     JExpr
    | JAssign JExpr JExpr   --- a = b
    | JLocal  {decl::JDecl}
    | JCond   {keyword :: String, jex :: JExpr, stmts :: [JStmt]}   --- if/while (cond) { ... }
    | JBlockX {keyword :: String, stmts :: [JStmt]}      --- try/else/catch ... { .... }



instance Anno JStmt where
    anno (JError s) = (JComment s).anno </> text "FIX: incomplete code generation;"
    anno JEmpty = text ";"
    anno (JBlock []) = text "{}"
    anno (JBlock stmts) = PP.block "{" (PP.stack (map anno stmts)) "}"
    anno (JReturn ex) = text "return" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JThrow ex)  = text "throw" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JAssert ex)  = text "assert" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JEx ex) = (postOpt ex).anno <> text ";"
    anno (JAssign x1 x2) = x1.anno <+> text "=" <+> (postOpt x2).anno <> text ";"
    anno (JLocal jdecl) = jdecl.anno
    anno (JCond k x stmts) = text k <+> bracket "(" (postOpt x).anno ")"
                        <+>  anno  (JBlock stmts)
    anno (JBlockX k stmts) = text k <+> anno (JBlock stmts)

-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Declarations --------------------------------
-- -------------------------------------------------------------------------------------

{--
    Java Attributes like *@final@*, *@static@* etc.
 -}
data JAttr = JUnchecked | JFinal | JPrivate | JPublic | JProtected | JStatic | JAbstract
derive Enum JAttr
derive Bounded JAttr

instance Anno JAttr where
    anno JUnchecked = text "@SuppressWarnings(\"unchecked\")"
    anno JFinal     = text "final"
    anno JPrivate   = text "private"
    anno JPublic    = text "public"
    anno JProtected = text "protected"
    anno JStatic    = text "static"
    anno JAbstract  = text "abstract"

--- get flag bit
flag :: JAttr -> Int
flag f = 1 `bshl` ord f

--- @setFlag flags f@ set flag /f/ in /flags/
setFlag flags f = flags `bor` flag f
--- @isOn flags f@ tells if flag /f/ is set in /flags/
isOn flags f    = (flags `band` flag f) != 0

{-- construct an integer that holds the attributes -}
attrs = fold setFlag 0

--- just @final@
attrFinal = attrs [JFinal]
attrTop   = attrs [JFinal, JPublic, JStatic]

--- annotate attributes
annoAttrs flags = PP.spread [ anno a | a <- minBound .. maxBound, isOn flags a ]

--- annotate generic part of a type
annoGenerics [] = PP.nil
annoGenerics [x] = text "<" <> anno x <> text ">"
annoGenerics xs = bracket "<" (PP.sep "," (map anno xs)) ">"

--- annotate list of classes that are implemented
annoImplements _ [] = PP.nil
annoImplements s xs = text s <+> PP.sep "," (map anno xs)

--- annotate a formal method argument
annoArg (0, _, jt, s) = JType.anno jt <+> text s
annoArg (n, _, jt, s) = annoAttrs n <+> JType.anno jt <+> text s

-- annotate a formal argument list
annoArgDef  []   = text "()"
annoArgDef  args = bracket "(" (PP.sep "," (map annoArg args)) ")"

--- annotate an actual argument list
annoArgList []   = text "()"
annoArgList args = bracket "(" (PP.sep "," (map anno args)) ")"

{--
    Java Declarations
 -}
data JDecl =
      JComment String
    | JClass {attr::Int, jtype :: JType,
                extend :: Maybe JType, implement :: [JType], defs :: [JDecl] }
    | JInterface {attr::Int, jtype :: JType,
                implement :: [JType], defs :: [JDecl] }
--    | JTCInterface {attr::Int, jtype :: JType,
--                implement :: [JType], defs :: [JDecl] }
    | JMethod {attr::Int, gargs :: [JType], jtype:: JType, name :: String,
               args::[(Int, Sigma, JType, String)], body:: JStmt}
    | JConstr {attr::Int, jtype::JType, args::[(Int, Sigma, JType, String)], body:: JStmt}
    | JMember {attr::Int, jtype::JType, name::String, init::Maybe JExpr}

--- 'JDecl's are annotatable
instance Anno JDecl where
    anno (JComment s)       = text "// " <> text s -- <> PP.line
    anno (cl@JClass {attr}) = annoAttrs attr <+> text "class"
                        <+> JType.anno (cl.jtype)
                        <+> bracket ""
                             (maybe PP.nil ((text "extends" <+>) • JType.anno) cl.extend
                             <+> annoImplements "implements" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (cl@JInterface {attr}) = annoAttrs attr <+> text "interface"
                        <+> JType.anno (cl.jtype)
                        <+> bracket "" (annoImplements "extends" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
--    anno (cl@JTCInterface {attr}) = annoAttrs attr <+> text "interface"
--                        <+> JType.anno (cl.jtype)
--                        <+> bracket "" (annoImplements "extends" cl.implement) ""
--                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (m@JMethod {attr}) = annoAttrs m.attr
                        <+> annoGenerics (m.gargs)
                        <+> m.jtype.anno
                        <+> text m.name
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JConstr {attr}) = annoAttrs m.attr
                        <+> (m.jtype).{targs = []}.anno
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JMember {attr}) = annoAttrs m.attr
                        <+> m.jtype.anno <+> text m.name
                        <+> bracket (maybe "" (const ("= ")) m.init)
                                        (maybe PP.nil (JExpr.anno • postOpt) m.init)
                                    ";"

