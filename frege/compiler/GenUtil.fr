{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
    Utility functions, classes and data structures for code generation
 -}
{-
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 *
 -}

package frege.compiler.GenUtil where

import frege.Prelude except(group,print,println)
import frege.compiler.Data
import frege.compiler.Utilities as U(print, println)
import frege.lib.PP             except (line)

--- This is $Revision$
protected version = v "$Revision$" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0

--- line width for code generation
line = 96
--- lots of blanks
blanks = (cstos • take 1000) (repeat ' ')
--- pretty print to stdout
pp x = do sequence_  (layoutXS (best line 0 x)); println ""

layoutIO None = stio ()
layoutIO (Text s x) = do
    print s
    layoutIO x
layoutIO (Line i x) = do
    println ""
    print (substr blanks 0 (i `mod` line))
    layoutIO x

layoutXS None = []
layoutXS (Text s x) = print s : layoutXS x
layoutXS (Line i x) = println "" : print (substr blanks 0 (i `mod` line)) : layoutXS x

--- print a simple value
lit d = text (show d)
listFromMaybe = Maybe.toList
--- print a 'Maybe' 'String' as either empty string or string, @null@ may not occur in annotations.
annoMbString  = maybe (lit "") String.anno

--- create a typical annotation
annotation kind vals = text "@MD." <> text kind <> bracket "(" (sep ","  (map val fvals)) ")"
    where
        val (s, d) = text s <> text "=" <> d
        fvals = filter noNil vals
        noNil (_, PP.NONE) = false
        noNil _ = true


--- things that can be pretty printed
class Anno a where
    anno :: a -> DOCUMENT


instance Anno String where
    anno = PP.fill • intersperse (text "+\"\\n\"+") • map lit • #\n#.splitted

instance Anno Int where
    anno = lit

instance Anno Long where
    anno l = text (show l ++ "L")

instance Anno Bool where
    anno = lit

instance Anno Anno x => [x] where
    anno :: Anno x => [x] -> DOCUMENT
    anno [] = text "{}"
    anno as = bracket "{" (sep "," (map Anno.anno as)) "}"

data AOP = AOP String Int Int
instance Anno AOP where
    anno (AOP s i j) = annotation "Operator" [("name", lit s), ("kind", lit i), ("prec", lit j)]

oldPrelude = Pack.new "frege.Prelude"

instance Anno QName where
    anno (TName p b) = annotation "QName" [
        ("kind", lit 0),
        ("pack", if p == oldPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b)]
    anno (VName p b) = annotation "QName" [
        ("pack", if p == oldPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b)]
    anno (MName (TName p b) m) = annotation "QName" [
        ("kind", lit 2),
        ("pack", if p == oldPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b),
        ("member", lit m)]
    anno _ = error "QName.anno: unsupported QName"

instance Anno TauA where
    anno (TauA {kind=0,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 0.anno),
        ("suba", suba.anno),
        ("subb", subb.anno)]
    anno (TauA {kind=1,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 1.anno),
        ("suba", suba.anno),
        ("subb", subb.anno)]
    anno (TauA {kind=2,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 2.anno),
        ("tcon", (listFromMaybe tcon).anno)]
    anno (TauA {kind{-=3-},tcon,suba,subb,tvar}) = annotation "Tau" [
        ("tvar", tvar.anno)]

instance Anno SigmaA where
    anno (SigmaA {bound=[],rho}) = annotation "Sigma" [
        ("rho",   rho.anno)]
    anno (SigmaA {bound,rho}) = annotation "Sigma" [
        ("bound", bound.anno),
        ("rho",   rho.anno)]

instance Anno RhoA where
    anno (RhoA {rhofun=true,cont=[],sigma,rhotau}) = annotation "Rho" [
        ("sigma",  sigma.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=true,cont,sigma,rhotau}) = annotation "Rho" [
        ("cont",   cont.anno),
        ("sigma",  sigma.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=false,cont=[],sigma,rhotau}) = annotation "Rho" [
        ("rhofun", false.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=false,cont,sigma,rhotau}) = annotation "Rho" [
        ("rhofun", false.anno),
        ("cont",   cont.anno),
        ("rhotau", rhotau.anno)]

instance Anno ContextA where
    anno (CtxA {clas,tau}) = annotation "Context" [
        ("clas", clas.anno),
        ("tau",  tau.anno)]

instance Anno ExprA where
    anno (ExprA {xkind,name,lkind,varval,alts,subx1,subx2,subx3}) = annotation "Expr" [
        ("xkind",  if xkind  == defEA.xkind  then PP.nil else xkind.anno),
        ("name",   if name   == defEA.name   then PP.nil else name.toList.anno),
        ("lkind",  if lkind  == defEA.lkind  then PP.nil else lkind.anno),
        ("varval", if varval == defEA.varval then PP.nil else annoMbString varval),
        ("alts",   if alts   == defEA.alts   then PP.nil else alts.anno),
        ("subx1",  if subx1  == defEA.subx1  then PP.nil else subx1.anno),
        ("subx2",  if subx2  == defEA.subx2  then PP.nil else subx2.anno),
        ("subx3",  if subx3  == defEA.subx3  then PP.nil else subx3.anno),
        ]

--- default "serialized" expression
defEA = ExprA {xkind = 7, name = Nothing, lkind = 0, varval = Nothing, alts = [],
                subx1 = 0, subx2 = 0, subx3 = 0}