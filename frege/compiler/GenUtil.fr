{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
    Utility functions, classes and data structures for code generation
 -}

package frege.compiler.GenUtil where

import frege.Prelude except(print,println,break)
import frege.compiler.Data
import frege.compiler.Utilities as U(print, println)
import frege.compiler.Nice as PP public


--- line width for code generation
line = 96
--- lots of blanks
blanks = (packed • take 1000) (repeat ' ')
--- pretty print to stdout
pp x = do sequence_  (layoutXS (best line 0 x)); println ""

layoutIO None = stio ()
layoutIO (Text s x) = do
    print s
    layoutIO x
layoutIO (Line i x) = do
    println ""
    print (substr blanks 0 (i `mod` line))
    layoutIO x

layoutXS None = []
layoutXS (Text s x) = print s : layoutXS x
layoutXS (Line i x) = println "" : print (substr blanks 0 (i `mod` line)) : layoutXS x


instance Anno JName where
    anno jn = text (show jn)
-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Types ---------------------------------------
-- -------------------------------------------------------------------------------------

{--
    Model of Java types
 -}
data JType =
      !Ref   { jname :: JName,  targs :: [JType] }  --- frege type (extends Algebraic)
    | !TArg  { var   :: String }                    --- type argument @A@
    | !Nativ { typ   :: String, targs :: [JType] }  --- native type
    | !Lazy  { yields :: JType }                    --- lazy type that yields etype
    | !Func  { args :: Int, yields :: JType }       {-- function that can take so many
                                                        arguments before yielding a result -} 
    | Lambda                                        --- some function
    | Object                                        --- something unknown
    | Algebraic                                     --- some frege value
    | Value                                         --- some value
    
    

derive Eq JType

instance Anno JType where
    anno (Ref  {jname,targs})   = text (show jname) <> annoGenerics targs
    anno (TArg var          )   = text var
    anno (Nativ {typ,targs} )   = text typ  <> annoGenerics targs
    anno (Lazy {})              = text "Lazy"
    anno Func{args, yields}     = text ("Func" ++ show args)
    anno Lambda                 = text ("Lambda")
    anno Object                 = text ("Object")
    anno Algebraic              = text ("Algebraic")
    anno Value                  = text ("Value")

instance Show JType where
    show jt = PP.pretty 1000 jt.anno    

-- the @Value@ type
jtValue  = Value

--- the @Object@ type
--- *Note:* this is not the same as @Nativ "java.lang.Object"@
jtObject  = Object

--- the @Lazy@ type
lazyObject = Lazy Object

--- the most general type for anonymous fuctions
jtFun    = Lambda

--- the @Int@ type
jtInt    = Nativ "int" []
jtString = Nativ { typ = "java.lang.String", targs = []}

--- create @Lazy<T>@ for @T@, see 'lazy'
jtLazy   = Lazy

--jnLazy   = JName "" "Lazy"
--- used to construct static member functions of @Delayed@
jnDelayed   = JName "" "Delayed"

--- create the boxed form of a java type
boxed (Lazy x) = x
boxed (Nativ "boolean" []) = Nativ {typ = "java.lang.Boolean", targs = []}
boxed (Nativ "byte" [])    = Nativ {typ = "java.lang.Byte", targs = []}
boxed (Nativ "short" [])   = Nativ {typ = "java.lang.Short", targs = []}
boxed (Nativ "char" [])    = Nativ {typ = "java.lang.Character", targs = []}
boxed (Nativ "int" [])     = Nativ {typ = "java.lang.Integer", targs = []}
boxed (Nativ "long" [])    = Nativ {typ = "java.lang.Long", targs = []}
boxed (Nativ "double" [])  = Nativ {typ = "java.lang.Double", targs = []}
boxed (Nativ "float" [])   = Nativ {typ = "java.lang.Float", targs = []}
boxed x = x

--- make the lazy form of a java type, does nothing if already lazy
lazy (t@Lazy{}) = t
lazy x = Lazy (boxed x)

--- create the strict form of a boxed java type
strict x = case boxed x of
    Nativ {typ = "java.lang.Boolean", targs = []}   -> Nativ "boolean"  []
    Nativ {typ = "java.lang.Byte", targs = []}      -> Nativ "byte"  []
    Nativ {typ = "java.lang.Short", targs = []}     -> Nativ "short"  []
    Nativ {typ = "java.lang.Character", targs = []} -> Nativ "char" []
    Nativ {typ = "java.lang.Integer", targs = []}   -> Nativ "int" []
    Nativ {typ = "java.lang.Long", targs = []}      -> Nativ "long" []
    Nativ {typ = "java.lang.Double", targs = []}    -> Nativ "double" []
    Nativ {typ = "java.lang.Float", targs = []}     -> Nativ "float" []
    other -> other

-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Expressions ---------------------------------
-- -------------------------------------------------------------------------------------

{--
 * A java expression
 -}
type JExpr = JX
data JX =
    JAtom {name :: String}              --- local variable, null, this, true, false, literal etc.
    | JNew JType [JExpr]                --- @new Foo(...)@
    | JNewClass JType [JExpr] [JDecl]   --- @new Foo(...) {...}@
    | JNewArray JType JExpr             --- @new Foo[...]
    | JInvoke JExpr [JExpr]             --- @foo(...)@
    | JStMem {jname :: JName, targs :: [JType]}         --- @X.<a,b,c>name@
    | JExMem {jex :: JExpr, name :: String}             --- obj.m
    -- JExMemG {jex :: JExpr, name :: String, targs :: [JType]}
    | JCast JType JExpr                 --- (T)(x)
    | JUnop { op :: String, jex :: JExpr }              --- @!x@
    | JBin {j1 :: JExpr, op::String, j2 :: JExpr}       --- @a + b@
    | JQC {j1 :: JExpr, j2 :: JExpr, j3 :: JExpr}       --- a ? b : c
    where
        ---  Syntactic precedence of java constructs
        ---  Higher numbers mean more tight binding.
        prec JQC{}     = 1
        prec JBin{}    = 2
        prec JUnop{}   = 3
        prec JCast{}   = 4
        -- prec JExMemG{} = 9
        prec JExMem{}  = 9
        prec JStMem{}  = 9
        prec JInvoke{} = 9
        prec JAtom{}   = 9
        prec JNew{}    = 7
        prec JNewClass{} = 7
        prec JNewArray{} = 7
        --- print @x@ or @(x)@ depending on relative precedences
        subex :: JExpr -> JExpr -> PP.DOCUMENT
        subex e x
                  | prec e == 2 && prec x <= 2 = text "(" <> anno x <> text ")"
                  | prec x < prec e = text "(" <> anno x <> text ")"
                  | otherwise                      = anno x
        --- create a 'JAtom'
        atom   = JAtom
        --- @invoke args expr@ ---> expr.(args)
        invoke = flip JInvoke
        --- @new args type@    ---> new type(args)
        new    = flip JNew
        --- @cast type expr@   ---> (type) expr
        cast   = JCast
        --- @xmem "name" expr@  ---> expr.name
        xmem   = flip JExMem
        --- @static X.y@ ---> X.y
        static = flip JStMem []

instance Anno JExpr where
    anno (JAtom {name}) = text name
    anno (JNew jt exs) = text "new" <+> jt.anno <> annoArgList exs
    anno (JNewClass jt exs decls) = text "new"
                            <+> jt.anno
                            <>  annoArgList exs
                            <+> (PP.block "{" (PP.stack (map JDecl.anno decls)) "}")
    anno (JNewArray jt ex) = text "new"
                            <+> jt.anno
                            <>  text "[" <> anno ex <> text "]"
    anno (JInvoke (JStMem (JName "" b) []) exs) = text b <> PP.nest 4 (annoArgList exs)
    anno (JInvoke (JStMem jn gs) exs) = text a <~/> PP.nest 4 (
                            text "." <> annoGenerics gs <> text b <> annoArgList exs)
                        where
                            jns = ´\.´.splitted (show jn)
                            a = (joined "." • init) jns
                            b = last jns
    anno (e@JInvoke (JExMem jex s) exs) = e.subex jex <~/> PP.nest 4 (
                                    text "." <> text s <> annoArgList exs)
    -- anno (e@JInvoke (JExMemG jex s gs) exs) = e.subex jex <~/> PP.nest 4 (
    --                                text "." <> annoGenerics gs <> text s <> annoArgList exs)
    anno (e@JInvoke x exs) = e.subex x <> annoArgList exs
    anno (e@JCast jt x) = text "(" <> jt.anno <> text ")" <> e.subex x
    anno (JStMem (JName "" b) []) = text b
    anno (JStMem (JName a b) gs) = text a <> text "." <> annoGenerics gs <> text b
    -- anno (e@JExMemG jex s gs) = e.subex jex <> text "." <> annoGenerics gs <> text s
    anno (e@JExMem jex s)     = e.subex jex <> text "." <> text s
    anno (un@JUnop op j1) = text op <+> un.subex j1
    anno (bin@JBin j1 op j2) = bin.subex j1 <+> text op <+> bin.subex j2
    anno (jqc@JQC j1 j2 j3) = jqc.subex j1
                        <+> PP.nest 4    (text "?" <+> jqc.subex j2
                                    <+/> (text ":" <+> jqc.subex j3))

{--
 * Check if a 'JExpr' is cheap enough so that we can save a local variable
 *
 * Cheap java expressions are:
 * 1. a local variable
 * 2. literal, this, null etc.
 * 3. a cast of a cheap expression
 * 4. a static variable X.m
 * 5. access to a member of a cheap expression.
 *
 * This is transitive, so that X.y.z.a.b.c.d.e.f would be "cheap", but we will not
 * see this because member variables of frege types are all lazy, i.e., there will
 * be an _e() needed to go deeper. But _e() is of course not cheap.
 -}
cheap (JAtom _) = true
cheap (JCast _ ex) = cheap ex
cheap (JStMem _ _) = true
cheap (JExMem ex _) = cheap ex
cheap _ = false

-- {--
--     Optimize a java expression like
--     > (Lambda) x.apply(y)._e()
--     to
--     > x.app(y)
-- --}
-- postOpt (jx@JAtom{}) = jx
-- postOpt (JNew typ exs)     = JNew typ (map postOpt exs)
-- postOpt (JNewClass typ exs decls)
--                            = JNewClass typ (map postOpt exs) decls
-- postOpt (JNewArray jt jx)  = JNewArray jt (postOpt jx)
-- postOpt (JInvoke jx jxs)   = JInvoke (postOpt jx) (map postOpt jxs)
-- postOpt (jx@JStMem {})     = jx
-- postOpt (jx@JExMem {jex})  = jx.{jex <- postOpt}
-- postOpt (jx@JUnop  {jex})  = jx.{jex <- postOpt}
-- postOpt (jx@JBin {j1, j2}) = jx.{j1 <- postOpt, j2 <- postOpt}
-- postOpt (JQC j1 j2 j3)     = JQC (postOpt j1) (postOpt j2) (postOpt j3)
-- postOpt (JCast typ x)
--     | typ == jtFun,
--       JInvoke e []     <- x,
--       JExMem a "_e"    <- e,
--       JInvoke b [y]    <- a,
--       JExMem c "apply" <- b = (JX.invoke [y] • JX.xmem "app") (postOpt c)
--     | otherwise             = JCast typ (postOpt x)

--- placeholder for pipehole optimization
postOpt x = x

-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Statements ----------------------------------
-- -------------------------------------------------------------------------------------

{--
 * A java statement
 -}
data JStmt =
    JError String           --- code that makes javac fail (generated by incomplete code generation)
    | JEmpty                --- empty statement
    | JBlock [JStmt]        --- { statements }
    | JReturn JExpr         --- return expr
    | JThrow  JExpr         --- throw expr
    | JAssert JExpr         --- assert expr
    | JEx     JExpr
    | JAssign JExpr JExpr   --- a = b
    | JLocal  {decl::JDecl}
    | JCond   {keyword :: String, jex :: JExpr, stmts :: [JStmt]}   --- if/while (cond) { ... }
    | JBlockX {keyword :: String, stmts :: [JStmt]}      --- try/else/catch ... { .... }
    | JCase   {jex :: JExpr, stmt :: JStmt }


instance Anno JStmt where
    anno (JError s) = (JComment s).anno </> text "FIX: incomplete code generation;"
    anno JEmpty = text ";"
    anno (JBlock []) = text "{}"
    anno (JBlock stmts) = PP.block "{" (PP.stack (map anno stmts)) "}"
    anno (JReturn ex) = text "return" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JThrow ex)  = text "throw" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JAssert ex)  = text "assert" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JEx ex) = (postOpt ex).anno <> text ";"
    anno (JAssign x1 x2) = x1.anno <+> text "=" <+> (postOpt x2).anno <> text ";"
    anno (JLocal jdecl) = jdecl.anno
    anno (JCond k x stmts) = text k <+> bracket "(" (postOpt x).anno ")"
                        <+>  anno  (JBlock stmts)
    anno (JBlockX k stmts) = text k <+> anno (JBlock stmts)
    anno (JCase x stmt) = text "case" <+> x.anno <> text ":" <+> anno stmt 

-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Declarations --------------------------------
-- -------------------------------------------------------------------------------------

{--
    Java Attributes like *@final@*, *@static@* etc.
 -}
data JAttr = JUnchecked | JFinal | JPrivate | JPublic | JProtected | JStatic | JAbstract
derive Enum JAttr
derive Bounded JAttr

instance Anno JAttr where
    anno JUnchecked = text "@SuppressWarnings(\"unchecked\")"
    anno JFinal     = text "final"
    anno JPrivate   = text "private"
    anno JPublic    = text "public"
    anno JProtected = text "protected"
    anno JStatic    = text "static"
    anno JAbstract  = text "abstract"

type Attributes = BitSet JAttr

--- @setFlag flags f@ set flag /f/ in /flags/
setFlag :: Attributes -> JAttr -> Attributes
setFlag flags f = flags.unionE f

--- @isOn flags f@ tells if flag /f/ is set in /flags/
isOn :: Attributes -> JAttr -> Bool
isOn    = flip BitSet.member

{-- construct a set that holds the attributes -}
attrs = fold setFlag Attributes.empty

--- just @final@
attrFinal = attrs [JFinal]
attrTop   = attrs [JFinal, JPublic, JStatic]

--- annotate attributes
annoAttrs flags
    | null flags = PP.nil
    | otherwise  = PP.spread [ anno a | a <- minBound .. maxBound, isOn flags a ]

--- annotate generic part of a type
annoGenerics [] = PP.nil
annoGenerics [x] = text "<" <> anno x <> text ">"
annoGenerics xs = bracket "<" (PP.sep "," (map anno xs)) ">"

--- annotate list of classes that are implemented
annoImplements _ [] = PP.nil
annoImplements s xs = text s <+> PP.sep "," (map anno xs)

--- annotate a formal method argument
-- annoArg (0, _, jt, s) = JType.anno jt <+> text s
annoArg (n, _, jt, s) = annoAttrs n <+> JType.anno jt <+> text s

-- annotate a formal argument list
annoArgDef  []   = text "()"
annoArgDef  args = bracket "(" (PP.sep "," (map annoArg args)) ")"

--- annotate an actual argument list
annoArgList []   = text "()"
annoArgList args = bracket "(" (PP.sep "," (map anno args)) ")"

type FormalArg = (Attributes, Sigma, JType, String)
{--
    Java Declarations
 -}
data JDecl =
      !JComment String
    | !JClass {attr::Attributes, jtype :: JType,
                extend :: Maybe JType, implement :: [JType], defs :: [JDecl] }
    | !JInterface {attr::Attributes, jtype :: JType,
                implement :: [JType], defs :: [JDecl] }
--    | JTCInterface {attr::Int, jtype :: JType,
--                implement :: [JType], defs :: [JDecl] }
    | !JMethod {attr::Attributes, gargs :: [JType], jtype:: JType, name :: String,
               args::[FormalArg], body:: JStmt}
    | !JConstr {attr::Attributes, jtype::JType, args::[FormalArg], body:: JStmt}
    | !JMember {attr::Attributes, jtype::JType, name::String, init::Maybe JExpr}

--- 'JDecl's are annotatable
instance Anno JDecl where
    anno (JComment s)       = text "// " <> text s -- <> PP.line
    anno (cl@JClass {attr}) = annoAttrs attr <+> text "class"
                        <+> JType.anno (cl.jtype)
                        <+> bracket ""
                             (maybe PP.nil ((text "extends" <+>) • JType.anno) cl.extend
                             <+> annoImplements "implements" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (cl@JInterface {attr}) = annoAttrs attr <+> text "interface"
                        <+> JType.anno (cl.jtype)
                        <+> bracket "" (annoImplements "extends" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
--    anno (cl@JTCInterface {attr}) = annoAttrs attr <+> text "interface"
--                        <+> JType.anno (cl.jtype)
--                        <+> bracket "" (annoImplements "extends" cl.implement) ""
--                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (m@JMethod {attr}) = annoAttrs m.attr
                        <+> annoGenerics (m.gargs)
                        <+> m.jtype.anno
                        <+> text m.name
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JConstr {attr}) = annoAttrs m.attr
                        <+> (m.jtype).{targs = []}.anno
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JMember {attr}) = annoAttrs m.attr
                        <+> m.jtype.anno <+> text m.name
                        <+> bracket (maybe "" (const ("= ")) m.init)
                                        (maybe PP.nil (JExpr.anno • postOpt) m.init)
                                    ";"

{--
    Replace all generic type variables with "?" in the expr
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVar (TArg _)               = TArg "?"
replTVar (Ref name args)        = Ref name (map replTVar args)
replTVar Nativ { typ, targs }   = Nativ   {typ, targs = map replTVar targs}
replTVar Lazy  { yields  }      = Lazy    {yields = replTVar yields}
replTVar Func{args, yields}     = Func{args, yields = replTVar yields}
replTVar Lambda                 = Lambda
replTVar Object                 = Object
replTVar Algebraic              = Algebraic
replTVar Value                  = Value

{--
    Replace all generic type variables with "?" in the expr
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVarExpr (JNew typ exprs)          = JNew      (replTVar typ) (map replTVarExpr exprs)
replTVarExpr (JNewArray typ expr)      = JNewArray (replTVar typ) (replTVarExpr expr)
replTVarExpr (JCast typ expr)          = JCast     (replTVar typ) (replTVarExpr expr) 
replTVarExpr (JInvoke expr exprs)      = JInvoke   (replTVarExpr expr) (map replTVarExpr exprs)
replTVarExpr JStMem{jname, targs}      = JStMem{jname, targs = map replTVar targs}
replTVarExpr JExMem{jex, name}         = JExMem{jex = replTVarExpr jex, name}
-- replTVarExpr JExMemG{jex, name, targs} = JExMemG{jex = replTVarExpr jex, name,  targs = map replTVar targs}
replTVarExpr JUnop{op, jex}            = JUnop{op, jex = replTVarExpr jex}
replTVarExpr JBin {j1,op,j2}           = JBin{op, j1 = replTVarExpr j1, j2 = replTVarExpr j2}
replTVarExpr JQC  {j1, j2, j3}         = JQC {j1 = replTVarExpr j1, j2 = replTVarExpr j2, j3 = replTVarExpr j3}
replTVarExpr JNewClass{}          = error "Can't handle JNewClass in replTVarExpr"
replTVarExpr expr                 = expr

{--
    Replace all generic type variables with "?" in the statement
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVarStmt (JBlock stmts)        = JBlock    (map replTVarStmt stmts)
replTVarStmt (JReturn  jex)        = JReturn   (replTVarExpr jex)
replTVarStmt (JThrow   jex)        = JThrow    (replTVarExpr jex)
replTVarStmt (JAssert  jex)        = JAssert   (replTVarExpr jex)
replTVarStmt (JEx      jex)        = JEx       (replTVarExpr jex)
replTVarStmt (JAssign  jex1 jex2)  = JAssign   (replTVarExpr jex1) (replTVarExpr jex1)
replTVarStmt (JCond s  jex stmts)  = JCond s   (replTVarExpr jex) (map replTVarStmt stmts)
replTVarStmt (JBlockX s    stmts)  = JBlockX s (map replTVarStmt stmts)
replTVarStmt (JCase    jex  stmt)  = JCase     (replTVarExpr jex) (replTVarStmt stmt)
replTVarStmt JLocal{}              = error "Can't replTVarStmt JLocal" 
replTVarStmt stmt                  = stmt 