--- Model the compilation target, conversion between "1.8" and 'Target'
module frege.compiler.types.Targets where

import Test.QuickCheck

--- compilation target
data Target = Target {!major, !minor :: Int } where
    --- decode a target specification
    decode ∷ String → Maybe Target
    decode (m~´^(\d+)\.(\d+)$´) = do
        maj ← m.group 1
        min ← m.group 2
        return (Target maj.atoi min.atoi)
    decode _ = Nothing

instance Show Target where
    show t = "%d.%d".format t.major t.minor

derive Eq Target
derive Ord Target

--- The 'Target' corresponding to our running VM
--- This is based on the system property *java.specification.version*
thisTarget = fromMaybe bad do
        jsv ← System.getProperty "java.specification.version"
        Target.decode jsv
    where
        bad = error ("strange java.specification.version: " 
                        ++ show (System.getProperty "java.specification.version")) 

{-- For a valid target string, the result of showing a decoded
    target should be the original string. -} 
p_sts ∷ Property
p_sts = forAll (elements ["0.1", "x.y", "1.7", 
                          "-5.3f", "1.8.23", "12345.67890" ]) 
                stringit
    where
        stringit ∷ String → Bool
        stringit s = case Target.decode s of
            Just t  → s == show t
            Nothing → true

{-- If we have a Target and we show it and decode it again, we get
    the same Target back -}
p_tst ∷ Property
p_tst = property tst
    where
        tst ∷ (Int,Int) → Bool
        tst (a,b) = case (Target.decode . show) t of
                Just t' → t == t'
                Nothing → false
            where t = Target{major=abs a, minor=abs b}
