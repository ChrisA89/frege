--- Information about named items.
module frege.compiler.types.Symbols where 

import  frege.data.TreeMap(Tree, each, values)
import  frege.compiler.enums.RFlag(RState)
import  frege.compiler.types.Kinds
import  frege.compiler.types.Positions
import  frege.compiler.types.Strictness
import  frege.compiler.enums.Visibility
import  frege.compiler.enums.SymState
import  frege.compiler.types.QNames
import  frege.compiler.types.Types
import  frege.compiler.types.Definitions
import  frege.compiler.enums.TokenID

--- the symbol table
type Symtab = Tree String Symbol


{--
    The information stored in the 'Symtab' nodes.
    -}
data Symbol =
        !SymT    {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name::QName,
                 kind::Kind, typ::Sigma, env::Symtab, nativ::Maybe String,
                 product::Bool, enum::Bool, pur::Bool, newt::Bool, mutable::Bool}  --- data type
        | !SymL  {sid::Int, pos::Position, vis::Visibility, name::QName,
                 alias::QName}                                      --- alias name
        | !SymD  {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name::QName,
                 cid::Int   --- constructor number
                 typ::Sigma, flds::[ConField QName],
                 strsig :: Strictness,
                 op :: TokenID                  --- how to use as operator 
                    }                             --- data constructor
        | !SymC  {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name::QName,
                 tau::Tau, supers::[QName], insts::[(QName, QName)],
                 env::Symtab}                         --- class
        | !SymI  {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name ::QName,
                 clas::QName, typ::Sigma, env::Symtab}              --- instance
        | !SymV  {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name ::QName,
                 typ::Sigma, expr::Maybe Expr, nativ::Maybe String,
                 pur::Bool, anno::Bool, exported::Bool, state::SymState,
                 strsig :: Strictness, depth :: Int, rkind :: RState,
                 throwing :: [Tau]  --- list of exceptions thrown
                 over :: [QName ]   --- list of overloaded members, if any
                 op   :: TokenID    --- how to use as operator
                    } --- variable or function
        | !SymA  {sid::Int, pos::Position, vis::Visibility, doc::Maybe String, name ::QName,
                 kind::Kind, typ::Sigma, vars::[Tau]}                           --- type alias
    where
        hashCode sym  = (Symbol.sid sym)

--- Symbols ordered by the 'Symbol.sid' field, which is a unique number.
--- This allows us to have sets of symbols.
instance Ord Symbol where
        sym1 <=> sym2 = (Symbol.sid sym1).<=> (Symbol.sid sym2)
        sym1 == sym2  = (Symbol.sid sym1).==  (Symbol.sid sym2)
        sym1 != sym2  = (Symbol.sid sym1).!=  (Symbol.sid sym2)




instance Positioned Symbol where
    is x = ""
    getpos = Symbol.pos
    getrange sym
        | sym.{env?} = fold Position.merge sym.pos (map getrange (values sym.env))
        | SymV{expr = Just x} <- sym = sym.pos.merge x.getrange
        | otherwise = getpos sym
    -- untyped = id


