--- Unresolved names in source code form.
module frege.compiler.types.SNames where 


import  frege.compiler.types.Tokens
import  frege.compiler.enums.TokenID(CONID,VARID,LOP1,NOP16)

--- an unresolved, maybe qualified identifier
data SName = ! Simple { id :: Token } {--
                            Construct a simple name.
                             
                            syntactically forced to be 'VARID', 'CONID' or 'LOP1'..'NOP16' 
                        -}
           | ! With1  { ty :: Token, id :: Token } {--
                            Construct a qualified name.
                        -}
           | ! With2  { ns, ty :: Token, id :: Token } {--
                            Construct a fully qualified name.
                        -}


instance Show SName where
    show (Simple t)           = t.value
    show (With1 {ty, id})     = ty.value ++ "." ++ id.value
    show (With2 {ns, ty, id}) = ns.value ++ "." ++ ty.value ++ "." ++ id.value

--- > "foo" `qBy` Conid 
--- supplements a partial name with a "member"
qBy :: Token -> SName -> SName
qBy t (Simple con) {- con.tokid == CONID -} = With1 con t
qBy t (With1 ty id){- id.tokid  == CONID -} = With2 ty id t
qBy t  name = error ("Can't qualify " ++ t.value ++ " by " ++ show name)

--- > withNS "PreludeBase" (Simple "foo") 
--- qualifies a given name with the given name space 
withNS :: String -> SName -> SName
withNS s (Simple t) = With1 t.{tokid=CONID, value=s} t
withNS s (With1 c t) = With2 c.{tokid=CONID, value=s} c t
withNS s name = error ("Can't set namespace " ++ s ++ " for " ++ show name)


