--- The content of a source file in parsed form.
module frege.compiler.types.Definitions where 

import  frege.compiler.enums.TokenID(TokenID)
import  frege.compiler.types.Positions
import  frege.compiler.types.Tokens
import  frege.compiler.enums.Visibility
import  frege.compiler.enums.Literals
import  frege.compiler.types.SNames
import  frege.compiler.types.ImportDetails
import  frege.compiler.types.QNames
import  frege.compiler.types.Types
import  frege.compiler.types.Patterns
import  frege.compiler.types.ConstructorField

--- create 'App' with default type 'Nothing'
nApp a b = App a b Nothing

infixl 16 `App` `nApp`  `TApp`  
infixr 16 `TFun`


{--
 * definitions
 -}
data DefinitionT =
      ImpDcl    {pos::Position, pack::String, as::Maybe String,
                    imports::ImportList}
    | FixDcl    {pos::Position, opid::TokenID, ops::[String]}
    | DocDcl    {pos::Position, text::String}
    | TypDcl    {pos::Position, vis::Visibility, name::String,
                    vars::[TauS], typ::SigmaS, doc::Maybe String}
    | ClaDcl    {pos::Position, vis::Visibility, name::String,
                    clvar::TauS, supers::[SName],
                    defs::[DefinitionT], doc::Maybe String}
    | InsDcl    {pos::Position, vis::Visibility,
                    clas::SName, typ::SigmaS,
                    defs::[DefinitionT], doc::Maybe String}
    | DrvDcl    {pos::Position, vis::Visibility,
                    clas::SName, typ::SigmaS,
                    doc::Maybe String}
    | AnnDcl    {pos::Position, vis::Visibility, name::String, typ::SigmaS, doc::Maybe String}
    | NatDcl    {pos::Position, vis::Visibility, name::String, txs::[SigExs],
                    meth::String, isPure::Bool, doc::Maybe String}
    | FunDcl    {poss::[Position]            --- because of multiple clauses
                    vis::Visibility, name::String,
                    pats::[PatternS], expr::ExprS,
                    doc::Maybe String}
    | DatDcl    {pos::Position, vis::Visibility, name::String,
                    vars::[TauS], ctrs::[DCon], defs::[DefinitionT],
                    doc::Maybe String}
    | JavDcl    {pos::Position, vis::Visibility, name::String, isPure::Bool, isMutable::Bool,
                    jclas::String, vars::[TauS], defs::[DefinitionT],
                    doc::Maybe String}


type DefinitionS = DefinitionT


type Definition  = DefinitionT


{--
    Alternatives (constructors) in a data declaration.
    
    Note: every field has its own strictness information, the overall strictness 
    of the data constructor is derived from that.
 -}
data DCon = DCon {pos::Position, vis::Visibility, name::String,
                  flds::[ConField SName], doc::Maybe String}


type DConS = DCon


{--
    expressions
 -}
data ExprT q =
      Vbl      { pos::Position, name::q, typ::Maybe (SigmaT q) }
    | Con      { pos::Position, name::q, typ::Maybe (SigmaT q) }
    | ConFS    { pos::Position, name::q, fields::[(String, ExprT q)],  typ::Maybe (SigmaT q) }
    | !App     { fun::ExprT q, arg::ExprT q,  typ::Maybe (SigmaT q)}
    | !Lit     { pos::Position, kind::Literalkind, value::String,  typ::Maybe (SigmaT q)}
    | !Let     { env::[QName], defs::[Definition], ex::ExprT q, typ::Maybe (SigmaT q)}
    | !Lam     { pat:: PatternT q,   ex::ExprT q, typ::Maybe (SigmaT q)}
    | !Ifte    { cnd::ExprT q, thn::ExprT q, els::ExprT q, typ::Maybe (SigmaT q)}
    | !Mem     { ex::ExprT q, member::Token, typ::Maybe (SigmaT q)}
    | !Case    { ckind::CKind, ex::ExprT q, alts::[CAltT q], typ::Maybe (SigmaT q)}
    | !Ann     { ex::ExprT q,  typ::Maybe (SigmaT q)}


type Expr  = ExprT QName


type ExprS = ExprT SName


{--
    case alternative 
 -}
data CAltT q = CAlt {!pat::PatternT q, !ex::ExprT q}


type CAltS = CAltT SName


type CAlt  = CAltT QName


{--
 * case kind
 -}
data CKind =
      CNormal       --- normal case
    | CWhen         --- case that falls through
    | CNoWarn       --- compiler generated, do not emit warnings


derive Eq CKind


derive Enum CKind


instance Positioned (ExprT a) where
    is x = "expression"
    --- get the line number of an expression
    getpos (App a b _)    = (getpos a).merge (getpos b)
    getpos (Mem {ex})     = getpos ex
    getpos (Lam p x _)    = p.getpos.merge x.getpos
    getpos (Case _ e alts _) = (getpos e).merge (Position.merges (map Positioned.getrange alts))
    getpos (Let e _ x _)  = getpos x
    getpos (Ifte c a b _) = Position.merges (map getpos [c, a, b])
    getpos (Ann e s)      = (getpos e).merge (maybe Position.null Sigma.getpos s)
    getpos e | e.{pos?}   = e.pos
             | otherwise  = Prelude.error ("can't determine expr pos " ++ show (constructor e))
    getrange x = getpos x


instance Positioned (CAltT a) where
    is _ = "case alternative"
    getpos   c = c.pat.getpos.merge   c.ex.getpos
    getrange c = c.pat.getrange.merge c.ex.getrange


--##################### pattern support functions ######################################

--##################### expr support functions #########################################

--- convert an application to flat form:
--- > ((f::a->b->c) (g::a) (h::b) :: c) = [(f, a->b->c), (g, b->c), (h,c)]
flatx app = flat app []
    where
        flat (App a b t) xs = flat a ((b,t):xs)
        flat e           xs = (e,e.typ):xs


