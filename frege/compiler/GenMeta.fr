// enable UTF-8 ««««««««««««««•••••••••••••»»»»»»»»»»»»¦¦¦¦¦¦¦¦
/**
 * Generate interface data for frege packages.
 *
 * The interface data are custom java annotations on the class that is generated from
 * a package. The format is definded in @frege\/MD.java@.

 * The information will be used by the compiler, the documentation tool
 * and the quickcheck tool.
 */
/*
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 *
 */

package frege.compiler.GenMeta where

/// This is $Revision$
public version = v "$Revision$" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0


import frege.List (joinStr Tree Nil insertkv keys each values)
import frege.IO   (File)

import frege.compiler.Data
import frege.compiler.Utilities(print println)     as U
import frege.lib.PP



post = stio true

line = 96
blanks = (cstos • take 1000) (repeat ' ')
pp x = do sequence stio (layoutXS (best line 0 x)); println ""

layoutIO None = stio ()
layoutIO (Text s x) = do
    print s
    layoutIO x
layoutIO (Line i x) = do
    println ""
    print (substr blanks 0 (i `mod` line))
    layoutIO x

layoutXS None = []
layoutXS (Text s x) = print s : layoutXS x
layoutXS (Line i x) = println "" : print (cstos (PP.copy i ' ')) : layoutXS x

pass = do
    g <- getST
    let JName pack clas = g.thisPack.className g
    when (pack != "") do print "package "; print pack; println ";"; println ""
    // imports
    println "import frege.MD;"
    println "import frege.RT;"
    println "import frege.rt.*;"
    when (g.thisPack != pPrelude) do
        print   "import "; print (pPrelude.className g).show; println ";"
    println ""

    // pp (annoSimple "PackageDoc" (maybe (anno "") anno g.packageDoc))

    let nss = [ (n,p) | (n,p) <- each g.namespaces, p != pPrelude, p != g.thisPack ]
        imported = map (Pack.un • snd) nss
        namespcs = map (NSName.unNS • fst) nss
    // pp (annoSimple "Imports" (anno imported))
    // pp (annoSimple "Namespaces" (anno namespcs))

    let ops = [ mkOp (s,x) | (s,x) <- each g.optab, x >= LOP0 ]
    // pp (annoSimple "Operators" (anno ops))

    let asyms = [sym | sym@SymA {pos} <- values g.thisTab, sym.vis!=Private]
    symas <- mapSt annoSymA asyms
    // pp (annoArr "SymAs"  symas)

    let csyms = [sym | sym@SymC {pos} <- values g.thisTab, sym.vis!=Private]
    symcs <- mapSt annoSymC csyms
    // pp (annoArr "SymCs"  symcs)

    let isyms = [sym | sym@SymI {pos} <- values g.thisTab, sym.vis!=Private]
    symis <- mapSt annoSymI isyms
    // pp (annoArr "SymIs"  symis)

    let tsyms = [sym | sym@SymT {pos} <- values g.thisTab, sym.vis!=Private]
    symts <- mapSt annoSymT tsyms
    // pp (annoArr "SymTs"  symts)

    symvs <- envValues g.thisTab
    // pp (annoArr "SymVs" va)

    symls <- envLinks g.thisTab
    // pp (annoArr "SymLs" la)
    // only now are the tTree, rTree and sTree complete
    // no annotation that indexes a type must occur beyond this point!!
    g <- getST
    ctime <- doio $ (IO.currentTimeMillis())

    let ataus = (map fst • sortBy (comparing snd) • each) g.tTree
        arhos = (map fst • sortBy (comparing snd) • each) g.rTree
        asigs = (map fst • sortBy (comparing snd) • each) g.sTree
    pp  (annotation "FregePackage" [
                ("source", anno g.options.source),
                ("time",   anno ctime),
                ("doc", maybe PP.nil anno g.packageDoc),
                ("ops",  anno ops),
                ("imps", anno imported),
                ("nmss", anno namespcs),
                ("symas", some symas),
                ("symcs", some symcs),
                ("symis", some symis),
                ("symts", some symts),
                ("symvs", some symvs),
                ("symls", some symls),
                ("taus",  anno ataus),
                ("rhos",  anno arhos),
                ("sigmas", anno asigs)])

    // pp (annoSimple "Taus" (anno ataus))
    // pp (annoSimple "Rhos" (anno arhos))
    // pp (annoSimple "Sigmas" (anno asigs))
    println ""
    // print "public final class "
    // print clas
    // println " {"
    // println "}"

    stio ("annotations", 12
        + length imported * 2
        + length ops
        + length symas + length symis + length symcs + length symts
        + length symvs + length symls
        + length ataus + length arhos + length asigs)

/// create annotations for all SymV in an environment
envValues env = do
    let vsyms = [sym | sym@SymV {pos} <- values env, sym.vis != Private]
    symvs <- mapSt annoSymV vsyms
    stio symvs

/// create annotations for all SymL in an environment
envLinks env = do
    g <- getST
    let syms = [annoSymL sym | sym@SymL {alias} <- values env, sym.vis != Private, alias.our g]
    stio syms

/// create annotations for all SymD in an environment
envCons env = do
    let syms = [sym | sym@SymD {pos} <- values env, sym.vis != Private]
    mapSt annoSymD syms


banner v = do
    g <- getST

    pp (PP.bracket "/*" (sep ""  [
        text "Source code is in UTF-8 encoding.",
        text "The following symbols may appear, among others:",
        text "α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω",
        text "« • ¦ » ",
        text "ﬁ ﬂ ƒ",
        text "If you can't read this, you're out of luck.",
        text "This code was generated with the frege compiler version",
        text v,
        text "from",
        text g.options.source,
        text  "Do not edit this file!",
        text  "Instead, edit the source file and recompile."]) "*/")
    println ""
    println ""

annotation kind vals = text "@MD." <> text kind <> bracket "(" (sep ","  (map val fvals)) ")"
    where
        val (s, d) = text s <> text "=" <> d
        fvals = filter noNil vals
        noNil (_, PP.NONE) = false
        noNil _ = true

annoSimple kind val = text "@MD." <> text kind <> bracket "(" val ")"
annoArr    kind vs  = text "@MD." <> text kind <> bracket "({" (sep "," vs) "})"
some vs = bracket "{" (sep "," vs) "}"     // some annotations in a list

lit d = text (show d)
listFromMaybe = maybe [] (:[])
annoMbString  = maybe (lit "") String.anno

class Anno a where
    anno :: a -> DOCUMENT

instance Anno String where
    anno = PP.fill • intersperse (text "+\"\\n\"+") • map lit • #\n#.splitToList

instance Anno Int where
    anno = lit

instance Anno Long where
    anno l = text (show l ++ "l")

instance Anno Bool where
    anno = lit

instance Anno [Anno:x] where
    anno :: [Anno:x] -> DOCUMENT
    anno [] = text "{}"
    anno as = bracket "{" (sep "," (map Anno.anno as)) "}"

data AOP = AOP String Int Int
instance Anno AOP where
    anno (AOP s i j) = annotation "Operator" [("name", lit s), ("kind", lit i), ("prec", lit j)]

mkOp (s,tid)
    | tid < ROP0 = AOP s 0 (ord tid - ord LOP0)
    | tid < NOP0 = AOP s 1 (ord tid - ord ROP0)
    | otherwise  = AOP s 2 (ord tid - ord NOP0)

instance Anno QName where
    anno (TName p b) = annotation "QName" [
        ("kind", lit 0),
        ("pack", if p == pPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b)]
    anno (VName p b) = annotation "QName" [
        ("pack", if p == pPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b)]
    anno (MName (TName p b) m) = annotation "QName" [
        ("kind", lit 2),
        ("pack", if p == pPrelude then PP.nil else lit (Pack.un p)),
        ("base", lit b),
        ("member", lit m)]

instance Anno TauA where
    anno (TauA {kind=0,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 0.anno),
        ("suba", suba.anno),
        ("subb", subb.anno)]
    anno (TauA {kind=1,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 1.anno),
        ("suba", suba.anno),
        ("subb", subb.anno)]
    anno (TauA {kind=2,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("kind", 2.anno),
        ("tcon", (listFromMaybe tcon).anno)]
    anno (TauA {kind=3,tcon,suba,subb,tvar}) = annotation "Tau" [
        ("tvar", tvar.anno)]

instance Anno SigmaA where
    anno (SigmaA {bound=[],rho}) = annotation "Sigma" [
        ("rho",   rho.anno)]
    anno (SigmaA {bound,rho}) = annotation "Sigma" [
        ("bound", bound.anno),
        ("rho",   rho.anno)]

instance Anno RhoA where
    anno (RhoA {rhofun=true,cont=[],sigma,rhotau}) = annotation "Rho" [
        ("sigma",  sigma.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=true,cont,sigma,rhotau}) = annotation "Rho" [
        ("cont",   cont.anno),
        ("sigma",  sigma.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=false,cont=[],sigma,rhotau}) = annotation "Rho" [
        ("rhofun", false.anno),
        ("rhotau", rhotau.anno)]
    anno (RhoA {rhofun=false,cont,sigma,rhotau}) = annotation "Rho" [
        ("rhofun", false.anno),
        ("cont",   cont.anno),
        ("rhotau", rhotau.anno)]

instance Anno ContextA where
    anno (CtxA {clas,tau}) = annotation "Context" [
        ("clas", clas.anno),
        ("tau",  tau.anno)]

flatTau (TVar {var})  = stio (TauA {kind=3,tcon=Nothing,suba=0,subb=0,tvar=var})
flatTau (TCon {name}) = stio (TauA {kind=2,tcon=Just name,suba=0,subb=0,tvar=""})
flatTau (TApp a b) = do
    suba <- tauIndex a
    subb <- tauIndex b
    stio (TauA {kind=0,tcon=Nothing,suba,subb,tvar=""})
flatTau (TFun a b) = do
    suba <- tauIndex a
    subb <- tauIndex b
    stio (TauA {kind=1,tcon=Nothing,suba,subb,tvar=""})

tauIndex tau = do
    taua <- flatTau tau
    taIndex taua

taIndex ta = do
    g <- getST
    case g.tTree.lookup ta of
        Just i -> stio i
        Nothing -> do
            changeST Global.{gen <- GenSt.{tunique <- (1+)} • GenSt.{tTree <- insertkv ta g.tunique}}
            stio g.tunique

flatSigma (ForAll bnd rho) = do
    rho <- rhoIndex rho
    stio (SigmaA {bound=bnd,rho})

sigIndex :: Sigma -> StG Int
sigIndex sig = do
    siga <- flatSigma sig
    saIndex siga

saIndex :: SigmaA -> StG Int
saIndex sa = do
    g <- getST
    case g.sTree.lookup sa of
        Just i -> stio i
        Nothing -> do
            changeST Global.{gen <- GenSt.{sunique <- (1+)} • GenSt.{sTree <- insertkv sa g.sunique}}
            stio g.sunique

flatCtx (Ctx {pos, cname, tau}) = do
    g <- getST
    // U.logmsg TRACE9 pos (tau.nice g)
    tau <- tauIndex tau
    stio (CtxA {clas=cname,tau})

flatRho (RhoFun ctx sig rho) = do
    cont <- mapSt flatCtx ctx
    sigma <- sigIndex sig
    rhotau <- rhoIndex rho
    stio (RhoA {rhofun=true,cont,sigma,rhotau})
flatRho (RhoTau ctx tau) = do
    cont <- mapSt flatCtx ctx
    rhotau <- tauIndex tau
    stio (RhoA {rhofun=false,cont,sigma=0,rhotau})

rhoIndex rho = do
    rhoa <- flatRho rho
    raIndex rhoa

raIndex ra = do
    g <- getST
    case g.rTree.lookup ra of
        Just i -> stio i
        Nothing -> do
            changeST Global.{gen <- GenSt.{runique <- (1+)} • GenSt.{rTree <- insertkv ra g.runique}}
            stio g.runique

annoSymA syma = do
    vars <- mapSt tauIndex (Symbol.vars syma)
    typ  <- sigIndex (Symbol.typ syma)
    let a = annotation "SymA" [
                ("name", anno (Symbol.name syma)),
                ("vars", anno vars),
                ("typ",  anno typ),
                ("doc", maybe PP.nil anno (Symbol.doc syma))
            ]
    stio a

annoSymV symv = do
    g <- getST
    case U.isPSigma (Symbol.typ symv) of
        true -> U.fatal symv.pos (symv.nice g ++ " has no type.")
        false -> do
            sig <- sigIndex (Symbol.typ symv)
            let a = annotation "SymV" [
                    ("name", anno symv.name),
                    ("stri", lit symv.strsig.show),
                    ("sig",  anno sig),
                    ("nativ", maybe PP.nil anno symv.nativ),
                    ("pur", if symv.pur then anno true else PP.nil),
                    ("abst", if symv.vis==Abstract then anno true else PP.nil),
                    ("depth", anno symv.depth),
                    ("rkind", anno symv.rkind),
                    ("doc", maybe PP.nil anno symv.doc)]
            stio a

annoSymL sym = annotation "SymL" [
                    ("name",  anno (Symbol.name  sym)),
                    ("alias", anno (Symbol.alias sym)),
                    ("doc", maybe PP.nil anno (Symbol.doc sym))]

annoSymD sym = do
    g <- getST
    typ <- sigIndex (Symbol.typ sym)
    let fnms = [ maybe "" id f | (f,_) <- sym.flds ]
    ftys <- mapSt (sigIndex • snd) sym.flds
    let a = annotation "SymD" [
                    ("name",  anno (Symbol.name  sym)),
                    ("stri",  lit sym.strsig.show),
                    ("cid",   anno (Symbol.cid   sym)),
                    ("typ",   anno typ),
                    ("fnms",  if null fnms `or` all (""==) fnms then PP.nil else anno fnms),
                    ("ftys",  if null ftys then PP.nil else anno ftys),
                    ("doc", maybe PP.nil anno (Symbol.doc sym))]
    stio a

annoSymC sym = do
    tau <- tauIndex (Symbol.tau sym)
    meml <- envLinks  (Symbol.env sym)
    memv <- envValues (Symbol.env sym)
    let a = annotation "SymC" [
                    ("name",  anno (Symbol.name  sym)),
                    ("tau",   anno tau),
                    ("vkind", if sym.vkind == 0  then PP.nil else anno sym.vkind),
                    ("sups",  if null sym.supers then PP.nil else anno sym.supers),
                    ("ins1",  if null sym.insts  then PP.nil else anno (map fst sym.insts)),
                    ("ins2",  if null sym.insts  then PP.nil else anno (map snd sym.insts)),
                    ("lnks",  some meml),
                    ("funs",  some memv),
                    ("doc", maybe PP.nil anno (Symbol.doc sym))]
    stio a

annoSymI sym = do
    typ <- sigIndex (Symbol.typ sym)
    meml <- envLinks  (Symbol.env sym)
    memv <- envValues (Symbol.env sym)
    let a = annotation "SymI" [
                    ("name",  anno (Symbol.name  sym)),
                    ("clas",  anno (Symbol.clas  sym)),
                    ("typ",   anno typ),
                    ("lnks",  some meml),
                    ("funs",  some memv),
                    ("doc", maybe PP.nil anno (Symbol.doc sym))]
    stio a

annoSymT sym = do
    typ <- sigIndex (Symbol.typ sym)
    memc <- envCons   (Symbol.env sym)
    meml <- envLinks  (Symbol.env sym)
    memv <- envValues (Symbol.env sym)
    let a = annotation "SymT" [
                    ("name",  anno (Symbol.name  sym)),
                    ("typ",   anno typ),
                    ("cons",  some memc),
                    ("lnks",  some meml),
                    ("funs",  some memv),
                    ("prod",  if sym.product then anno true else PP.nil),
                    ("isEnum",  if sym.enum then anno true else PP.nil),
                    ("pur",  if sym.pur then anno true else PP.nil),
                    ("newt",  if sym.newt then anno true else PP.nil),
                    ("nativ", maybe PP.nil anno (Symbol.nativ sym)),
                    ("doc", maybe PP.nil anno (Symbol.doc sym))]
    stio a
