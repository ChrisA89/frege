{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * This is the main program of the frege compiler.
 *
 Compilation of a frege source program is a sequence of transformations.
 Here is a coarse overview.

 1. a sequence of characters is transformed to a sequence of tokens
   (lexical analysis in "frege.compiler.Scanner")
 2. a sequence of tokens is transformed to a sequence of definitions
   (parser in "frege.compiler.Grammar")
 3. documentaion comments are joined with associated definitions,
    multiple equations of a function are consolidated in a single function definition.
 4. import definitions are transformed to namespaces
 5. the definitions (except instance and derive definitions)
    are transformed into a symbol table. Each globally visible
    name defined in the progam
    gets a symbol table entry. This pass makes only provisional entries.
 6. Type definitions are checked so that expansion may not lead to infinite regress.
 7. Derive definitions are transformed to instance definitions with appropriate
    subdefinitions (i.e. functions implementing the derived class' behaviour) and are
    entered in the symbol table along with instance definitions.
 8. All names in the program are resolved to their appropriate symbol table entries.
    This step detects undefined (e.g. misspelled) names.
    This completes the construction of the symbol table.
 9. Classes and class methods are verified.
 10. Instance definitions are verified.
 11. Let definitions are unrolled so that each let binds only variables that depend on each
    other. If no cyclic dependencies are involved, only a single variable is bound in a
    single let. By the way, some nonrecursive pattern bindings are transformed to case
    expressions.
 12. Lambda expressions that do not reference local variables are transformed to
     global function definitions. This avoids generating inner java classes later.
 13. The program is type checked. Every function, variable and (sub)expression gets a
     type assigned.
 14. Code is simplified so that code can be generated. Some properties of function
     and variable bindings are computed.
 15. The strcitness analyser finds for each local binding whether it is guaranteed to
     be evaluated. The overall result is reflected in so called strictness signatures
     for functions that tell whether the arguments can be computed before the call.
 16. The data collected in the symbol table is compiled to a set of java annotations and
     written to the intermediate java file.
 17. The code is generated and written to the java file
 20. The java compiler is invoked.
 *
 * Milestones
 * [3.6.020] syntax check for all sources ok
 *
 * [3.8.020] UTF-8 encoding is standard
 *
 * [3.8.022] 'Data.StIO' used everywhere
 *
 * [3.11.021] transdef Prelude
 *
 * [3.12.022] class checking done
 *
 * [3.6.000] change to SVN (new revision numbering)
 *
 * [3.14.21] pass 7 (unrollLet) done (again revision numbering adapted)
 * [3.14.34] typecheck is almost working
 * [3.15.33] example from putting.ps works, can annotate just f or local variable
 * [3.17.85] parsed and typechecked whole compiler
 * [3.17.104] about to go open source
 -}

package frege.compiler.Main where

--- a function to print 'Float's
pure native formatLocale java.lang.String.format :: Maybe JLocale -> String -> Float -> String
data JLocale = pure native java.util.Locale
public format s f = formatLocale Nothing s f

import frege.Version
import Java.IO()
import Data.TreeMap (Tree)
import Data.Bits

import Lib.PP (text, msgdoc)
import frege.compiler.GUtil

import Compiler.enums.Flags
import Compiler.enums.TokenID(TokenID)

import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Packs
import  Compiler.types.External(KindA, defEA)
import  Compiler.types.Global as G

import  Compiler.common.Errors as E()

import frege.compiler.Classtools  as CT(FregePackage)
import frege.compiler.Utilities   as U()
import frege.compiler.Scanner     as Lex()
import frege.compiler.Grammar     as Parse()
import frege.compiler.Fixdefs     as P1()
import frege.compiler.Import      as P2()
import frege.compiler.Enter       as P3()
import frege.compiler.TAlias      as P4()
import frege.compiler.Transdef    as P5()
import frege.compiler.Classes     as P6()
import frege.compiler.Transform   as P7()
import frege.compiler.Typecheck   as TC()
import frege.compiler.GenMeta     as GM()
import frege.compiler.GenJava7    as G7()



--- the standard options with filename
public stdOptions = Options {
      source = "-",             -- read from standard input
      sourcePath = ["."],
      flags = fold setFlag Flags.empty [WARNINGS, WITHCP, RUNJAVAC],     -- obviously
      dir = ".",                -- work in current directory
      path = [],                -- same as java classpath
      prefix = "",              -- no prefix
      encoding = Just "UTF-8",  -- use UTF8 by default
      tRanges = []
    }

private ideOptions = stdOptions.{flags = 
            Flags.fromList [WARNINGS, HINTS, IDEMODE, IDETOKENS]}

--- utility function to create 'Options' data structure
--- [sp] sourcepath, as string array.
--- [flags] flags, encoded in a 'Long'
--- [target] target directory path
--- [classpath] classpath as string array
--- [prefix] the prefix
createopts :: JArray String -> Flags -> String -> JArray String -> String -> Options
createopts sp flags dir path prefix = stdOptions.{
                                sourcePath = toList sp,
                                flags, dir,
                                path = toList path,
                                prefix}
--- utility function to run the compiler, callable from Java
runfregec :: JArray String -> Options -> PrintWriter -> IO Bool
runfregec !compilees !opts !pw = do
        global <- standardOptions
        let fs = toList compilees
            g0 = global.{options = opts}.{sub <- SubSt.{stderr=pw}}
        (_, g) <- files fs g0
        return (g.errors == 0)

--- utility function to run the compiler, combines 'createopts' and 'runfregec'
runcompiler compilees sp flags dir path prefix pw = runfregec compilees opts pw
    where opts = createopts sp flags dir path prefix

-- stdoutPrinter = stdPrinter System.out
-- stdPrinter out = do
--         out <- out
--         osw <- OutputStreamWriter.new out "UTF-8"
--         PrintWriter.new osw true
--     `catch` exception
--   where
--     exception :: IO.IOException -> IOMut PrintWriter
--     exception exc = do
--         System.err << "Can't make printer: " << exc.getMessage << "\n"
--         throwIO exc
        
        

--- here it starts all
main args = do
    rc <- mainIO args
    when (rc > 0)
        do System.exit rc


--- the main function of the compiler
mainIO ["-help"] = do
    mapM_ stderr.println [
            "usage:",
            "    java frege.compiler.Main [flags] [items ....]",
            "    java frege.compiler.Main -help           print this message",
            "    java frege.compiler.Main -version        print version information",
            "",
            "    JVM properties:",
            "        \"-Dfrege.javac=javac -J-Xmx512m\"   java compiler and options, default internal",
            "        \"-Dfrege.prelude=other.Prelude\"    package name of Prelude, default frege.Prelude",
        ]
    usage
    IO.return 0

mainIO ["-version"] = println version >> return 0


mainIO args = do
    now   <- System.currentTimeMillis()
    mbopt <- scanOpts stdOptions args
    case mbopt of
        Nothing -> return 1
        Just (opt, fs) -> do
            when (isOn opt.flags VERBOSE) (printopts opt)
            global <- standardOptions
            loader <- U.theClassLoader opt 
            (_, g) <- files fs global.{options = opt, sub <- SubSt.{loader}}
            return (if g.errors > 0 then 1 else 0)

--- run compiler for a 'String' until certain pass
--- returns the compiler state after indicated pass, or the pass that finished with errors.
mainDebug args prog until = do
        mbopt <- scanOpts stdOptions args
        let options = maybe stdOptions fst mbopt
            pässe  = (lexPassIDE prog, "lexical analysis") : tail passes
        global <- standardOptions
        loader <- U.theClassLoader options
        runUntil global.{options, sub <- SubSt.{loader}} pässe
    where
        runUntil g (p:ps) = do 
            (_, !g') <- (runpass p).run g
            case p of
                (_, name) | name.startsWith until = return g'
                             | g'.errors > 0         = return g'
                             | otherwise             = runUntil g' ps
        runUntil g [] = return g
        
eclipseOptions = do
    g <- standardOptions
    return g.{options = ideOptions}

--- an initial Gen data structure
initialGen = Gen {
                printer = IO.stdout,
                tunique = 0,
                runique = 0,
                sunique = 0,
                xunique = 1,
                kunique = 1,
                tTree = Tree.empty,
                rTree = Tree.empty,
                sTree = Tree.empty,
                xTree = Tree.empty .insert defEA 0,        -- so that 0 never indexes valid expression
                kTree = Tree.empty .insert (KindA {kind=0, suba=0, subb=0}) 0, -- kind0 = *
                consts = Tree.empty,
                lambdas = Tree.empty,
                syminfo = Tree.empty,
                jimport = Tree.empty,
            }
        
protected standardOptions = do
    cache    <- Ref.new Tree.empty      -- start out with empty cache
    loader   <- U.theClassLoader stdOptions

    return Global {
            options = stdOptions,
            sub = Sub {
                cache, loader,
                optab = Tree.empty,
                toks = arrayFromList [],
                idKind = Tree.empty,
                definitions = [],
                sourcedefs  = [],
                packageDoc = Nothing,
                thisPos  = Position.null,
                nsPos = Tree.empty,
                packWhy = Tree.empty,
                nsUsed = Tree.empty,
                thisPack = Pack.new "",
                numErrors  = 0, resErrors = 0,
                messages = [],
                cancelled = return false,
                nextPass = 1,
                stderr = IO.stderr,
                toExport = [],
                funPointers = empty,
            },
            gen = initialGen,
            unique = 1,
            packages = Tree.empty,
            namespaces = Tree.empty,
            genEnv = [],
            javaEnv = Tree.empty,
            locals = Tree.empty,
            typEnv = [],
            tySubst = Tree.empty,
        }

-- native getOpArr frege.compiler.JavaUtils.getOperators
--             :: IO.URLClassLoader -> String -> IO (Exception (Maybe CT.OpArr))

classNotFound :: Throwable -> IO (Throwable | Maybe CT.FregePackage)
classNotFound = return . Left

{--
    This will be called from Scanner for each import 
-}
getOperators :: String -> StG (Throwable | (Maybe CT.OpArr))
getOperators packstr = do
    global <- getST
    case global of
        g | isOff g.options.flags MAKE = do
                c <- doio g.cache.get
                case c.lookup  packstr of
                    Just fp -> return (Right (Just fp.ops))
                    Nothing -> do
                        efp <- doio do
                            CT.getFrege g.sub.loader packstr >>= return . Right
                                `catch`  classNotFound
                        case efp of
                            Right (Just fp) -> do
                                g <- getST
                                c <- doio g.cache.get
                                doio (g.cache.put (c.insert packstr fp))
                                return (Right (Just fp.ops))
                            Right Nothing -> return (Right Nothing)
                            Left x        -> return (Left x)
          | otherwise                    = do
                made <- doio (make g packstr)
                case made of
                    Left x -> return (Left x)
                    Right (_, Nothing) ->    return (Right Nothing)
                    Right (_, Just fp) ->    return (Right (Just fp.ops))


circularity :: Undefined -> IO (Throwable | (Bool, Maybe FregePackage))
circularity = return . Left 
 
   
make :: Global -> String -> IO (Throwable | (Bool, Maybe FregePackage))
make g packstr = do
        return $! StG.run (E.logmsg TRACEM Position.null (text ("make " ++ packstr))) g
        cache <- g.cache.get
        case cache.lookup packstr of
            Just fp -> IO.return (Right (false, Just fp))
            Nothing -> do
                        g.cache.put (cache.insert packstr (
                            error ("forbidden cyclic import involving package  " ++ packstr)))
                        fp <- CT.getFrege g.sub.loader packstr >>= return . Right
                            `catch` classNotFound
                        either missing currentP fp
    `catch` circularity 
    where
        filename1 = ((#\.#.matcher packstr).replaceAll "/") ++ ".fr"
        filename  = ((regforce ("^" ++ g.options.prefix) :: Regex).matcher filename1).replaceFirst ""
        findFile [] f = IO.return Nothing
        findFile (d:ds) f = do
            let fname = d ++ "/" ++ f
            file     <- File.new fname
            exists   <- file.exists
            regular  <- file.isFile
            readable <- file.canRead
            if exists && regular && readable
                then IO.return (Just file)
                else findFile ds f
        missing exc = do
            return $! StG.run (E.logmsg TRACEM Position.null (text (packstr ++ " " ++ show exc))) g
            fn <- findFile g.sourcePath filename
            maybe (cantFind Nothing filename) makeNow fn
        currentP :: Maybe FregePackage -> IO (Throwable | (Bool, Maybe FregePackage))
        currentP Nothing = IO.return (Left ((Undefined.new "no frege class")))
        currentP (Just fp) = do
            let time = FregePackage.time fp
            return $! StG.run (E.logmsg TRACEM Position.null (text (packstr
                        ++ " time:" ++ show time))) g
            fn <- findFile g.sourcePath filename
            maybe (cantFind (Just fp) filename) (makeIfModified fp time) fn
        cantFind :: Maybe FregePackage -> String -> IO (Throwable | (Bool, Maybe FregePackage))
        cantFind Nothing fstr = IO.return (Left ((
            Undefined.new ("can't make " ++ packstr
                ++ ", source file " ++ fstr ++ " missing"))))
        cantFind (Just fp) fstr = do
            return $! StG.run (E.logmsg TRACEM Position.null (text (fstr ++ " not found, can't remake"))) g
            cache <- g.cache.get
            g.cache.put (cache.insert packstr fp)
            IO.return (Right (false, Just fp))
        makeNow :: MutableIO File -> IO (Throwable | (Bool, Maybe FregePackage))         
        makeNow fn = do
            path <- fn.getPath
            return (StG.run (E.logmsg TRACEM Position.null (text path)) g)
            (_,gr) <- files [path] g.{sub <- SubSt.{numErrors = 0, resErrors=0}}    -- with fresh env
            if (gr.errors < 1) 
                then do
                    fp  <- CT.getFrege g.sub.loader packstr >>= return . Right
                            `catch` classNotFound
                    case fp of
                        Left x ->  IO.return (Left x)
                        Right (Just y) -> do
                            cache <- g.cache.get
                            g.cache.put (cache.insert packstr y)
                            IO.return (Right (true, Just y))
                        Right Nothing ->
                            IO.return (Right (true, Nothing))
                else 
                    IO.return (Left (Undefined.new "compilation failed"))
        -- getFrege (Left x) pack = IO.return (Left x)
        -- getFrege (Right cl) pack = CT.getFrege cl pack
        makeIfModified (fp::FregePackage) time (fn::MutableIO File) = do
            mod  <- fn.lastModified
            path <- fn.getPath
            return $! StG.run (E.logmsg TRACEM Position.null (text ("modified " ++ path ++ " " ++ show mod))) g
            if mod > time then makeNow fn
                else do
                    let imp1 = [ g.unpack (Pack.new s) |  s <- fp.imps ]
                        imps | packstr == g.unpack pPreludeBase = []
                             | otherwise = g.unpack pPreludeBase:imp1
                    return $! StG.run (E.logmsg TRACEM Position.null (text ("dependencies " ++ (show imps)))) g
                    deps <-  makeDeps time Nothing imps
                    case deps of
                        Left x -> IO.return (Left x)
                        Right Nothing -> do
                            return $! StG.run (E.logmsg TRACEM Position.null (text "up to date, no need to make it")) g
                            cache <- g.cache.get
                            g.cache.put (cache.insert packstr fp)
                            IO.return (Right (false, Just fp))
                        Right (Just sub) -> do
                            return $! StG.run (E.logmsg TRACEM Position.null (text ("out of date with respect to " ++ sub))) g
                            makeNow fn
        makeDeps :: Long -> Maybe String -> [String] -> IO (Throwable | (Maybe String))                            
        makeDeps time b [] = IO.return (Right b)
        makeDeps time b (sp:sps) = do
            made <- make g.{options <- Options.{source=packstr}} sp
            case made of
                Left x -> IO.return (Left x)
                Right (true, _) -> makeDeps time (Just sp) sps
                Right (_, Nothing) -> IO.return (Left ((Undefined.new "something is wrong")))
                Right (_, Just subfp) -> if subfp.time > time
                    then makeDeps time (Just sp) sps
                    else makeDeps time b         sps


{--
    run the compiler for each file
 -}
files :: [String] -> Global -> IO ((), Global)
files [] g = IO.return ((), g)
files (src:srcs) g = do
        let isMake = isOn g.options.flags MAKE
        if isMake then do
            srcFile <- File.new src
            regular <- srcFile.isFile
            if regular then doFile (src:srcs)
                else do
                    res <- make g (g.unpack (Pack.new src))
                    case res of
                        Left x -> do
                            g.stderr.println ("Couldn't make " ++ src ++ ": " ++ show x)
                            IO.return ((), g.{sub <- SubSt.{numErrors <- (1+)}})
                        Right (false, _) -> do
                            g.stderr.println(src ++ " is up to date")
                            files srcs g
                        Right (true, _) -> files srcs g
          else doFile (src:srcs)
    where
        doFile (src:srcs) = do
            (x, !gnew) <- StIO.run run g.{options <- Options.{source=src}}
            if gnew.errors > 0
                then  IO.return (x, gnew)
                else  files srcs g -- reuse original
        doFile _ = Prelude.error "doFile: no file"

{--
 * 'run' all passes, one after another
 * until one of them returns an error
 -}
run :: StIO ()
run = do
    -- p <- doio $ stdoutPrinter
    changeSTT Global.{gen <- GenSt.{printer=IO.stdout}}    -- just to have no undefined value there
    forM_ passes runpass

runpass :: (StIO (String, Int), String) -> StIO  ()
runpass (pass,description) = do
    state <- getSTT
    when (state.errors == 0) do
        now   <- liftIO $ System.currentTimeMillis()
        (itemnm, items) <- pass
        state <- getSTT
        later <- liftIO $ System.currentTimeMillis()
        when (isOff state.options.flags IDEMODE) do
            liftIO (forM_ (reverse state.sub.messages) (state.stderr.println . Message.text))
            changeSTT _.{sub <- _.{messages = []}}
        when (state.errors > 0) (liftIO $ state.printer.close)
        when (length description > 0 && isOn state.options.flags VERBOSE) do
            liftIO $ do  
                state.stderr.printf
                    "%-40.40s  took %7.3fs, %d %s (%d %s/s)"
                    description
                    ((later-now+1).float / 1e3f)
                    items
                    itemnm
                    ((Int.long (max 1 items)*1000L) `quot` max 1L (later-now))
                    itemnm
                state.stderr.println

{--
    Description of the compiler passes.

    This list is also used by the IDE to determine the compiler passes to run.

    *Note*: It is important that the typecheck pass has a description that starts with "type check".
    This way the IDE recognizes the last pass if it is not a build.
-}
passes = [
    -- function       description        
    (lexPass,                   "lexical analysis"),
    (liftStG parsePass,         "syntax  analysis"),
    (liftStG P1.pass,           "collecting definitions"),
    (P2.pass,                   "symbol table initialization and import"),
    (liftStG $ P6.passI true,   "verify imported instances"),
    (liftStG P3.pass,           "enter definitions"),
    (liftStG P4.pass,           "check type aliases"),
    (liftStG P3.pass2,          "make field definitions"),
    (liftStG P3.pass3,          "enter (derived) instances"),
    (P5.pass,                   "translate names in exprs and types"),
    (liftStG P6.passC,          "verify class definitions"),        -- TRACE6
    (liftStG $ P6.passI false,  "verify own instances"),            -- TRACE6
    (liftStG P7.pass7,          "simplify lets"),                   -- TRACE7
    (TC.pass,                   "type check"),                      -- TRACET, TRACEO
    (liftStG P7.pass9,          "simplify expressions"),            -- TRACE9
    (liftStG P7.pass8,          "globalize anonymous lambdas"),     -- TRACE8
    (liftStG P7.pass10,         "strictness analysis"),             -- TRACES
    (openPrinter,     "open file"),
    (GM.pass,         "generate meta data"),   -- none
    (G7.pass,         "generate java code"),   -- TRACEG
    (javac,           "run java compiler"),
    ]

postTrue = stio true
postParse :: StG Bool
postParse = do
        state <- getST
        stio ((not • null) state.definitions)




noClassLoader :: Throwable -> IO ()
noClassLoader x = do
        IO.stderr.println ("Can't make class loader due to " ++ x.catched ++ ": "
               ++ x.getMessage)
        return ()

openPrinter = do
    g <- getSTT
    case g.options.source of
        "-" -> do
            GM.banner version
            return ("standard output", 1)
        _   -> do
            openFilePrinter ".java"
            GM.banner version
            return ("file", 1)

---  make filename from package name  @x.y.z.Packet@ =>  @dest/x/y/z/Packet.java@
targetPath :: Global -> String -> String
targetPath g suffix = 
                g.options.dir ++ "/"
                    ++ (#\.#.matcher (g.unpack g.thisPack)).replaceAll("/")
                    ++ suffix

openFilePrinter suffix = do
    g <- getSTT
    let target = targetPath g suffix
    pw <- liftIO do
        file <- File.new target
        parentFile <- file.getParentFile
        case parentFile of
            Just dir ->  dir.mkdirs    -- make sure all directories are there
            Nothing -> return false
        PrintWriter.new file "UTF-8"
    changeSTT Global.{gen <- GenSt.{printer=pw}}
    

--- utility function to run a command.
--- takes a command line and produces an exit code
native runJavac frege.runtime.Javac.runJavac :: MutableIO (JArray String) -> IO Int

--- run the java compiler
javac :: StIO (String, Int)
javac = do
    g <- getSTT
    liftIO g.printer.close        -- flush output before compiling
    let target = targetPath g ".java"
    let command = maybe ["javac"] ´\s+´.splitted  (System.getProperty "frege.javac")
        arguments = ["-cp", joined U.pathSep (U.ourPath g.options),
                    "-d",  g.options.dir,
                    "-sourcepath", joined U.pathSep g.options.sourcePath,
                    "-encoding", "UTF-8",
                    target]
    when (isOn g.options.flags RUNJAVAC) do
        rc <- liftIO (JArray.fromList (command ++ arguments) >>= runJavac)
        when (rc != 0) do
            liftStG $ E.error (packageEnd g) 
                        (msgdoc "java compiler errors are most likely caused by erronous native definitions")
    -- from now on, we are printing to stdout again
    -- printer <- doio stdoutPrinter
    changeSTT Global.{gen <- GenSt.{printer=IO.stdout}}
    return ("source file", 1)

lexPass = do
    changeSTT Global.{sub <- SubSt.{toks = arrayFromList []}
                          • SubSt.{definitions = []}
                          • SubSt.{packageDoc  = Nothing}
                          • SubSt.{thisPack    = Pack.new ""}}
    changeSTT Global.{locals = Tree.empty, typEnv = []}
    tokens <- Lex.pass getOperators
    return ("tokens", length tokens)

lexPassIDE !content = do
    -- changeST Global.{options <- Options.{flags=ideOptions.flags}}
    g <- getSTT
    let !thisP = g.thisPack
    -- exld <- doio $ U.theClassLoader g.options
    changeSTT Global.{sub <- SubSt.{toks = arrayFromList [], idKind = Tree.empty}
                          • SubSt.{definitions = []}
                          • SubSt.{packageDoc  = Nothing}
                          • SubSt.{thisPack    = Pack.new ""}
                          • SubSt.{nsPos       = Tree.empty}
                          • SubSt.{nextPass    = 1}
                          • SubSt.{numErrors   = 0}
                          • SubSt.{resErrors   = 0}
                          • SubSt.{messages    = []}
                          • SubSt.{toExport    = []}
                          • SubSt.{funPointers <- TreeMap.deletek thisP}
                          }
    -- so <- liftIO standardOptions
    changeSTT Global.{gen = initialGen}                          
    changeSTT Global.{locals = empty, typEnv = [], genEnv = [],
                    tySubst = Tree.empty, 
                    javaEnv <- fmap (removeour thisP), 
                    packages <- TreeMap.deletek thisP, 
                    namespaces = Tree.empty}
    tokens <- liftStG $ Lex.passCS content getOperators
    return ("tokens", length tokens)
  where
    removeour !pack (cs,ls) = (cs, filter (not . (pack==) . _.getpack) ls)

{--
    set an extra option
-}
withOption flag = changeST Global.{options <- Options.{flags <- flagSet flag}}


parsePass = do
        g       <- getST
        result <- Parse.pass (filter Token.noComment g.sub.toks.toList)
        case result of
            Just (Program.Module (packname, defs, doc)) -> do
                changeST Global.{sub <-  SubSt.{thisPack = Pack.new packname}}
                changeST Global.{sub <- (SubSt.{definitions = defs}
                                         • SubSt.{packageDoc = doc})}
                when (isOn g.options.flags IDETOKENS) do
                    changeST Global.{sub <- SubSt.{toks <- arrayFromList . ideClean . toList}}
                stio ("tokens",  g.sub.toks.length)
            nothing -> stio ("tokens", g.sub.toks.length)
    where
        -- prepare token list for IDE: no inserted semicolons and braces, operator qualifiers
        ideClean :: [Token] -> [Token]
        ideClean (t:ts)                 -- restore original qualification
            | t.tokid > LOP0 && t.tokid < SOMEOP = case t.qual of
                [q1]    -> q1 : t : ideClean ts
                [q1,q2] -> q1 : q2 : t : ideClean ts
                _       -> t : ideClean ts
        ideClean (t:ts)
            | t.tokid == COMMENT, t.value=="}" = ideClean ts
            | t.col == 0 = ideClean ts      -- inserted semicolon or brace
            | otherwise  = t : ideClean ts
        ideClean [] = []

--- print options
printopts opts = do
    let stderr = IO.stderr
    stderr.println "You have selected the following options:"
    stderr.println ("Source file:          " ++ Options.source opts)
    stderr.println ("Frege path:           " ++ show (U.ourPath opts))
    stderr.println ("Destination directory " ++ opts.dir)
    unless (Nothing == opts.encoding) 
        (stderr.println ("Source file encoding: " ++ unJust opts.encoding))
    stderr.println ("Flags:                " ++ show opts.flags)
    return ()

--- print usage information common to many tools
usage = mapM_ stderr.println [
            "    flags:",
            "       -d directory    target directory for *.java and *.class files",
            "       -fp classpath   where to find imported frege packages",
            "       -enc charset    charset for source code files, standard is UTF-8",
            "       -enc DEFAULT    platform default charset for source code files",
            "       -nocp           exclude java classpath from -fp",
            "       -hints          print more detailed error messages and warnings",
            "       -inline         inline functions where possible",
            "       -comments       generate commented code",
            "       -strict         enable strict(er) semantics (eperimental)",
            "       -explain i[-j]  print some debugging output from type checker",
            "                       regarding line(s) i (to j). May help to understand",
            "                       inexplicable type errors better.",
            "       -nowarn         don't print warnings (not recommended)",
            "       -v              verbose mode on",
            "       -make           build outdated or missing imports",
            "       -sp srcpath     look for source files in srcpath, default is .",
            "       -j              do not run the java compiler",
            "       -prefix stage   prefix for package names, used in compiler development",
            "       -xN             debugging output from pass N, where N elem [1..9]",
            "       -xt             debugging output from type checker",
            "       -xo             debugging output from optimizer",
            "       -xs             debugging output from strictness analysis",
            "       -xg             debugging output from code generation",
            "       -xr i[-j]       confine tracing to range of line numbers or just a line",
            "                       multiple ranges can be specified",
            "",
            "A classpath is a list of jar files, zip-Files or directories separated by "
            ++ U.pathSep,
            "A srcpath is a list of directories separated by "
            ++ U.pathSep,
            "To get parser debugging output, set YYDEBUG environment variable to 1",
        ]

--- used to look up flag values
flagtree = Tree.fromList [
    ("-nocp",   (BitSet.`differenceE` WITHCP)),
    ("-j",      (BitSet.`differenceE` RUNJAVAC)),
    ("-nowarn", (BitSet.`differenceE` WARNINGS)),
    ("-lazy",   (BitSet.`differenceE` STRICT)),
    ("-hints",  (BitSet.`unionE` HINTS)),
    ("-make",   (BitSet.`unionE` MAKE)),
    ("-inline",     (BitSet.`unionE` INLINE)),
    ("-O",          (BitSet.union (BitSet.fromList [OPTIMIZE, INLINE]))),
    ("-strict",     (BitSet.`unionE` STRICT)),
    ("-comments",   (BitSet.`unionE` COMMENTS)),
    ("-propertc",   (BitSet.`unionE` PROPERTC)),
    ("-v",          (BitSet.`unionE` VERBOSE)),
    ("-x1",         (BitSet.`unionE` TRACE1)),
    ("-x2",         (BitSet.`unionE` TRACE2)),
    ("-x3",         (BitSet.`unionE` TRACE3)),           -- symbol table operations
    ("-x4",         (BitSet.`unionE` TRACE4)),
    ("-x5",         (BitSet.`unionE` TRACE5)),
    ("-x6",         (BitSet.`unionE` TRACE6)),
    ("-x7",         (BitSet.`unionE` TRACE7)),
    ("-x8",         (BitSet.`unionE` TRACE8)),
    ("-x9",         (BitSet.`unionE` TRACE9)),
    ("-xt",         (BitSet.`unionE` TRACET)),           -- type checker
    ("-xx",         (BitSet.`unionE` TRACEX)),           -- env operations, lots of output
    ("-xm",         (BitSet.`unionE` TRACEM)),           -- make operations
    ("-xk",         (BitSet.`unionE` TRACEK)),           -- kind inference
    ("-xo",         (BitSet.`unionE` TRACEO)),           -- optimizer
    ("-xs",         (BitSet.`unionE` TRACES)),           -- strictness
    ("-xg",         (BitSet.`unionE` TRACEG)),           -- code generator
    ("-xz",         (BitSet.`unionE` TRACEZ)),           -- on demand, for mysterious things
    ]

--- scan command line with some sanity checks, return indication of success
scanOpts :: Options -> [String] -> IO (Maybe (Options, [String]))
scanOpts opts [] = IO.return (Just (opts, []))
scanOpts opts ("-d":xs)  | null xs || head xs ~ ´^-´ = do
    IO.stderr.println "option -d must be followed by a directory name."
    IO.return Nothing
scanOpts opts ("-d":dir:args) = do
    f     <- File.new dir
    isdir <- f.isDirectory
    if isdir then do
            canRead <- f.canRead
            if canRead then do
                    canWrite <- f.canWrite
                    if canWrite then scanOpts opts.{dir} args
                        else do
                            IO.stderr.println ("directory " ++ dir ++ " is not writable.")
                            IO.return Nothing
                else do
                    IO.stderr.println ("directory " ++ dir ++ " is not readable.")
                    IO.return Nothing
        else do
            IO.stderr.println (dir ++ " is not a directory.")
            IO.return Nothing
scanOpts opts ("-sp":xs) | null xs || head xs ~ ´^-´ = do
    IO.stderr.println "option -sp must be followed by source path."
    IO.return Nothing
scanOpts opts ("-sp":path:args) = do
    let ps = U.pathRE.splitted path
    let pschecked = map peCheck ps
        peCheck pe = do
            f      <- File.new pe
            exists <- f.exists
            readable <- f.canRead
            isdir  <- f.isDirectory
            if exists
              then if readable
                then if isdir
                  then IO.return true
                  else do
                        IO.stderr.println (pe ++ " should be a directory")
                        IO.return false
                else do
                    IO.stderr.println (pe ++ " is not readable")
                    IO.return false
              else do
                IO.stderr.println (pe ++ " does not exist")
                IO.return false
    bits <- sequence pschecked
    rest <- scanOpts opts.{sourcePath = ps} args
    if fold (&&) true bits then IO.return rest else IO.return Nothing
scanOpts opts ("-fp":xs) | null xs || head xs ~ ´^-´ = do
    IO.stderr.println "option -fp must be followed by classpath"
    IO.return Nothing
scanOpts opts ("-fp":path:args) = do
    let ps = U.pathRE.splitted path
    let pschecked = map peCheck ps
        peCheck pe = do
            let isjar = String.toUpperCase pe ~ ´\.(ZIP|JAR)$´
            f      <- File.new pe
            exists <- f.exists
            readable <- f.canRead
            isdir  <- f.isDirectory
            if exists
              then if readable
                then if isdir
                  then IO.return true
                  else if isjar then IO.return true
                    else do
                        IO.stderr.println (pe ++ " should be a jar or zip archive or a directory")
                        IO.return false
                else do
                    IO.stderr.println (pe ++ " is not readable")
                    IO.return false
              else do
                IO.stderr.println (pe ++ " does not exist")
                IO.return false
    bits <- sequence pschecked
    rest <- scanOpts opts.{path = ps} args
    if fold (&&) true bits then IO.return rest else IO.return Nothing
scanOpts opts (´^-enc(oding)?$´:xs) | null xs || head xs ~ ´^-´ = do
    IO.stderr.println "option -enc must be followed by code name"
    IO.return Nothing
scanOpts opts (´^-enc(oding)?$´:enc:args) = scanOpts opts.{encoding = mbEncoding} args
    where mbEncoding = if enc == "DEFAULT" then Nothing else Just enc
scanOpts opts ("-prefix":xs) | null xs || head xs ~ ´^-´ = do
    IO.stderr.println "option -prefix must be followed by prefix string"
    IO.return Nothing
scanOpts opts ("-prefix":pre:args) = scanOpts opts.{prefix = pre} args
scanOpts opts ("-xr":xs) | null xs || head xs !~ ´^\d+(\D\d+)?$´ = do
    IO.stderr.println "option -xr must be followed by number range"
    IO.return Nothing
scanOpts opts ("-xr" : m~´^(\d+)(\D(\d+))?$´ : args) =
    if a <= b then scanOpts opts.{tRanges <- ((a,b):)} args
    else do IO.stderr.println ("Did you mean \"-xr " ++ show  b ++ "-" ++ show a
                    ++ "\"? This way, line specific tracing will be off")
            scanOpts opts.{tRanges <- ((a,b):)} args    -- do what he said, not what he meant
    where (a,b) = case m.group 1 of
            Just s1 -> case m.group 3 of
                Just s2 ->  (s1.atoi, s2.atoi)
                Nothing ->  (s1.atoi, s1.atoi)
            Nothing -> (0, Int.maxBound)                 -- just to make warning go away
scanOpts opts ("-explain":xs) | null xs || head xs !~ ´^\d+(\D\d+)?$´ = do
    IO.stderr.println "option -explain must be followed by number range\n"
    IO.return Nothing
scanOpts opts ("-explain" : m~´^(\d+)(\D(\d+))?$´ : args) =
    if a <= b then scanOpts opts.{tRanges <- ((a,b):), flags = setFlag opts.flags EXPLAIN} args
    else do IO.stderr.println ("Did you mean \"-explain " ++ show b ++ "-" ++ show a
                    ++ "\"? This way, explaining will be off.")
            scanOpts opts.{tRanges <- ((a,b):)} args    -- do what he said, not what he meant
    where (a,b) = case m.group 1 of
            Just s1 -> case m.group 3 of
                Just s2 ->  (s1.atoi, s2.atoi)
                Nothing ->  (s1.atoi, s1.atoi)
            Nothing -> (0, Int.maxBound)                 -- just to make warning go away
scanOpts opts ("-version":args)  = mainIO ["-version"] >> scanOpts opts args
scanOpts opts ("-help":args)     = mainIO ["-help"]    >> scanOpts opts args            
scanOpts opts ((flag@´^-´):args) = case flagtree.lookup flag of
    Just f -> scanOpts opts.{flags <- f} args
    Nothing -> do
        IO.stderr.println ("invalid flag " ++ flag ++ ", use -help for command line syntax.")
        scanOpts opts args
        IO.return Nothing
scanOpts opts filenames | head filenames !~ ´^-´ = IO.return (Just (opts, filenames))
scanOpts opts (wrong:args)  = do
        IO.stderr.println ("invalid argument `" ++ wrong ++ "`,  use -help for command syntax.")
        scanOpts opts args
        IO.return Nothing
