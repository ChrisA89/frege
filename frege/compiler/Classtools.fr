/**
 * 'IO' actions and native types concerning class loading and annotation
 *
 * All java interface types used for annotations are declared here
 * under the name of the compiler type they are tranformed to during import.
 * For example 'QName' is the frege representation of the
 * java annotation interface "frege.MD.QName" and
 * import will build a "frege.compiler.Data.QName" from it.
 *
 * In addition, as long as we do not have a sound array type handling,
 * there is an /Item/Arr for most /Item/s that supports indexed access and 'length'.
 *
 * There is only one top level annotation 'FregePackage'.
 * It is loaded with the 'getFrege' function
 * which is implemented in "frege.compiler.JavaUtils".
 *
 * While writing this boring code, I was really keen to first implement an "import native class"
 * language feature. But it had to be done in the version 2 first, and the code was decidedly
 * fixed.
 */
/*
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 */
package frege.compiler.Classtools where

public version = v "$Revision$" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0


import frege.List ()
import frege.IO (URL URLArr URLClassLoader File)

/**
 * make a URL class loader from a list of strings
 */
mkClassLoader pathelems  = URLClassLoader.new (URLArr.fromList urls) where
    urls = map toURL pathelems
    toURL str = File.toURL frozen where frozen = ST.run (File.new str >>= our)


type ExMb a = Exception (Maybe a)

/*
 * all information is contained in FregePackage
 */
data FregePackage = pure native frege.MD.FregePackage where
    pure native source      :: FregePackage -> String
    pure native time        :: FregePackage -> Long
    pure native doc         :: FregePackage -> String
    pure native ops         :: FregePackage -> OpArr
    pure native imps        :: FregePackage -> StringArr
    pure native nmss        :: FregePackage -> StringArr
    pure native symas       :: FregePackage -> SymAArr
    pure native symcs       :: FregePackage -> SymCArr
    pure native symis       :: FregePackage -> SymIArr
    pure native symts       :: FregePackage -> SymTArr
    pure native symvs       :: FregePackage -> SymVArr
    pure native symls       :: FregePackage -> SymLArr
    pure native taus        :: FregePackage -> TauArr
    pure native rhos        :: FregePackage -> RhoArr
    pure native sigmas      :: FregePackage -> SigmaArr
    pure native exprs       :: FregePackage -> ExprArr

native getFrege frege.compiler.JavaUtils.getFrege
                            :: URLClassLoader -> String -> IO (ExMb FregePackage)


data Operator = pure native frege.MD.Operator where
    pure native name :: Operator -> String
    pure native kind :: Operator -> Int
    pure native prec :: Operator -> Int

data OpArr = pure native "frege.MD.Operator[]"  where  // Operator
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Operator>arrayGet" :: OpArr -> Int -> Operator
    pure native length "frege.rt.Boxed.<MD.Operator>arrayLen" :: OpArr -> Int


/**
 * get an array of operator annotations for a class
 */
native getOperators frege.compiler.JavaUtils.getOperators :: URLClassLoader -> String -> IO (ExMb OpArr)

/// 'QName's are no top level items, hence there is no 'Loader' function for them
data QName = pure native frege.MD.QName where
    pure native kind   :: QName -> Int     // constructor TName, VName or MName
    pure native pack   :: QName -> String  // package name
    pure native base   :: QName -> String  // base name
    pure native member :: QName -> String  // member name, only valid when kind=2

data QNameArr = pure native "frege.MD.QName[]"  where  // Operator
    pure native frozenGetAt  "frege.rt.Boxed.<MD.QName>arrayGet" :: QNameArr -> Int -> QName
    pure native length "frege.rt.Boxed.<MD.QName>arrayLen" :: QNameArr -> Int

/**
 * An expression in annotational representation.
 */
data Expr = pure native frege.MD.Expr where
    pure native xkind  :: Expr -> Int        // Ann, App, Case, Con, Ifte, Lam, Lit, local/global Var
    pure native name   :: Expr -> QNameArr   // global Vbl, Con
    pure native lkind  :: Expr -> Int        // Ann : sigma index, Lit: ord literlakind, Case: ord ckind
    pure native varval :: Expr -> String     // Lit : value, local Vbl: name
    pure native alts   :: Expr -> IntArr     // Case, Lambda: pattern and expression indexes
    pure native subx1  :: Expr -> Int        // Ann, App, Ifte, Case: first subexpression
    pure native subx2  :: Expr -> Int        // App, Ifte: second subexpression
    pure native subx3  :: Expr -> Int        // Ifte: third subexpression

data ExprArr = pure native "frege.MD.Expr[]"  where  // Operator
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Expr>arrayGet" :: ExprArr -> Int -> Expr
    pure native length "frege.rt.Boxed.<MD.Expr>arrayLen" :: ExprArr -> Int    

/**
 * A Tau type in annotational represantation.
 * There is no recursion, 'Int' indices point to some table where subtypes are stored.
 * See also "frege/MD.java"
 */
data Tau = pure native frege.MD.Tau where
    pure native kind :: Tau -> Int       //  constructor TApp, TFun, TCon, TVar
    pure native tcon :: Tau -> QNameArr  //  0 or 1 QNames
    pure native suba :: Tau -> Int       //  index of sub type a for TAPP or TFun
    pure native subb :: Tau -> Int       //  index of sub type b for TAPP or TFun
    pure native tvar :: Tau -> String    //  variable name for TVar

data TauArr = pure native "frege.MD.Tau[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Tau>arrayGet" :: TauArr -> Int -> Tau
    pure native length "frege.rt.Boxed.<MD.Tau>arrayLen" :: TauArr -> Int


data Context = pure native frege.MD.Context where
    pure native clas    :: Context -> QName     // class name
    pure native tau     :: Context -> Int       // tau index

data ContextArr = pure native "frege.MD.Context[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Context>arrayGet" :: ContextArr -> Int -> Context
    pure native length "frege.rt.Boxed.<MD.Context>arrayLen" :: ContextArr -> Int

data Rho = pure native frege.MD.Rho where
    pure native rhofun :: Rho -> Bool       // tells if this is a RhoFun or a RhoTau
    pure native cont   :: Rho -> ContextArr // the context
    pure native sigma  :: Rho -> Int        // sigma index
    pure native rhotau :: Rho -> Int        // if rhofun then rho index else tau index

data RhoArr = pure native "frege.MD.Rho[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Rho>arrayGet" :: RhoArr -> Int -> Rho
    pure native length "frege.rt.Boxed.<MD.Rho>arrayLen" :: RhoArr -> Int


data Sigma = pure native frege.MD.Sigma where
    pure native bound   :: Sigma -> StringArr   // bound variables
    pure native rho     :: Sigma -> Int         // rho index

data SigmaArr = pure native "frege.MD.Sigma[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.Sigma>arrayGet" :: SigmaArr -> Int -> Sigma
    pure native length "frege.rt.Boxed.<MD.Sigma>arrayLen" :: SigmaArr -> Int


data SymA = pure native frege.MD.SymA where
    pure native name    :: SymA -> QName        // symbol name
    pure native doc     :: SymA -> String       // symbol documentation
    pure native typ     :: SymA -> Int          // sigma index
    pure native vars    :: SymA -> IntArr       // array of tau indexes

data SymAArr = pure native "frege.MD.SymA[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymA>arrayGet" :: SymAArr -> Int -> SymA
    pure native length "frege.rt.Boxed.<MD.SymA>arrayLen" :: SymAArr -> Int


data SymL = pure native frege.MD.SymL where
    pure native name    :: SymL -> QName        // symbol name
    pure native doc     :: SymL -> String       // symbol documentation
    pure native alias   :: SymL -> QName        // symbol name of linked item

data SymLArr = pure native "frege.MD.SymL[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymL>arrayGet" :: SymLArr -> Int -> SymL
    pure native length "frege.rt.Boxed.<MD.SymL>arrayLen" :: SymLArr -> Int



data SymV = pure native frege.MD.SymV where
    pure native name    :: SymV -> QName        // symbol name
    pure native doc     :: SymV -> String       // symbol documentation
    pure native sig     :: SymV -> Int          // sigma index
    pure native nativ   :: SymV -> String       // native name if any
    pure native pur     :: SymV -> Bool
    pure native abst    :: SymV -> Bool
    pure native stri    :: SymV -> String       // strictness encoded
    pure native depth   :: SymV -> Int          // lambda depth
    pure native rkind   :: SymV -> Int          // how do r- and w- functions return?

data SymVArr = pure native "frege.MD.SymV[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymV>arrayGet" :: SymVArr -> Int -> SymV
    pure native length "frege.rt.Boxed.<MD.SymV>arrayLen" :: SymVArr -> Int


data SymD = pure native frege.MD.SymD where
    pure native name    :: SymD -> QName        // symbol name
    pure native doc     :: SymD -> String       // symbol documentation
    pure native cid     :: SymD -> Int          // constructor number
    pure native typ     :: SymD -> Int          // sigma index
    pure native ftys    :: SymD -> IntArr       // array of sigma indexes for field types
    pure native fnms    :: SymD -> StringArr    // array of field names, if length is 0, no field has an name
    pure native stri    :: SymD -> String       // strictness encoded
    pure native priv    :: SymD -> Bool         // if constructor is private

data SymDArr = pure native "frege.MD.SymD[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymD>arrayGet" :: SymDArr -> Int -> SymD
    pure native length "frege.rt.Boxed.<MD.SymD>arrayLen" :: SymDArr -> Int

data SymC = pure native frege.MD.SymC where
    pure native name    :: SymC -> QName        // symbol name
    pure native doc     :: SymC -> String       // symbol documentation
    pure native tau     :: SymC -> Int          // tau index
    pure native sups    :: SymC -> QNameArr     // array of super class names
    pure native ins1    :: SymC -> QNameArr     // array of instantiated type names
    pure native ins2    :: SymC -> QNameArr     // array of instance names
    pure native lnks    :: SymC -> SymLArr      // links in the sub symtab
    pure native funs    :: SymC -> SymVArr      // functions in the sub symtab
    pure native vkind   :: SymC -> Int          // kind of type variable

data SymCArr = pure native "frege.MD.SymC[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymC>arrayGet" :: SymCArr -> Int -> SymC
    pure native length "frege.rt.Boxed.<MD.SymC>arrayLen" :: SymCArr -> Int


data SymI = pure native frege.MD.SymI where
    pure native name    :: SymI -> QName        // symbol name
    pure native doc     :: SymI -> String       // symbol documentation
    pure native clas    :: SymI -> QName        // class name
    pure native typ     :: SymI -> Int          // sigma index
    pure native lnks    :: SymI -> SymLArr      // links in the sub symtab
    pure native funs    :: SymI -> SymVArr      // functions in the sub symtab

data SymIArr = pure native "frege.MD.SymI[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymI>arrayGet" :: SymIArr -> Int -> SymI
    pure native length "frege.rt.Boxed.<MD.SymI>arrayLen" :: SymIArr -> Int


data SymT = pure native frege.MD.SymT where
    pure native name    :: SymT -> QName        // symbol name
    pure native doc     :: SymT -> String       // symbol documentation
    pure native typ     :: SymT -> Int          // sigma index
    pure native cons    :: SymT -> SymDArr      // data constructors
    pure native lnks    :: SymT -> SymLArr      // links in the sub symtab
    pure native funs    :: SymT -> SymVArr      // functions in the sub symtab
    pure native nativ   :: SymT -> String       // native type if any
    // pure native ntargs  :: SymT -> IntArr       // tau indexes of generic type args
    pure native prod    :: SymT -> Bool         // if this is a product type
    pure native isEnum  :: SymT -> Bool         // if this is an enum type
    pure native pur     :: SymT -> Bool         // is it immutable nativ
    pure native newt    :: SymT -> Bool         // is it a type with 1 constructor that has 1 field

data SymTArr = pure native "frege.MD.SymT[]" where
    pure native frozenGetAt  "frege.rt.Boxed.<MD.SymT>arrayGet" :: SymTArr -> Int -> SymT
    pure native length "frege.rt.Boxed.<MD.SymT>arrayLen" :: SymTArr -> Int
