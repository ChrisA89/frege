{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}
{--
 * Translate definitions, expressions and types to internal form with internal names
 -}

package frege.compiler.Transdef where


import Data.TreeMap (insert, lookup, values, keys, Tree, insertkv, each, contains)
import Data.List  as DL(find, unique, sortBy, groupBy)

import Compiler.enums.Flags as Compilerflags(TRACE5)
import Compiler.enums.TokenID
import Compiler.enums.Visibility
import Compiler.enums.SymState

import  Compiler.types.Kinds
import  Compiler.types.Positions
import  Compiler.types.Tokens
import  Compiler.types.Strictness
import  Compiler.types.SNames
import  Compiler.types.Packs
import  Compiler.types.QNames
import  Compiler.types.Types
import  Compiler.types.Patterns
import  Compiler.types.Definitions
import  Compiler.types.Symbols
import  Compiler.types.Global as G

import  Compiler.common.Errors as E()
import  Compiler.common.Resolve as R(resolveVName, resolveXName, defaultXName)
import  Compiler.common.SymbolTable

import  Compiler.classes.Nice

import frege.compiler.Utilities     as U(transSigma, transTau,
                                            validSigma)
import frege.compiler.Fixdefs       as F()
import frege.compiler.Enter         as Enter()
import Lib.PP (text, msgdoc, fill)
import frege.compiler.Javatypes     as J()
import frege.compiler.Kinds         as K(kiTypes)

post =  stio true

foox = break

pass = do
    g <- getSTT
     
    forsome g.definitions (liftStG . transdef [] (VName g.thisPack))
    
    liftStG inlineCandidates
        
    g <- getSTT
    forM_ (keys g.javaEnv) J.findAllSupers
        
    liftStG kiTypes                         -- kind inference on types    
    
    g <- getSTT
    return ("definitions", length g.definitions)


--- translate inline candiates from exporting package clause to QNames and set exported flag in corresponding symbols
inlineCandidates = do
        g <- getST
        rslvd <- mapM (toQ g.thisPack) g.sub.toExport
        g <- getST
        when (g.errors == 0) do
            syms <- mapM U.findV rslvd
            -- for the time being, inlining higher rank functions is not supported
            foreach syms (\sym -> changeSym  sym.{exported=notHigherConstraint sym})
            let zs = zip syms g.sub.toExport
            foreach [ (s,p) | (s,p) <- zs, not (g.ourSym s) || isNothing (Symbol.expr s) ] notOurCode
        return ()
    where
        -- silently remove higher rank functions with contexts from export
        notHigherConstraint sym = notHC sym.typ.rho
            where
                notHC RhoTau{} = true
                notHC RhoFun{sigma=ForAll bound srho, rho}
                    | t <- U.freeCtxTVars [] empty srho.context,
                      any (`elem` map fst bound) (keys t) = false
                    | otherwise = notHC srho && notHC rho
        notOurCode (sym, p) = do
            g <- getST
            E.warn (Pos (SName.id p) (SName.id p)) 
                (text ("Cannot export code of " ++ nicer sym g 
                    ++ (if g.ourSym sym 
                            then " because it has none."            -- no code
                            else " because defined elsewhere.")     -- not our
                    ))
            
        toQ pack sname = resolveVName (VName pack) pos sname 
            where
                !pos = Pos sid sid
                !sid = SName.id sname

findLocal :: [QName] -> String -> QName
findLocal [] name = Local 0 name
findLocal (qn:qns) name
    | qn.base == name = qn
    | otherwise = findLocal qns name

{--
    Check if an expression is just a top level variable or a constructor
    and return the name.
    
    Used to introduce aliases for definitions like
    
    > a = b
    -}
varcon :: Expr -> Maybe QName
varcon Con{name} = Just name
varcon Vbl{name} | !name.isLocal = Just name
varcon _ = Nothing


transdef env fname (d@FunDcl {poss}) = case d.name of
    ´^(strict|lazy)\$\d+$´ | [PVar{var}] <- d.pats -> do
        let aname = if null env then fname var else findLocal env var
        common aname d.{name=var, pats=[]}    
    sonst -> do
        let aname = if null env then fname sonst else findLocal env sonst
        common aname d
  where
    pos = head poss
    classMember (MName tynm _) g = case g.findit tynm of
        Just SymC{}  = true
        Just SymI{}  = true
        other        = false
    classMember other g = false
    common aname d = do
        g <- getST
        E.logmsg TRACE5 pos (text("transdef: env=" ++ show env ++ ", aname=" ++ show aname))
        case g.findit aname of
            Just sym
                | SymV {pos} <- sym = do
                    let funex = foldr lamNil d.expr d.pats
                        lamNil p e = Lam p e Nothing
                    x <- transExpr env fname funex
                    case varcon x of
                        -- make non local, unannotated definitions like @a = b@ into aliases
                        Just name  
                            | !sym.anno, 
                              !sym.name.isLocal, 
                              !(classMember aname g),
                              -- no loops, please!
                              name != sym.name = do
                                let alias = SymL{sid=sym.sid, 
                                                pos=sym.pos, 
                                                vis=sym.vis, 
                                                name=sym.name, 
                                                alias=name}

                                changeSym alias
                        othr -> changeSym sym.{expr = Just x}
                | otherwise = E.fatal pos (text ("expected function, found " ++ sym.nice g))
            nothing -> do E.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))


{-
    AnnDcl    {pos::Line, vis::Visibility, name::String, typ::SigmaT t, doc::Maybe String}
    SymV  {pos::Line, vis::Visibility, doc::Maybe String, name ::QName,
                 typ::Sigma, expr::Maybe Expr, nativ::Maybe String,
                 pur::Bool, anno::Bool} /// variable
-}
transdef env fname (d@AnnDcl {pos}) = do
        g <- getST
        let aname = if null env then fname d.name else findLocal env d.name
        case g.findit aname of
            Nothing -> do E.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))
            Just sym
                | SymV {pos} <- sym = do
                    t <- transSigma d.typ
                    changeSym sym.{typ = t, anno=true}
                    E.logmsg TRACE5 pos (text ("function " ++ aname.nice g ++ " = " ++ t.nice g))
                | SymL{pos=dpos, name, alias} <- sym, g.our name =
                    E.error pos (msgdoc ("function " ++ name.nice g
                        ++ " has been defined as alias for " ++ alias.nicer g
                        ++ ". Place this annotation before line " ++ show dpos.line
                        ++ " to prevent this error.")) 
                | otherwise = E.fatal pos (text ("expected function, found " ++ sym.nice g))
transdef env fname (d@NatDcl {pos}) = do
        g <- getST
        let aname = fname d.name
        case g.findit aname of
            Nothing -> do E.fatal pos (text ("Cannot happen, function " ++ aname.nice g ++ " missing"))
            Just sym
                | SymV {pos} <- sym = case d.txs of 
                    [(sig, thrs)] = do
                        t <- transSigma sig
                        thrs <- mapM transTau thrs >>= mapM U.forceTau
                        changeSym sym.{typ = t, throwing = thrs}
                    overloaded = do
                        over <- mapM (uncurry overload) overloaded
                        changeSym sym.{typ = ovlsigma, over}
                | otherwise = E.fatal pos (text ("expected function, found " ++ sym.nice g))
                where
                    overload sig exs = do
                        g <- getST
                        let name = U.unusedName sym.name g
                        t <- transSigma sig
                        thrs <- mapM transTau exs >>= mapM U.forceTau
                        enter sym.{sid=0, name, typ = t, throwing = thrs, vis = Protected}
                        return name


transdef env fname (d@InsDcl {pos}) = do
        g <- getST
        let iname = TName g.thisPack (U.insName d)
        case g.findit iname of
            Just sym
                | SymI {pos} <- sym = do
                    clas <- defaultXName pos (TName pPreludeBase "Eq") d.clas
                    typ  <- U.transSigma d.typ
                    E.logmsg TRACE5 pos (text ("instance " ++ QName.nice clas g ++ " (" ++ Sigma.nice typ g ++ ")"))
                    changeSym sym.{clas,typ}
                    foreach d.defs (transdef [] (MName iname))
            nothing -> do E.fatal pos (text ("Cannot happen, instance " ++ iname.nice g ++ " missing"))

transdef env fname (d@DatDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case g.findit tname of
            Just sym | SymT {pos} <- sym = do
                foreach d.ctrs (transCon sym.typ (MName tname))
                foreach d.defs (transdef [] (MName tname))
                polymorphicFields tname
            other -> do E.fatal pos (text ("Cannot happen, data " ++ tname.nice g ++ " missing"))
    where
        polymorphicFields tname = do
            symt <- U.findT tname
            let cons = [ c | c@SymD{}  <- values symt.env ]
                fields = [ f | con <- cons,                                 -- from constructors 
                               f@Field {name = Just n} <- Symbol.flds con,  -- take named fields
                               not (null f.typ.bound)                       -- with polymorphic type
                         ]
                ufields = map (("upd$" ++) • unJust • ConField.name) fields                
                cfields = map (("chg$" ++) • unJust • ConField.name) fields                         
                umethods = [ m | m@SymV{} <- values symt.env,   -- methods that update a poly field
                                m.name.base `elem` ufields ]                          
                cmethods = [ m | m@SymV{} <- values symt.env,   -- methods that update a poly field
                                m.name.base `elem` cfields ]
            foreach umethods (updPolyAnn symt fields) 
            foreach cmethods (chgPolyAnn symt fields)                                                                                          
            return ()
        updPolyAnn :: Symbol -> [ConField QName] -> Symbol -> StG ()
        updPolyAnn dtyp flds meth = do
            g <- getST
            E.logmsg TRACE5 (Symbol.pos meth) (text ("polymorphic update " ++ nice meth g))
            case find ((meth.name.base ==)•("upd$"++)•unJust•ConField.name) flds of
                Just cf -> do
                    let mtyp = ForAll (dtyp.typ.bound ++ additional) rho1 where
                                rho1 = RhoFun [] dtyp.typ.{bound=[]} rho2
                                rho2 = RhoFun [] cft ret
                        -- freeInT = U.freeTVars dtyp.typ.rho
                        freeInF = U.freeTVars (map fst cf.typ.bound) cf.typ.rho
                        binders = [ b | b <- U.allBinders, b `notElem` cf.typ.vars,
                                                           b `notElem` dtyp.typ.vars ]
                        repl = Tree.fromList (zipWith ren freeInF binders)
                        additional = map (\tau -> (tau.var,tau.kind)) (values repl)
                        ren tau r = (tau.var, tau.{var=r})
                        ret = U.substRho repl dtyp.typ.rho
                        cft = cf.typ.{rho <- U.substRho repl} 
                    changeSym meth.{typ = mtyp, anno = true}
                    E.logmsg TRACE5 meth.pos (text (nice meth g ++ " :: " ++ nicer mtyp g))
                    return ()
                Nothing -> E.fatal dtyp.pos (text (nice meth.name g ++ ": field not found."))
        -- determine type of chg$f method when field f is polymorphic
        --   data Poly = P { listop :: forall e. Ctx e => [e] -> [e], name :: String } 
        --   chg$listop (P a b) = P (f a) b
        -- because field listop is polymorphic, f is higher ranked:
        --   chg$listop :: Poly -> (forall a.Ctx a => (forall e.Ctx e => [e] -> [e]) -> [a] -> [a]) -> Poly  
        chgPolyAnn :: Symbol -> [ConField QName] -> Symbol -> StG ()
        chgPolyAnn dtyp flds meth = do
            g <- getST
            E.logmsg TRACE5 (Symbol.pos meth) (text ("polymorphic change " ++ nice meth g))
            case find ((meth.name.base ==)•("chg$"++)•unJust•ConField.name) flds of
                Just cf -> do
                    -- we have:
                    -- field (forall f.b -> f -> X)
                    -- forall a b . T a b 
                    -- we want:
                    -- forall a b c . T a b -> (forall g. (forall f.b -> f -> X) -> c -> g -> X) -> T a c
                    --        -----                                                                        outerbound
                    --                -------------------------------------------------------------------  rho1
                    --                ------                                                               rho2
                    --                          ---------------------------------------------------------  rho3
                    --                          ------------------------------------------------           sigma3
                    --                                     ---------------------                           cf.typ
                    --                                                                              -----  ret
                    --                                                             -------------           rho4    
                    let
                        result =  ForAll outerbound                                     -- a b c
                            RhoFun{
                                context=[], 
                                sigma=ForAll [] dtyp.typ.rho,                           -- T a b
                                rho=RhoFun{
                                    context=[], 
                                    sigma = ForAll (map tvarbound tvars)                -- forall g
                                        RhoFun{
                                            context=rho4.context, 
                                            sigma=cf.typ,                               -- forall f.b -> f -> X
                                            rho=rho4.{context=[]}},                     -- c -> g -> X 
                                    rho = ret}}                                         -- T a c
                        binders1 = [ TVar{pos = meth.pos, kind = KVar, var = b} 
                                            | b <- U.allBinders, b `notElem` cf.typ.vars,
                                              b `notElem` dtyp.typ.vars ]
                        tvarbound tau = (tau.var, tau.kind)
                        freeInF = map Tau.var (U.freeTVars cf.typ.vars cf.typ.rho)      -- b
                        replInF = take (length freeInF) binders1                        -- c
                        additional = map tvarbound replInF
                        outerbound = dtyp.typ.bound ++ additional                       -- a b c
                        binders2 = drop (length freeInF) binders1
                        tvars = take (length cf.typ.bound) binders2                     -- g
                        treefg  = Tree.fromList (zip cf.typ.vars tvars)                 -- f -> g
                        treebc  = Tree.fromList (zip freeInF replInF)                   -- b -> c
                        rho4b    = U.substRho treefg cf.typ.rho                         -- b -> g -> X
                        rho4     = U.substRho treebc rho4b                              -- c -> g -> X
                        ret      = U.substRho treebc dtyp.typ.rho                       -- T a c
                     
                    changeSym meth.{typ = result, anno = true}
                    E.logmsg TRACE5 meth.pos (text (nice meth g ++ " :: " ++ nicer result g))
                    return ()
                Nothing -> E.fatal dtyp.pos (text (nice meth.name g ++ ": field not found."))
                
        transCon (ForAll bndrs rho) mname (d@DCon {pos}) = do
            g <- getST
            let cname = mname d.name
            case g.findit cname of
                Just (con@SymD {pos}) = do
                    let transSigma1 s = do      -- field types can be sigmas
                            ForAll bound frho <- U.validSigma1 (map fst bndrs) s
                            frho <- U.transRho (map fst bound ++ map fst bndrs) frho
                            stio (ForAll bound frho)
                    sigmas <- mapSt (transSigma1 • ConField.typ) d.flds
                    let nfs = zipWith ConField.{typ=}  con.flds sigmas
                        typ = ForAll bndrs (foldr (RhoFun []) rho sigmas)
                    E.logmsg TRACE5 con.pos (text (con.nice g ++ " :: " ++ typ.nice g))
                    sig <- validSigma typ
                    -- when (con.strsig.isStrict) (foreach nfs (strictFieldsCheck cname))
                    changeSym con.{typ=sig}.{flds=nfs}
                _ -> E.fatal pos (text ("constructor `" ++ cname.nice g ++ "` vanished."))
        

transdef env fname (d@JavDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case g.findit tname of
            Just sym 
                | SymT {nativ = Just nativ} <- sym = do
                    let purity = d.isPure || (nativ `elem` pureTypes)
                    -- let hasphantoms = any (`elem` [KVar, KType]) sym.typ.kinds
                    -- when (not purity && not hasphantoms) do
                    --     E.error pos (msgdoc ("mutable native type " ++ sym.name.nice g ++ " needs a state phantom type"))
                    --     U.hint  pos (msgdoc ("declaration should read:  data "
                    --         ++ sym.typ.nice g ++ " state = native " ++ unJust (sym.nativ)))
                    changeSym sym.{pur = purity, mutable = d.isMutable}
                    foreach d.defs (transdef [] (MName tname))
                    U.nativeType nativ tname
                    when (nativ ~ ´\[\]$´) do
                        E.warn pos (text (nativ ++ ": this way of declaring array types is strongly discouraged."))
                | otherwise = E.fatal pos (text ("Cannot happen, native type " ++ tname.nice g ++ " is not native?"))
            nothing -> do E.fatal pos (text ("Cannot happen, data " ++ tname.nice g ++ " missing"))


transdef env fname (d@TypDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case g.findit tname of
            Just sym | SymA {pos} <- sym = case d.typ.bound of
                [] -> do
                    -- type aliases may be incomplete
                    typS <- U.validSigma1 (map Tau.var d.vars) d.typ
                    typ  <- transSigma (ForAll [] typS.rho)
                    changeSym sym.{typ = typ.{bound=[]}}
                bound -> do
                    -- type X a b c = forall x y. ......
                    -- The bound variables x y must be distinct from the type args a b c
                    let bvars = map fst bound
                        targs = map Tau.var d.vars
                        tbnds = map (flip (,) KVar) targs
                        bad   = DL.intersect bvars targs
                    if null bad then do
                        typ1 <- transSigma d.typ.{bound <- (++ tbnds)}
                        changeSym sym.{typ = typ1.{bound}} 
                        return ()
                    else E.error pos (msgdoc ("Type variable(s)  " 
                                ++ joined "," bad
                                ++ "  must either be type args or bound in forall, but not both."))
            nothing -> E.fatal pos (text ("Cannot happen, type alias " ++ tname.nice g ++ " missing"))

transdef env fname (ImpDcl {pos}) = stio () -- Nothing
transdef env fname (FixDcl {pos}) = stio () -- Nothing
transdef env fname (d@ClaDcl {pos}) = do
        g <- getST
        let tname = TName g.thisPack d.name
        case g.findit tname of
            Nothing -> do E.fatal pos (text ("Cannot happen, class "
                                    ++ tname.nice g ++ " missing."))
                          -- stio Nothing
            Just sym
                | SymC {pos} <- sym = do transclass d sym -- ; stio (Just d)
                | otherwise = do
                    E.fatal pos (text ("expected class, found " ++ sym.nice g))

transdef env fname d = do
        E.fatal d.pos (text ("can't transdef definition with constructor "
            ++ show (constructor d)))
        -- stio Nothing

--- Type for overloaded functions
ovlsigma :: Sigma
ovlsigma = ForAll{  bound=[("ω", KType)], 
                    rho = RhoTau [] TVar{pos=Position.null, kind=KType, var="ω"}}

--- java types where we know for sure that they are pure
pureTypes = primitiveTypes ++ ["java.lang.String", "java.math.BigInteger", "java.util.regex.Pattern",
            "java.lang.Boolean", "java.lang.Byte", "java.lang.Character", "java.lang.Short",
            "java.lang.Integer", "java.lang.Long", "java.lang.Float", "java.lang.Double"]

--- translate pattern to normal form and check for uniqueness of names
--- every pattern must get assigned new unique numbers - they come with uid=0 from the parser
transPatUnique  :: (String -> QName) -> PatternS -> StG Pattern
transPatUnique fname pat = do
        pat <- transPat fname pat
        let !vars = sortBy  (comparing Pattern.var) (U.patVars pat)
            !grps = groupBy (using Pattern.var) vars
        foreach grps check
        return pat    
  where
    check ::  [Pattern] -> StG ()
    check [_] = return ()   -- unique
    check xs 
        | (var:_) <- reverse xs, Pattern.var var != "_" = do
            g <- getST
            E.error (Pattern.pos var) (msgdoc ("Variable `" 
                                ++ nicer var g 
                                ++ "` must not occur more than once in pattern."))
        | otherwise = return ()       
    transPat fname pat = do
        g <- getST
        E.logmsg TRACE5 (getpos pat) (text ("transPat: " ++ nice pat g ))
        case pat of
            PVar {pos,uid,var}
                | var ~ ´\.´ = do
                    E.error pos (msgdoc "Qualified variables must not occur in patterns.")
                    stio (PVar {pos, uid, var="_"})
                | otherwise  = do
                    u <- uniqid 
                    let sym = U.patLocal pos u var 
                    enter sym
                    when (var != "_") do
                        changeST Global.{sub <- SubSt.{
                            idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                    stio (PVar {pos,uid=u,var})
            PCon {pos,qname,pats} -> do
                                qname <- resolveVName fname pos qname
                                pats <- mapSt (transPat fname) pats
                                checkCon pos qname pats
                                stio (PCon {pos,qname,pats})
            PUser (PVar {pos,uid,var}) lazy -> do
                                u <- uniqid
                                let sym = (U.patLocal pos u var).{state=StrictChecked, 
                                                                  strsig=if lazy then U else S[]} 
                                enter sym
                                changeST Global.{sub <- SubSt.{
    			                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                stio (PUser (PVar {pos,uid=u,var}) lazy)
            PUser p lazy    -> do pat <- transPat fname p; return PUser{pat,lazy}
            PLit p k v      -> stio (PLit p k v)
            PAnn p s        -> liftM2 PAnn (transPat fname p) (transSigma s)
            PAt {pos,var,uid,pat} -> do
                                u <- uniqid
                                let sym = U.patLocal pos u var
                                enter sym
                                changeST Global.{sub <- SubSt.{
                                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                pat <- transPat fname pat
                                stio (PAt {pos,var,uid=u,pat})
            PMat {pos,var,uid,value} -> do
                                u <- uniqid
                                let sym = (U.patLocal pos u var).{
                                    typ = ForAll [] (RhoTau [] (TCon pos (TName pUtilRegex "Matcher")))}
                                enter sym
                                changeST Global.{sub <- SubSt.{
                                    idKind <- insertkv (KeyTk pos.first) (Right sym.name)}}
                                stio (PMat {pos,var,uid=u,value})
            PConFS {pos,qname,fields} -> do
                                qname <- resolveVName fname pos qname
                                pats <- mapSt (transPat fname • snd) fields
                                let pfs = map fst fields
                                    ft = Tree.fromList (zip pfs pats)
                                    fpat (Just x)
                                        | Just p <- ft.lookup x = stio p
                                    fpat other = do
                                            -- u <- U.uniqid
                                            transPat fname (PVar {pos = pos.change VARID "_", var="_", uid = 0})
                                case g.findit qname of
                                    Just (SymD {flds}) -> do
                                        let fs = [ f | Field {name = Just f} <- flds ]
                                            badfs = filter (`notElem` fs) pfs
                                        pats <- mapSt fpat (map ConField.name flds)
                                        if null badfs then stio (PCon {pos,qname,pats})
                                          else do
                                            E.error pos (msgdoc ("Constructor " ++ qname.nice g ++ " has no "
                                                ++ (if length badfs == 1 then "field " else "fields ")
                                                ++ joined ", " badfs))
                                            stio (PCon {pos,qname,pats})
                                    _ -> do
                                        checkCon pos qname pats
                                        stio (PCon {pos,qname,pats})
      where
            checkCon pos qcon ps = do
                    g <- getST
                    case g.findit qcon of
                        Just (SymD {flds})
                                    | length flds == length ps = stio ()
                                    | otherwise = E.error pos (msgdoc ("constructor " ++ qcon.nice g
                                                    ++ " demands " ++ show (length flds)
                                                    ++ " arguments, but you gave "
                                                    ++ show (length ps)))
                        nothing -> when (g.errors == 0) do
                            E.error pos (msgdoc (pos.last.value ++ " is not a data constructor"))

transMbSigma (Just s) = liftM Just (transSigma s)
transMbSigma Nothing  = stio Nothing

fName env fname nm = case findLocal env nm of
    Local 0 _ -> fname nm
    local     -> local 

transExpr :: [QName] -> (String -> QName) -> ExprS -> StG Expr
transExpr env fname ex = do
    g <- getST
    E.logmsg TRACE5 (getpos ex) (text ("transExpr: " ++ show env ++ "    " ++ ex.nice g))
    case ex of
        Vbl {pos,name,typ} -> do
                        name <- resolveVName (fName env fname) pos name
                        typ  <- transMbSigma typ
                        stio (Vbl {pos, name,typ})
        Con {pos,name,typ} -> do
                        name <- resolveVName fname pos name
                        checkCon pos name
                        typ  <- transMbSigma typ
                        stio (Con {pos, name, typ})
        Mem x s t    -> do
                            x <- transExpr env fname x
                            t <- transMbSigma t
                            stio (Mem x s t)
        App a b t    -> do
                            a  <- transExpr env fname a
                            b  <- transExpr env fname b
                            t  <- transMbSigma t
                            stio (App a b t)
        Lit p k v t  -> liftM (Lit p k v) (transMbSigma t)
        Case {ckind,ex,alts,typ} -> do
                    ex   <- transExpr env fname ex
                    alts <- mapSt transAlt alts
                    typ  <- transMbSigma typ
                    stio (Case {ckind, ex, alts, typ})
                where
                        transAlt (CAlt {pat, ex}) = do
                                pat <- transPatUnique  fname pat
                                let nenv = U.patNames pat
                                ex  <- transExpr (nenv++env) fname ex
                                stio (CAlt {pat, ex})
                              
        Ifte c a b t -> do
                        c <- transExpr env fname c
                        a <- transExpr env fname a
                        b <- transExpr env fname b
                        t <- transMbSigma t
                        stio (Ifte c a b t)
        Let {defs,ex,typ} -> do
                        defs <- F.fixdefs defs
                        nenv <- foldM enterlocal [] (Enter.annosLast defs)
                        foreach defs (transdef (nenv++env) fname)
                        ex   <- transExpr (nenv++env) fname ex
                        typ  <- transMbSigma typ
                        syms <- mapSt U.findV nenv
                        foreach (syms) checkDefined
                        stio (Let {env=nenv, defs=[], ex, typ})
                    where
                        checkDefined (SymV {expr = Just _}) = stio ()
                        checkDefined sym = E.error sym.pos (msgdoc (nice sym g ++ " is annotated but not defined."))
                        enterlocal :: [QName] -> Definition -> StG [QName]
                        enterlocal env def = case findLocal env (Enter.defname def) of
                            Local 0 _ = do      -- not yet entered
                                uid <- uniqid
                                Enter.enter1 (Local uid) def
                                return  (Local uid (Enter.defname def):env)
                            Local u _ = do
                                Enter.enter1 (Local u) def
                                return env
                            _ = error "onlyLocal possible"
        Lam {pat,ex,typ} -> do
                        pat <- transPatUnique  fname pat
                        let nenv = U.patNames pat
                        ex  <- transExpr (nenv++env) fname ex
                        typ <- transMbSigma typ
                        stio (Lam {pat,ex,typ})
        Ann {ex,typ} -> do
                        ex  <- transExpr env fname ex
                        typ <- transMbSigma typ
                        stio (Ann {ex,typ})
        ConFS {pos,name,fields,typ} -> do
                        name <- resolveVName fname pos name
                        exs  <- mapSt (transExpr env fname) (map snd fields)
                        typ  <- transMbSigma typ
                        let vUndef = Vbl (pos.change VARID "undefined") (VName pPreludeBase "undefined") Nothing
                        g <- getST
                        case g.findit name of
                            Just (symd@SymD {}) -> do
                                let xnms = map fst fields
                                    flds = [ f | Field {name = Just f} <- symd.flds ]
                                    badf = filter (`notElem` flds) xnms
                                    miss = filter (`notElem` xnms) flds
                                    tree = Tree.fromList (zip xnms exs)
                                    mapx s = case tree.lookup s of
                                        Just x -> x
                                        Nothing -> vUndef
                                    oexs = map mapx flds
                                    res  = fold nApp (Con {pos,name,typ}) oexs
                                    f1s  = if length badf == 1 then "field " else "fields "
                                    f2s  = if length miss == 1 then "field " else "fields "
                                unless (null badf) do
                                    g <- getST
                                    E.error pos (msgdoc (nice symd g ++ " has no " ++ f1s ++ joined ", " badf))
                                unless (null miss) do
                                    g <- getST
                                    E.error pos (msgdoc (f2s ++ joined ", " miss ++ " missing in construction of "
                                                    ++ symd.name.nice g))
                                stio res
                            Just sym -> do
                                E.error pos (msgdoc ("looked for constructor " ++ name.nice g ++ ", found "
                                                            ++ sym.nice g))
                                stio vUndef
                            Nothing -> do 
                                E.error pos (msgdoc ("looked for constructor " ++ name.nice g ++ ", found Nothing"))
                                stio vUndef
  where
        -- avoid problems with findD later
        -- if this is not a data constructor, flag an extra error so as to end processing
        checkCon pos qcon = do
            g <- getST
            case g.findit qcon of
                Just (SymD {}) -> return ()
                nothing -> when (g.errors == 0) do
                    E.error pos (msgdoc (pos.last.value ++ " is not a data constructor"))

transclass :: DefinitionS -> Symbol -> StG ()
transclass def sym = do
        supers <- liftM (map unJust • filter isJust)
                        (mapSt (resolveXName def.pos sym) def.supers)
        changeSym sym.{supers = unique supers}
        g <- getST
        foreach def.defs  (transdef [] (MName sym.name))

