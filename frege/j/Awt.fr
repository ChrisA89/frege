/**
 * Definitions for native components in package @java.awt@
 */
 

/*
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
 */

package frege.j.Awt where

import frege.j.Util

/// Operations for sub classes of @java.awt.Component@
interface IsComponent d where
    pure native asComponent "(java.awt.Component)" :: d RealWorld -> Component
    
/// Operations for java classes derived from @java.awt.Container@
interface IsContainer IsComponent d => d where
    pure native asContainer "(java.awt.Container)" :: d RealWorld -> Container
    native addComponent add :: d RealWorld -> Component -> IO Component
    public add :: IsComponent c => d RealWorld -> c RealWorld -> IO Component
    public add container component = container.addComponent (asComponent component)

/// Operations for java classes derived from @java.awt.Window@
interface IsWindow IsContainer w => w where
    pure native asWindow "(java.awt.Window)" :: w RealWorld -> Window
    native pack :: w RealWorld -> IO ()
    native setVisible :: w RealWorld -> Bool -> IO ()
    
type Component = ComponentT RealWorld
/// a bare @java.awt.Component@
data ComponentT s = native java.awt.Component
instance IsComponent ComponentT

type Container = ContainerT RealWorld
/// a bare @java.wat.Container@
data ContainerT s = native java.awt.Container
instance IsComponent ContainerT
instance IsContainer ContainerT

type Window = WindowT RealWorld
/// some @java.awt.Window@
data WindowT s = native java.awt.Window
instance IsComponent WindowT
instance IsContainer WindowT
instance IsWindow    WindowT

// ------------------ AWTEvent ----------------------------
/// operations of a @java.awt.AWTEvent@
interface IsAWTEvent IsEventObject a => a where
    pure native asAWTEvent "(java.awt.AWTEvent)" :: a s -> AWTEventT s

/// a shorthand for 'AWTEventT' in the 'IO' Monad    
type AWTEvent = AWTEventT RealWorld
/// an object with compile timt type @java.awt.AWTEvent@
data AWTEventT s = native java.awt.AWTEvent
instance IsAWTEvent AWTEventT

// ----------------------- ActionEvent ------------------------
/// operations of a @java.awt.event.ActionEvent@
interface IsActionEvent IsAWTEvent a => a where
    pure native asActionEvent "(java.awt.event.ActionEvent)" :: a s -> ActionEventT s
    native getActionCommand :: a s -> ST s String
    native getModifiers     :: a s -> ST s Int
/// a shorthand for 'ActionEventT' in the 'IO' Monad    
type ActionEvent = ActionEventT RealWorld
/// an object with compile timt type @java.awt.event.ActionEvent@
data ActionEventT s = native java.awt.event.ActionEvent where
    pure native alt_mask   java.awt.event.ActionEvent.ALT_MASK   :: Int
    pure native ctrl_mask  java.awt.event.ActionEvent.CTRL_MASK  :: Int
    pure native meta_mask  java.awt.event.ActionEvent.META_MASK  :: Int
    pure native shift_mask java.awt.event.ActionEvent.SHIFT_MASK :: Int

instance IsActionEvent ActionEventT

// ---------------- ActionListener ----------------------
/// operations for @java.awt.event.ActionListener@
interface IsActionListener IsEventListener a => a where
    pure native asActionListener "(java.awt.event.ActionListener)" :: a s -> ActionListenerT s
    native nativeActionPerformed actionPerformed :: a s -> ActionEventT s -> ST s ()
    /// wrapper for 'nativeActionPerformed' that passes argument 'asActionEvent'
    actionPerformed :: IsActionEvent e => a s -> e s -> ST s () 
    actionPerformed al ae = nativeActionPerformed al ae.asActionEvent
/// a shorthand for 'ActionListenerT' in the 'IO' Monad    
type ActionListener = ActionListenerT RealWorld
/// an object with compile time type @java.awt.event.ActionListener@
data ActionListenerT s = native java.awt.event.ActionListener where
    /// make an action listener from a function
    native new frege.rt.SwingSupport.actionListener 
                                        :: (ActionEventT s -> ST s ()) -> ST s (ActionListenerT s)
instance IsActionListener ActionListenerT
    
