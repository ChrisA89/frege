{--
    This package provides @deepseq@ wich evaluates its first argument to
    normal form.
-}
module Control.DeepSeq where

import Data.Tree

--- Type class for data structures which can be evaluated to normal form.
class NFData α where
    rnf :: α -> ()
    --- Fully evaluates @a@ (reduce to normal form) and returns @()@.
    rnf a = a `seq` ()

--- Fully evaluates @a@ and returns @b@.
deepseq :: NFData α => α -> β -> β
deepseq a b = rnf a `seq` b

--- Convenience function to fully evaluate a data structure and subsequently
--- returning it.
force x = x `deepseq` x

instance NFData Int
instance NFData Integer
instance NFData Float
instance NFData Double

instance NFData Char
instance NFData Bool
instance NFData ()

instance NFData String

instance NFData (NFData α) => Maybe α where
    rnf Nothing = ()
    rnf (Just x) = rnf x

instance NFData (NFData α, NFData β) => Either α β where
    rnf (Left x)  = rnf x
    rnf (Right x) = rnf x

instance NFData (NFData α) => [α] where
    rnf [] = ()
    rnf (x:xs) = case rnf x of
                    !_ -> rnf xs

instance NFData (NFData α) => (Tree α) where
    rnf (Node a b) = rnf a `seq` rnf b

instance NFData (NFData α, NFData β) => (α -> β) where
    rnf !_ = ()

instance NFData (NFData α, NFData β) => (α, β) where
    rnf (a, b) = rnf a `seq` rnf b
instance NFData (NFData α, NFData β, NFData γ) => (α, β, γ) where
    rnf (a, b, c) = rnf a `seq` rnf b `seq` rnf c
instance NFData (NFData α, NFData β, NFData γ, NFData δ) => (α, β, γ, δ) where
    rnf (a, b, c, d) = rnf a `seq` rnf b `seq` rnf c `seq` rnf d

{-
instance NFData ( NFData α1
                , NFData α2
                , NFData α3
                , NFData α4
                , NFData α5
                , NFData α6
                , NFData α7
                , NFData α8
                , NFData α9
                , NFData α10
                , NFData α11
                , NFData α12
                , NFData α13
                , NFData α14
                , NFData α15
                , NFData α16
                , NFData α17
                , NFData α18
                , NFData α19
                , NFData α20
                , NFData α21
                , NFData α22
                , NFData α23
                , NFData α24
                , NFData α25
                , NFData α26
                ) => ( α1
                     , α2
                     , α3
                     , α4
                     , α5
                     , α6
                     , α7
                     , α8
                     , α9
                     , α10
                     , α11
                     , α12
                     , α13
                     , α14
                     , α15
                     , α16
                     , α17
                     , α18
                     , α19
                     , α20
                     , α21
                     , α22
                     , α23
                     , α24
                     , α25
                     , α26
                     ) where
    rnf (a
        , b
        , c
        , d
        , e
        , f
        , g
        , h
        , i
        , j
        , k
        , l
        , m
        , n
        , o
        , p
        , q
        , r
        , s
        , t
        , u
        , v
        , w
        , x
        , y
        , z
        )
     = rnf a
       `seq` rnf b
       `seq` rnf c
       `seq` rnf d
       `seq` rnf e
       `seq` rnf f
       `seq` rnf g
       `seq` rnf h
       `seq` rnf i
       `seq` rnf j
       `seq` rnf k
       `seq` rnf l
       `seq` rnf m
       `seq` rnf n
       `seq` rnf o
       `seq` rnf p
       `seq` rnf q
       `seq` rnf r
       `seq` rnf s
       `seq` rnf t
       `seq` rnf u
       `seq` rnf v
       `seq` rnf w
       `seq` rnf x
       `seq` rnf y
       `seq` rnf z
-}
