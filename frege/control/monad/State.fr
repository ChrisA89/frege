
--- The strict 'State' 'Monad'

module frege.control.monad.State
        inline  (State.State.>>=, State.State.>>, 
                State.State.return, State.State.get) 
    where

{--
    @State s a@ is an abstrac data type that resembles a stateful computation
    with State _s_ and result _a_,
    i.e. functions of type @s -> (a, s)@
    where the State is immutable.
 -}
abstract data State s a = State (s -> (a, s)) where
    --- run a stateful computation
    public run (State x) s = x s
    --- return the state from the internals of the monad
    public get   = State doublestate
    
    --- replace the 'State' inside the monad 
    public put x = State (const ((); x))
    --- modify the 'State'
    public modify f = State (\state -> ((); f state))
    --- lift a value to the 'State' monad
    public return a        =  State (strictTuple2 a)
    --- monadic bind for the 'State' monad
    public State a >>= k  =  State (\s -> case a s of 
                                        (v, s') -> case k v of 
                                            State.State b -> b s'
                                    )
    public a >> b = a  State.>>=  (const b)    

    protected doublestate s = (s;s)
    
instance Monad (State s)

-- Haskell compatibility

-- runState :: State s a -> s -> (a,s)
runState    = State.run
evalState s = fst . State.run s
execState s = snd . State.run s
state       = State.State















