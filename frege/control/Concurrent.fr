{--
    Support for concurrency.
    
    Concurrency in Frege comes in 2 flavors. 
    The first is through 'Thread's, which are,
    unlike in Haskell, @OS@ threads.
  
    The second possibility is to use a thread pool and an executor service 
    one can submit tasks to. But note that blocking asynchronous tasks,
    unlike Haskell green threads, will block an OS thread on blocking actions.  
-}    

module frege.control.Concurrent where

import frege.java.util.Concurrent as C

--- A thread safe, shared variable, that is either full or empty.    
abstract data MVar a = MV (BlockingQueue a) where
    --- create an empty 'MVar'
    newEmpty        = ArrayBlockingQueue.new 1 >>= return . MV
    
    --- create a 'MVar' filled with a value
    new a           = do m <- newEmpty; m.put a; return m
    
    --- put a value in a 'MVar', blocks if full
    put   (MV q) a  = q.put a
    
    --- take a value from a 'MVar', blocks if empty         
    take  (MV q)    = q.take
    
    --- put a value in a 'MVar', returns false if already full.
    offer (MV q) a  = q.offer a
    
    --- get the value from a 'MVar', return 'Nothing' is empty
    poll  (MV q)    = q.poll  
    
-- Haskell compatibility
newEmptyMVar    = MVar.newEmpty
newMVar         = MVar.new 
tryTakeMVar     = MVar.poll
tryPutMVar      = MVar.offer   


--- Create and start a new OS 'Thread' that runs an 'IO' action.
--- In Frege, there is no difference between 'forkIO' and 'forkOS' 
forkIO :: IO () -> IO Thread
forkIO action = do
    r <- Runnable.new action
    t <- Thread.new r
    t.start
    return t

--- Haskell people use this when they want to start a OS 'Thread'
forkOS = forkIO