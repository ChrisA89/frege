-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}


package frege.Prelude where

import frege.prelude.Base public
import frege.prelude.Text public

-- derived instances for named types
derive Eq   Ordering
derive Ord  Ordering
derive Enum Ordering
derive Show Ordering

derive Eq   Maybe a
derive Ord  Maybe a
derive Show Maybe a

derive Eq   Either a b
derive Ord  Either a b
derive Show Either a b

-- ---------------------- list instances -----------------------------
derive Ord      [a]

-- ----------------------- tuple instances ---------------------------
derive Ord      ()
derive Show     ()

derive Eq       (a,b)
derive Ord      (a,b)
derive Show     (a,b)

derive Eq       (a,b,c)
derive Ord      (a,b,c)
derive Show     (a,b,c)

-- ########### functions in asylum here until their prelude package is done #####

print d = printStr (display d);
println d = printStrLn (display d);

{--
    @xs !! n@ is the element with index /n/ of the list /xs/,
    where the head element of a list has index 0.
-}
(x:_)  !! 0         = x
(_:xs) !! n | n > 0 = xs !! (n-1)
(_:_)  !! n         = error ("Prelude.!!: negative index (" ++ show n ++ ")")
[]     !! n         = error ("[] Prelude.!! " ++ show n)
