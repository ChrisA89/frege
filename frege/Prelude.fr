-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}


package frege.Prelude where

import frege.prelude.PreludeBase public hiding(Ordering)
import frege.prelude.PreludeBase public (Ordering(Eq EQ, Lt LT, Gt GT))
import frege.prelude.PreludeBase public (from toEnum, ord fromEnum)
import frege.prelude.PreludeNative public 
import frege.prelude.PreludeList public
import frege.prelude.PreludeList public (fold foldl', foldl1 foldl1')
import frege.prelude.PreludeText  public
import frege.prelude.PreludeMonad public
import frege.prelude.PreludeIO public
import frege.prelude.Arrays public
import frege.prelude.Maybe public
import frege.java.Lang public
import frege.java.IO public 
-- derived instances for named types
derive Eq   Ordering
derive Ord  Ordering
derive Enum Ordering

derive Eq   Either a b
derive Ord  Either a b


-- ----------------------- tuple instances ---------------------------
derive Ord      ()

derive Eq       (a,b)
derive Ord      (a,b)
instance Bounded (Bounded a, Bounded b) => (a,b) where
    maxBound = (maxBound, maxBound) 
    minBound = (minBound, minBound)


derive Eq       (a,b,c)
derive Ord      (a,b,c)
instance Bounded (Bounded a, Bounded b, Bounded c) => (a,b,c) where
    maxBound = (maxBound, maxBound, maxBound) 
    minBound = (minBound, minBound, minBound)

--- Print a value to the standard output writer.
--- This will come out UTF8 encoded.
print !d   = IO.stdout.print (display d)

--- Print a value to the standard output stream and append a platform typical new line character.
--- This will come out UTF8 encoded.
println !d = IO.stdout.println (display d)

--- write a character to 'stdout'
putChar :: Char -> IO ()
putChar = stdout.putChar

--- write a 'String' to standard output (Haskell compatibility)
putStr ::  String -> IO()
putStr = stdout.print

--- write a 'String' and a new line to standard output (Haskell compatibility)
putStrLn ::  String -> IO()
putStrLn = stdout.println


--- read a character from the standard input reader
getChar = IO.stdin.getChar

--- read a line from the standard input reader, end of line charcters are removed.
getLine = IO.stdin.getLine


{-- unsafe trace, returns always *false* and can thus be used like
    
    > fun x y
    >    | trace   ("x is " ++ show x) = undefined
    >    | traceLn ("y is " ++ show y) = undefined
    >    | otherwise = ......
    
    Note that this imposes strictness on the traced data.
    -}
trace   str = IO.performUnsafe (stderr.print str >> IO.return false)
--- same as 'trace' but appends a line break 
traceLn str = IO.performUnsafe (stderr.println str >> IO.return false)

--- Set the exit code to the maximum of the supplied value and the previous exit code.
native setExitCode frege.runtime.Runtime.setExitCode :: Int -> IO ()
