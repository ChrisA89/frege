/**
 * 
 */
package frege.runtime;

/**
 * <p>Wrapper for Checked Exceptions</p>
 * 
 * Because we cannot simply re-throw checked exceptions,
 * we must wrap checked exceptions when we catch them.
 * 
 * @author ingo
 */
public class WrappedCheckedException extends Undefined {
	/**
	 * generated by eclipse
	 */
	private static final long serialVersionUID = 6177899659489453430L;

	public WrappedCheckedException(Throwable cause) {
		super("", cause);
	}
	
	/**
	 * <p>Run an IO action and invoke the handler on exceptions.</p>
	 * <p>The frege type of this function is</p>
	 * <code>native catch :: IO a -> (e -> IO a) -> IO a</code>  
	 */
	public static Object doCatch(Class cls,
			Lambda action, Lambda handler) {

		try {
			System.out.println("entering try for " + cls.getName());
			return action.apply(0).result().<Object>forced();
		} catch (WrappedCheckedException e) {
			final Throwable exc = e.getCause();
			System.out.println("entering catch for Wrapped with " + exc.getClass().getName());
			if (cls.isInstance(exc)) {
				return handler.apply(exc).apply(0).result().<Object> forced();
			}
			throw e;	// go to next catch, if any
		} catch (Exception exc) {
			System.out.println("entering catch for " + exc.getClass().getName());
			if (cls.isInstance(exc)) {
				return handler.apply(exc).apply(0).result().<Object> forced();
			}
			throw exc;	// go to next catch, if any
		}
		finally {
			System.out.println("leaving try for " + cls.getName());
		}
	}
}
