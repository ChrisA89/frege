--- Mathematical functions from 'http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html java.lang.Math'
protected module frege.java.lang.Math where

import frege.prelude.PreludeBase (Float, Double, Int, Long)

--- The 'Double' value that is closer than any other to e, the base of the natural logarithms.
pure native e         java.lang.Math.E        ∷ Double

--- The 'Double' value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.
pure native pi        java.lang.Math.PI       ∷ Double

--- Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.
pure native acos            java.lang.Math.acos     ∷ Float  → Double
                                                    | Double → Double 
pure native asin            java.lang.Math.asin     ∷ Float  → Double
                                                    | Double → Double
pure native atan            java.lang.Math.atan     ∷ Float  → Double
                                                    | Double → Double
pure native atan2           java.lang.Math.atan2    ∷ number -> number -> Double
pure native cbrt            java.lang.Math.cbrt     ∷ number -> Double
pure native ceil            java.lang.Math.ceil     ∷ number -> Double
pure native copySign        java.lang.Math.copySign ∷ number -> number -> number
pure native cos             java.lang.Math.cos      ∷ number -> Double
pure native cosh            java.lang.Math.cosh     ∷ number -> Double
pure native exp             java.lang.Math.exp      ∷ number -> Double
pure native expm1           java.lang.Math.expm1    ∷ number -> Double

{--
  Returns the largest (closest to positive infinity) value that is
  less than or equal to the argument and is equal to a mathematical integer.

  Special cases:

    - If the argument value is already equal to a mathematical integer,
    then the result is the same as the argument.
    - If the argument is NaN or an infinity or positive zero or
    negative zero, then the result is the same as the argument.

 -}
protected pure native floor           java.lang.Math.floor    :: number -> Double
protected pure native getExponent     java.lang.Math.getExponent :: number -> Int
protected pure native hypot           java.lang.Math.hypot    :: number -> number -> Double
protected pure native ieeeRemainder   java.lang.Math.IEEEremainder :: number -> number -> Double
protected pure native log             java.lang.Math.log      :: number -> Double
protected pure native log10           java.lang.Math.log10    :: number -> Double
protected pure native log1p           java.lang.Math.log1p    :: number -> Double
protected pure native nativeMin       java.lang.Math.min      :: number -> number -> number
protected pure native nativeMax       java.lang.Math.max      :: number -> number -> number
protected pure native nextAfter       java.lang.Math.nextAfter:: number -> number -> number
protected pure native nextUp          java.lang.Math.nextUp   :: number -> number
protected pure native **              java.lang.Math.pow      :: number -> number -> Double
protected pure native pow             java.lang.Math.pow      :: number -> number -> Double
protected pure native rint            java.lang.Math.rint     :: number -> Double
-- protected :: number -> Long
protected pure native scalb           java.lang.Math.scalb    :: number -> Int -> number
protected pure native signum          java.lang.Math.signum   :: number -> number
protected pure native sin             java.lang.Math.sin      :: number -> Double
protected pure native sinh            java.lang.Math.sinh     :: number -> Double
protected pure native sqrt            java.lang.Math.sqrt     :: number -> Double
protected pure native tan             java.lang.Math.tan      :: number -> Double
protected pure native tanh            java.lang.Math.tanh     :: number -> Double
protected pure native toDegrees       java.lang.Math.toDegrees:: number -> Double
protected pure native toRadians       java.lang.Math.toRadians:: number -> Double
protected pure native ulp             java.lang.Math.ulp      :: number -> number

