--- Java classes from package @java.util.concurrent@

module frege.java.util.Concurrent where

import Java.Util

data BlockingQueue e = mutable native java.util.concurrent.BlockingQueue where
    --- add element to blocking queue, throw exception if not possible
    native add      :: BlockingQueue e -> e -> IO Bool throws IllegalStateException
    --- add element to blocking queue, return false if not possible
    native offer    :: BlockingQueue e -> e -> IO Bool
    --- add element to blocking queue, block until possible
    native put      :: BlockingQueue e -> e -> IO () throws InterruptedException
    
    --- get and remove element from blocking queue, throw exception if it is empty
    native remove   :: BlockingQueue e -> IO e throws NoSuchElementException
    --- get and remove element from blocking queue, return null if it is empty
    native poll     :: BlockingQueue e -> IO (Maybe e)
    --- get and remove element from blocking queue, block until something is available
    native take     :: BlockingQueue e -> IO e throws InterruptedException

data ArrayBlockingQueue e = mutable native java.util.concurrent.ArrayBlockingQueue where
    native new      :: Int -> IO (ArrayBlockingQueue e)
                     | Int -> Bool ->  IO (ArrayBlockingQueue e)           
