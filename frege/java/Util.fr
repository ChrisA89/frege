--- Java classes from package @java.util@

protected module frege.java.Util where

import frege.java.Lang 
import frege.java.util.Regex
import frege.prelude.PreludeBase
import frege.prelude.PreludeIO
import frege.prelude.PreludeText
import frege.prelude.PreludeList
import frege.prelude.PreludeMonad

data NoSuchElementException = pure native java.util.NoSuchElementException
derive Exceptional NoSuchElementException

data Enumeration e = native java.util.Enumeration where
        native hasMoreElements :: Mutable s (Enumeration e) -> ST s Bool
        native nextElement     :: Mutable s (Enumeration e) -> ST s e
                                    throws NoSuchElementException
        toList :: Mutable s (Enumeration e) -> ST s [e]
        toList enum = loop  []
            where
                loop acc = do
                    more <- enum.hasMoreElements
                    if more
                    then do
                        elem <- enum.nextElement   
                        loop (elem:acc)
                    else return (reverse acc)

{--
    A value of this type is used to generate a stream of pseudorandom numbers. 
    The type uses a 48-bit seed, which is modified using a linear congruential formula. 
    (See Donald Knuth, The Art of Computer Programming, Volume 2, Section 3.2.1.)

    If two 'Random' values are created with the same seed, 
    and the same sequence of method calls is made for each, 
    they will generate and return identical sequences of numbers. 
    In order to guarantee this property, particular algorithms are 
    specified for the class Random. 

    Many applications will find the function 'frege.prelude.Math#random' 
    simpler to use.
-}

data Random = native java.util.Random  where
    {-- 
        Create a new random number generator.
        
        If no seed is given, a value very likely to be distinct from any other
        invocation of the constructor will be computed from the
        state of the real world.
        -}
    native new                      :: ()   -> IOMutable   Random
                                    |  Long -> STMutable s Random
                                    
    {-- 
        Returns the next pseudorandom, uniformly distributed 
        'Bool' value from this random number generator's sequence.
    -}
    native nextBoolean              :: Mutable s Random -> ST s Bool
    
    {-- 
        Returns the next pseudorandom, uniformly distributed 
        'Double' value between 0.0 and 1.0 
        from this random number generator's sequence.
    -}
    native nextDouble               :: Mutable s Random -> ST s Double
    
    {-- 
        Returns the next pseudorandom, uniformly distributed 
        'Float' value between 0.0 and 1.0 
        from this random number generator's sequence.
    -}
    native nextFloat                :: Mutable s Random -> ST s Float
    
    {--
        Returns the next pseudorandom, Gaussian ("normally") distributed 
        'Double' value with mean 0.0 and standard deviation 1.0 from this 
        random number generator's sequence.
    -}
    native nextGaussian             :: Mutable s Random -> ST s Double
    
    {--
        > random.nextInt
        Returns the next pseudorandom, 
        uniformly distributed 'Int' 
        value from this random number generator's sequence.
       
        > random.nextInt limit
        Returns a pseudorandom, uniformly distributed 
        'Int' value between 0 (inclusive) and the specified value (exclusive), 
        drawn from this random number generator's sequence.
        The _limit_ must be positive.  
    -}
    native nextInt                  :: Mutable s Random -> ST s Int
                                    |  Mutable s Random -> Int -> ST s Int
    
    {--
        Returns the next pseudorandom, uniformly distributed 
        'Long' value from this random number generator's sequence.
    -}
    native nextLong                :: Mutable s Random -> ST s Long
    
    --- Sets the seed of this random number generator using a single long seed.
    native setSeed                  :: Mutable s Random -> Long -> ST s ()

-- forward declarations, we don't want to import java.io here
protected data Reader = mutable native java.io.Reader
protected data File   = native java.io.File        
protected data FileNotFoundException = pure native java.io.FileNotFoundException
{--
    The good old @java.util.Scanner@, we use it mainly to
    implement "getContents" type of functionality.
-}
data Scanner = native java.util.Scanner where
    native new 
                :: MutableIO File -> IOMutable Scanner
                        throws FileNotFoundException            
                 | MutableIO File -> String -> IOMutable Scanner
                         throws FileNotFoundException, IllegalArgumentException
                 | Reader -> IOMutable   Scanner
                 | String -> STMutable s Scanner
    native close :: Mutable s Scanner -> ST s ()
    native useDelimiter :: Mutable s Scanner -> Regex -> STMutable s Scanner
    native next :: Mutable s Scanner -> ST s String
                throws IllegalStateException, NoSuchElementException
    native hasNext :: Mutable s Scanner -> ST s Bool
                throws IllegalStateException
    