--- Provide wrappers 'Any' and 'All' for 'Bool' 'Monoid's
module frege.data.wrapper.Boolean where

import Data.Monoid
import frege.test.QuickCheck

{--
    'Monoid' for 'Bool' with operation '||' and identity @false@
-}
data Any = Any { unwrap :: Bool }  --- wrap a 'Bool' value
derive Show Any
derive Eq Any
derive Ord Any

--- Haskell compatibility: get the value wrapped by Any
getAny = Any.unwrap

--- The 'Semigroup' instance for 'Any' uses operation '||'.
instance Semigroup Any where
    --- Disjunction
    Any x `mappend` Any y = Any (x || y)
  
--- The 'Monoid' for 'Any' uses @false@ as identity.
instance Monoid Any where
    --- 'Any' @false@
    mempty = Any false

prop_any_empty_right = property (\b ->
            Any b <> mempty == Any b)
prop_any_empty_left = property (\b ->
            mempty <> Any b == Any b)
prop_any_disjunction = 
        forAll arbitrary (\a -> 
            forAll arbitrary (\b ->
                Any (a || b) == Any a <> Any b)) 

{--
    'Monoid' for 'Bool' with operation '&&' and identity @true@
-}
data All = All { unwrap :: Bool }  --- wrap a 'Bool' value
derive Show All
derive Eq All
derive Ord All

--- Haskell compatibility: get the value wrapped by All
getAll = All.unwrap


--- The 'Semigroup' instance for 'All' uses operation '&&'.
instance Semigroup All where
    --- Conjunction
    All x `mappend` All y = All (x && y)
  
--- The 'Monoid' for 'All' uses @true@ as identity.
instance Monoid All where
    --- 'All' @true@
    mempty = All true

prop_all_empty_right = property (\b ->
            All b <> mempty == All b)
prop_all_empty_left = property (\b ->
            mempty <> All b  == All b)            
prop_all_conjunction = 
        forAll arbitrary (\a ->
            forAll arbitrary (\b ->
                (a && b) == (All a <> All b).unwrap)) 