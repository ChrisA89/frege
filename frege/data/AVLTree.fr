{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}


{--
    An AVL Tree and a general interface for Maps.
-}
package frege.data.AVLTree where

import frege.data.List (elemBy)


class Map keyed where
    lookup    :: Ord key => keyed key value -> key -> Maybe value
    insert    :: Ord key => keyed key value -> key -> value -> keyed key value
    update    :: Ord key => keyed key value -> key -> value -> keyed key value
    delete    :: Ord key => keyed key value -> key -> keyed key value
    fromList  :: Ord key => [(key, value)]  -> keyed key value
    each      :: keyed key value -> [(key, value)]
    keys      :: keyed key value -> [key]
    values    :: keyed key value -> [value]
    insertkv, updatekv :: Ord key => key -> value -> keyed key value -> keyed key value
    deletek   :: Ord key => key -> keyed key value -> keyed key value
    insertkv k v m = insert m k v
    updatekv k v m = update m k v
    deletek  k m   = delete m k

abstract data Tree k v = Nil | Node Int (Tree k v) (Tree k v) k v where
    left  (Node _ l _ _ _) = l
    left  Nil              = error "AVLTree: left Nil"
    
    right  (Node _ _ r _ _) = r
    right  Nil              = error "AVLTree: right Nil"
    
    depth (Node _ l r _ _) = max (depth l) (depth r)
    depth _ = 0

    height (Node h _ _ _  _) = h
    height _ = 0

    balance (Node _ l r _ _) = height l - height r
    balance _ = 0

    rotright (Node _ (Node _ ll lr lk lv) r k v) = Node sa ll x lk lv
        where
            sx = 1 + max (height lr) (height r)
            x = Node sx lr r k v
            sa = 1 + max (height ll) (height x)
    rotright t = t
    
    rotleft (Node _ l (Node _ rl rr rk rv) k v) = Node sb x rr rk rv
        where
            sx = 1 + max (height l) (height rl)
            x = Node sx l rl k v
            sb = 1 + max (height x) (height rr)
    rotleft t = t
    
    drotlr (Node s l r k v) = rotright (Node s (rotleft l) r k v)
    drotlr nil = nil
    
    drotrl (Node s l r k v) = rotleft  (Node s l (rotright r) k v)
    drotrl nil = nil
    
    rebalance (x@Node s l r k v) =
        if hl + 1 < hr then
            if balance r < 1 then rotleft x else drotrl x
        else if hl > hr + 1 then        -- left subtree higher
            if balance l >= 0 then rotright x else drotlr x
        else x where
            hl = height l
            hr = height r
    rebalance nil = nil
    
    -- heightchange (Node a _ _ _ _) Nil = (+1)
    -- heightchange Nil (Node a _ _ _ _) = (subtract 1)
    -- heightchange (Node a _ _ _ _) (Node b _ _ _ _) = case a <=> b of
    --     Lt -> (+1)
    --     Eq -> id
    --     Gt -> (subtract 1)
    -- heightchange Nil Nil = id
    
    leftmost (this@Node _ Nil _ _ _) =  this
    leftmost (Node _ l _ _ _) = leftmost l
    leftmost Nil              = error "AVLTree.leftmost Tree.Nil"

    keyvalues t order = kv t []
        where
             kv (Node _ l r key v) !acc = case order of
                 Lt -> kv l ((key,v): kv r acc)
                 Gt -> kv r ((key,v): kv l acc)
                 Eq -> (key,v) : kv l (kv r acc)
             kv nil acc = acc

    tmap f Nil = Nil
    tmap f (Node i l r k v) = Node i (tmap f l) (tmap f r) k  (f v)

    insertList t kvs = fold ins t kvs where
        ins t (k,v) = Tree.insert t k v
        
    --- version of lookup that is optimised for 'String' keys
    lookupS    :: Tree String value -> String -> Maybe value
    lookupS (Node _ l r !k1 v) !k =
                    case k <=> k1 of 
                        Lt -> lookupS l k
                        Gt -> lookupS r k
                        Eq -> Just v
    lookupS nil _ = Nothing

    --- version of lookup that is optimised for 'Int' keys
    lookupI    :: Tree Int value -> Int -> Maybe value
    lookupI (Node _ l r !k1 v) !k =
                    case k <=> k1 of 
                        Lt -> lookupI l k
                        Gt -> lookupI r k
                        Eq -> Just v
    lookupI nil _ = Nothing



derive Show  Tree k v

instance Empty (Tree a) where
    null Tree.Nil = true
    null _ = false
    empty = Tree.Nil


instance Map Tree where
    insert (Tree.Node s l r  k1 v1) !k v =
        case k <=> k1 of 
            Lt -> case insert l k v of 
                    !nl -> case 1 + max (Tree.height nl) (Tree.height r) of 
                        !ns -> Tree.rebalance (Tree.Node ns nl r k1 v1)
            Eq -> Tree.Node s l r k v
            Gt -> case insert r k v of 
                    !nr -> case 1 + max (Tree.height l) (Tree.height nr) of
                        !ns -> Tree.rebalance (Tree.Node ns l nr k1 v1)
    insert nil k v = Tree.Node 1 Tree.Nil Tree.Nil k v
    update t k v = insert t k v
    delete (x@Tree.Node _ Tree.Nil Tree.Nil k1  _) k = if k == k1 then Tree.Nil else x
    delete   (Tree.Node _ l   Tree.Nil k1 v1) k = if k == k1 then l else
        let
            nl = delete l k
            s' = 1 + Tree.height nl
        in Tree.rebalance (Tree.Node s' nl Tree.Nil k1 v1)
    delete (Tree.Node _ Tree.Nil r   k1 v1) k = if k == k1 then r else
        let
            nr = delete r k
            s' = 1 + Tree.height nr
        in Tree.rebalance (Tree.Node s' Tree.Nil nr k1 v1)
    delete (Tree.Node s l r k1 v1) k =
        case k <=> k1 of
            Lt -> let
                    nl = delete l k
                    ns = 1 + max (Tree.height nl) (Tree.height r)
                in Tree.rebalance (Tree.Node ns nl r k1 v1)
            Gt -> let
                    nr = delete r k
                    ns = 1 + max (Tree.height l) (Tree.height nr)
                in Tree.rebalance (Tree.Node ns l nr k1 v1)
            Eq -> case Tree.leftmost r of
                Tree.Node ls _ _ lk lv -> let    -- r may not be Nil here, see above
                        nr = delete r lk
                        ns = 1 + max (Tree.height l) (Tree.height nr)
                    in Tree.rebalance (Tree.Node ns l nr lk lv)
                Tree.Nil -> error "cannot happen"
    delete nil k = nil
    
    -- lookup    :: forall value key . Ord key => Tree key value -> key -> Maybe value;
    lookup (Tree.Node _ l r !k1 v) !k =
                    case k <=> k1 of {
                        Lt -> lookup l k;
                        Gt -> lookup r k;
                        Eq -> Just v;
                    };
    lookup nil _ = Nothing;
         

    fromList = Tree.insertList Tree.Nil
    
    each t = kv t [] where
        kv (Tree.Node _ l r key v) acc = (key,v) : kv l (kv r acc)
        kv nil acc = acc
    
    keys t = kv t [] where
        kv (Tree.Node _ l r key v) acc = key : kv l (kv r acc)
        kv nil acc = acc

    values t = kv t [] where
        kv (Tree.Node _ l r key v) acc = v : kv l (kv r acc)
        kv nil acc = acc

type TreeSet a  = Tree a ()

including s o = Tree.insert s o ()
contains  s o
    | Nothing <- Tree.lookup s o = false
    | otherwise = true;

fromKeys = fold ins empty where ins t k = insert t k ()
union s1 = Tree.insertList s1 . each
intersection s1 = fromKeys . filter (s1 `contains`) . keys 
diff s1 s2 = (fromKeys . filter (not . (s2 `contains`)) . keys) s1
            
import frege.lib.QuickCheck

instance Arbitrary (Ord k, Arbitrary k, Arbitrary v) => (Tree k v) where
    coarbitrary Tree.Nil = variant 0
    coarbitrary (Tree.Node _ l r k v) 
        = variant 1 . l.coarbitrary . r.coarbitrary . k.coarbitrary . v.coarbitrary 
    arbitrary :: (Ord k, Arbitrary k, Arbitrary v) => Gen (Tree k v)
    arbitrary   =  liftM Tree.fromList arbitrary

aTree = arbitrary :: Gen (Tree Int String)
aList = arbitrary :: Gen [(Int, String)]

--- The empty tree is 'Nil'
p_emptyIsNil = property (nil empty) 
    where 
        nil Tree.Nil = true
        nil _        = false

--- An AVL tree is balanced so that the height of the left and right subtree differ by at most 1
p_balance = forAll aTree (\t -> abs t.balance < 2)

--- The height of a tree is 1 more than the maximum of the heights of its subtrees
p_height = forAll aTree (\t ->
    null t && t.height == 0 || t.height == 1 + max t.left.height t.right.height)

--- After insertion, a lookup with the same key yields the inserted value        
p_insert = forAll aTree (\t -> 
            forAll Int.arbitrary (\k ->
                forAll String.arbitrary (\v ->
                    lookup (insert t k v) k == Just v)))

--- After deletion of a key, lookup results in Nothing
p_delete = forAll aTree (\t ->
            not (null t) ==> forAll (elements (keys t)) (\k ->
                lookup (delete t k) k == Nothing))

--- After deletion of all keys, a tree is empty
p_deleteAll = forAll aTree (\t ->
    null (fold delete t (keys t)))
    
{-- 
    A tree constructed from a list has only key value pairs that are elements of that list,
    and it has a an entry for every key of the list.
    -}
p_list = forAll aList (\xs ->
    let ys = each (Tree.fromList xs)
        eby = elemBy (using fst) 
    in all (`elem` xs) ys && all (`eby` ys) xs) 

--- Tree.insertList (Tree.insertList Nil xs) ys == Tree.insertList Nil (xs ++ ys)
p_insertList = forAll aList (\ys ->
                forAll aList (\xs ->
        let ta = Tree.insertList (Tree.insertList empty xs) ys 
            tb = Tree.insertList empty (xs ++ ys)
        in each ta == each tb))
                                                                           