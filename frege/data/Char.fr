--- Haskell compatibility
module Data.Char where

import frege.Prelude hiding (ord, chr)

private type C = Char

--- The general categories for unicode characters and code points.
data GeneralCategory = UNASSIGNED | UPPERCASE_LETTER | LOWERCASE_LETTER
                        | TITLECASE_LETTER | MODIFIER_LETTER | OTHER_LETTER
                        | NON_SPACING_MARK | ENCLOSING_MARK | COMBINING_SPACING_MARK
                        | DECIMAL_DIGIT_NUMBER | LETTER_NUMBER | OTHER_NUMBER
                        | SPACE_SEPARATOR | LINE_SEPARATOR | PARAGRAPH_SEPARATOR
                        | CONTROL | FORMAT | CATEGORY17 | PRIVATE_USE | SURROGATE
                        | DASH_PUNCTUATION | START_PUNCTUATION | END_PUNCTUATION
                        | CONNECTOR_PUNCTUATION | OTHER_PUNCTUATION
                        | MATH_SYMBOL | CURRENCY_SYMBOL | MODIFIER_SYMBOL
                        | OTHER_SYMBOL 
                        | INITIAL_QUOTE_PUNCTUATION | FINAL_QUOTE_PUNCTUATION

--- return the general category of a 'Char'
generalCategory :: Char -> GeneralCategory
generalCategory ch
    | n >= (UNASSIGNED).ord, n <= (FINAL_QUOTE_PUNCTUATION).ord = from n
    | otherwise = UNASSIGNED 
    where n = C.getType ch

derive Enum     GeneralCategory
derive Bounded  GeneralCategory
derive Show     GeneralCategory

protected ord = C.ord
protected chr = C.from
isLower = C.isLowerCase
toLower = C.toLowerCase
isUpper = C.isUpperCase
isDigit = C.isDigit
isSpace = C.isWhitespace
isControl = C.isISOControl
isAlpha = C.isLetter
isAlphaNum = C.isLetterOrDigit

--- Check if a character is printable.
--- True for  a defined characte that is neither a surrogate character nor a control character.  
isPrint ∷ Char → Bool
isPrint c = c.isDefined && not c.isSurrogate && not (isControl c)  