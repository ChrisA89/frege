--- Haskell compatibility
module Data.Char where

import frege.Prelude hiding (ord, chr)

private type C = Char

--- The general categories for unicode characters and code points.
data GeneralCategory = UNASSIGNED | UPPERCASE_LETTER | LOWERCASE_LETTER
                        | TITLECASE_LETTER | MODIFIER_LETTER | OTHER_LETTER
                        | NON_SPACING_MARK | ENCLOSING_MARK | COMBINING_SPACING_MARK
                        | DECIMAL_DIGIT_NUMBER | LETTER_NUMBER | OTHER_NUMBER
                        | SPACE_SEPARATOR | LINE_SEPARATOR | PARAGRAPH_SEPARATOR
                        | CONTROL | FORMAT | CATEGORY17 | PRIVATE_USE | SURROGATE
                        | DASH_PUNCTUATION | START_PUNCTUATION | END_PUNCTUATION
                        | CONNECTOR_PUNCTUATION | OTHER_PUNCTUATION
                        | MATH_SYMBOL | CURRENCY_SYMBOL | MODIFIER_SYMBOL
                        | OTHER_SYMBOL 
                        | INITIAL_QUOTE_PUNCTUATION | FINAL_QUOTE_PUNCTUATION

--- return the general category of a 'Char'
generalCategory :: Char -> GeneralCategory
generalCategory ch
    | n >= (UNASSIGNED).ord, n <= (FINAL_QUOTE_PUNCTUATION).ord = from n
    | otherwise = UNASSIGNED 
    where n = C.getType ch

derive Enum         GeneralCategory
derive Bounded      GeneralCategory
derive Show         GeneralCategory
derive ArrayElement GeneralCategory

--- The ordinal value of a 'Char'
protected ord = C.ord

--- The character with the given ordinal value
--- The argument must be in the range  'Char.minBound' .. 'Char.maxBound', inclusive.
protected chr = C.from

--- True if the character is a lower case letter
isLower = C.isLowerCase

--- Returns the lowercase letter if the argument is a letter, otherwise the argument unchanged.
toLower = C.toLowerCase

--- True if the character argument is an uppercase letter.
isUpper = C.isUpperCase

--- Convert the argument to uppercase, or return it unchanged if it is not a letter.
toUpper = C.toUpperCase

--- True if the argument is a digit.
isDigit = C.isDigit

--- True if the argument is a space character. 
--- Note that certain characters with Unicode category 'CONTROL' count as space.
isSpace = C.isWhitespace

--- True if the argument is a control character.
isControl c = generalCategory c == CONTROL

--- True if the arguemnt is a letter.
isAlpha = C.isLetter

--- True if the argument is a letter or a digit.
isAlphaNum = C.isLetterOrDigit

--- True if the argument is in the range \'0\'..\'7\'
isOctDigit c = c >= '0' && c <= '7'

--- True if the argument is a digit, in the range \'a\'..\'f\' or  in the range \'A\'..\'F\'
isHexDigit c = isDigit c || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F'

--- True if the 'generalCategory' of the argument is 'NON_SPACING_MARK', 'ENCLOSING_MARK' or 'COMBINING_SPACING_MARK'
isMark c = case generalCategory c of
    NON_SPACING_MARK        →  true
    ENCLOSING_MARK          →  true
    COMBINING_SPACING_MARK  →  true
    _                       →  false



--- Check if a character is printable.
--- True for a defined characte that is neither a surrogate character nor a control character.  
isPrint ∷ Char → Bool
isPrint c = c.isDefined && not c.isSurrogate && not (isControl c)  