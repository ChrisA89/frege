{--
    A HashMap implementation based on a 
    'https://en.wikipedia.org/wiki/Hash_array_mapped_trie Hash Array Mapped Trie'

    The hash array mapped trie achieves almost hash table-like speed 
    while using memory much more economically. 
    Also, a hash table may have to be periodically resized, 
    an expensive operation, whereas HAMTs grow and shrink dynamically.


-}
module frege.data.HashMap where

import frege.Prelude hiding(Freezable, freeze, thaw)

import Data.Bits
import Data.JSON
import Data.TreeMap(Tree)
import Data.List()

-- General interface of a Hash Map

--- O(1) Create a singleton map
singleton ∷ Eq k ⇒ k → v → HashMap k v
singleton k v = HashMap.KV{hash=hashCode k, key=k, value=v}

--- O(n) Compute the size of the map
size ∷ HashMap k v → Int
size HashMap.KV{}         = 1
size HashMap.CO{list}     = length list
size HashMap.BM{subnodes} = sum (map size (toList subnodes))

--- O(n) Retrieve a list of the values in the map
values :: HashMap k v -> [v]
values = go []
    where
        go vs HashMap.KV{value}    = value:vs
        go vs HashMap.CO{list}     = map snd list ++ vs
        go vs HashMap.BM{subnodes} = fold go vs subnodes.toList 

{-- O(log n)
    > insert k v m
    is a 'HashMap' _h_ such that 
    > lookup k h = Just v
    and lookup for any other key _o_
    > lookup o h = lookup o m  

    Less formally said, _k_ is associated with _v_ in the resulting map, updating
    a previously existing association of _k_ if it exists, while all other associations
    are left untouched.

    In the case of an update, the new value will get forced, see 'insertWith' for details. 
-}
insert k v hm = HashMap.insertWork const k v hm (hashCode k) 0

{-- O(log n)
    > insertWith f k v m
    If _m_ does not contain _k_, this works like 'insert'.
    Otherwise, the existing association of _k_ with some value _v'_ is replaced by
    an association of _k_ with the result of evaluating 
    > f v v'
    in the resulting map. 

    Strict evaluation is necessary to prevent building up of large thunks 
    of the form
    > f3 v3 (f2 v2 (f1 v1 v0))

    Note that
    > insert = insertWith const
    and that this will evaluate the new value in case of an update. If you
    want to prevent this, use

    > replace k v = insert k v . delete k
-} 
insertWith f k v hm = HashMap.insertWork f k v hm (hashCode k) 0


{--
    'HashMap' based on a Hash Mapped Array Trie
    
    A node of the 'HashMap' is either

        - a key/value pair
        - a list of different key/value pairs where the hash code for all keys
        is identical (collisions). In the (hopefully) unlikely case of collisions,
        the performance of the affected keys degrades to list operations. However,
        collision lists should be short, if occuring at all.
        - a bitmapped node with a bitmap of size 32 to indicate
        absence or presence of sub-nodes, followed by an array of up to 32
        nodes.
    
    This implementation of a
    'https://en.wikipedia.org/wiki/Persistent_data_structure persistent' 
    hash array mapped trie uses 32 bit hash values as provided by Java and the
    Frege 'Eq' type class. 

    To find a value, the search starts with the root node.
    If the node is a key/value pair, the node's key is compared to the search key.
    When the keys are equal, the value is returned, otherwise the key is not in the map. 

    If the node is a bitmapped node, the hash code of the lookup key is computed 
    and the presence of the index provided by the last six bits is checked in the bitmap.
    If it is there, the search continues with the corresponding node 
    from the node array, otherwise the key is not in the map.

    It remains the case that the node is a collision list. The searched key's
    hashcode either is the same as the one of the keys in the collision list, 
    in which case the search degrades to a sequential search in that list, or it
    is different, and in the latter case we know that the key is not in the
    map without even touching the list.
    
    Hence, the worst case in searching must do the following: 
    
      - 1 time: compute the hash code of the key
      - 7 times: find the next node through the array. This is in 
        essence computation of an index with bit operations, followed by a
        memory read. The reason this is done at max 7 times is that it consumes
        5 bits of the hash code every time. With 32 bit hash code, we have 6 5-bit
        quantities that can range from 0 to 31, while the last 5-bit quantity has
        only 2 significant bits, the other ones are always zero. The hashmapped nodes
        at the 7th level of the map will consequently have only 4 sub-nodes.
        (Note that this is an intrinsic limit that is 
        determined by the hash code bit size, *not* by the algorithm.
        Should later Java versions choose to provide 'Long' bitcodes, for example,
        this code will still work, just that there would be 13 levels of bitmapped 
        nodes instead of 7.)
      - _n_ times: comparision with the keys in the collision list, where _n_
        is the number of elements of the collision list, or comparision with the
        key of a key/value node (this is equivalent to a collision list of length 1).

    It turns out that - absent hash collisions - lookup will be done in 
    *constant time* with a tiny constant factor. 
    And so will be inserts and deletes, altough with a slightly larger constant 
    factor due to the house-keeping necessary for a persistent data structure. 
    However, even this are in the worst case 7 array copies, where 6 of them may
    be of size 32 and one of size 4. Assuming that the pointers are 4 bytes long, 
    this amounts to copying at most 196*4 bytes of memory. 

    The map can have at most 2^32 non-bitmapped nodes maintained in
    1+32+1024+32768+1048576+33554432+1073741824 bitmapped nodes. 
    Because collision lists can be arbitrary long, 
    the total number of key/value pairs is *not limited*. 

-}

abstract data HashMap k v =
      {-- 
        Singleton node holding a key with a value.
        Also caches the 'hashCode' of the key to avoid
        possibly expensive recomputation.
      -}
      KV {!hash :: Int, !key::k, value :: v }
    | {--
        Collision node, holding a list of key/value tuples
        as well as the 'hashCode' all keys have in common.
        This helps us avoid touching the list when the 
        sought key has a different hash code. 
        
        [Invariant 1] length of 'list' is at least 2.
        [Invariant 2] all keys in 'list' are different.
      -}
      CO {!hash :: Int, !list :: [(k,v)]}
    | {--
        Bitmapped node. It has a bitmap of 32 bits that indicate presence
        or absence of a sub node for a given index which is in the range [0..31],
        and an array of sub nodes. The size of the array is equal to the number
        of 1-bits in the bitmap. An index is mapped to an actual array index
        like so: If the corresponding 'bit' is set in the bitmap, the number
        of less significant 1-bits in the bitmap is counted with 'bitCount' and
        this is then the index in the array. Otherwise there is no 
        sub node for that index.

        [Invariant 1] The length of 'subnodes' equals the number of set bits in 'bitmap'.
        [Invariant 2] There is no null pointer in 'subnodes'.

      -}
      BM {!subnodes :: JArray (HashMap k v), !bitmap :: Int } where

    --- this checks the invariants for a node
    invariants ∷ Eq 𝖐 ⇒ HashMap 𝖐 𝖛 → Bool
    invariants KV{} = true
    invariants CO{list} = coinv list
        where
            coinv [a,b] = fst a != fst b
            coinv (a:xs) = all (!= fst a) (map fst xs) && coinv xs
            coinv _ = false -- less than 2 elements
    invariants BM{bitmap, subnodes} = bitCount bitmap == arrayLength subnodes
                                        && all isJust (toMaybeList subnodes)
                                        && all invariants (toList subnodes)

    --- transform an index into an actual array index
    --- > indexMap bmap nodes inx
    --- _bmap_ is the bitmap
    --- _nodes_ is the number of actual subnodes
    --- _inx_ is a hash code or part of a hash code, whose least significant 5 bits are the index
    --- returns a number in the range 0..nodes, where _nodes_ means "no corresponding node"
    indexMap !bmap !nodes !inx = if bmap .&. b == 0 then nodes
                                else bitCount (bmap .&. (b-1)) 
        where !b = Int.bit (inx .&. 0x1f)


    empty :: HashMap a b
    !empty = BM{subnodes = arrayFromList [], bitmap = 0}

    null BM{bitmap} = bitmap == 0
    null _ = false



    --- _O(n)_ Compute a 3-tuple of
    --- - the number of collision nodes
    --- - the total number of keys that have a collision
    --- - a list of lists of colliding keys
    collisions = go (0,0, [])
        where
            go t KV{} = t
            go t BM{subnodes} = fold go t subnodes.toList
            go (a,b, kss) CO{list} = (a+1; b+length list; map fst list:kss)  


    --- > insertWork f "foo" v node h s
    --- _f_ is the function called as @f newval oldval@ if the key is already in the map
    --- _h_ is the *unshifted* original hash code!
    --- _s_ is the number of bits to shift _h_ to the right for getting an index at this level
    private insertWork ∷ Eq 𝖐 ⇒ (𝖛→𝖛→𝖛) → 𝖐 → 𝖛 → HashMap 𝖐 𝖛 → Int → Int → HashMap 𝖐 𝖛
    private insertWork !f !k v !node !h !s = case node  of
        KV{hash, key, value}
            | hash == h, key == k = case f v value of !v -> node.{value = v} -- update
            | hash == h = CO{hash,list=(k,v)!:(key,value)!:[]}  -- collision
            | otherwise = joinNodes s KV{hash=h, key=k, value=v} node  
        BM{subnodes, bitmap}
            | bitmap == 0 = KV{hash=h, key=k, value=v}      -- replace empty
            | otherwise   = case indexMap bitmap (arrayLength subnodes) vi of
                i | i < arrayLength subnodes = node.{subnodes = cloneSetElemAt i sub subnodes} 
                  | otherwise = BM{bitmap = nbm, subnodes = insertAt j nkv subnodes}
                  where
                    sub   = insertWork f k v (elemAt subnodes i) h (s+5)  -- recurse
                    !nbit = Int.bit vi
                    !nbm  = bitmap .|. nbit
                    !j    = bitCount (nbm .&. (nbit-1))
                    nkv   = KV{hash=h, key=k, value=v}
            where
                !vi   = (h `ushiftR` s) .&. 0x1F  -- virtual index
        CO{hash, list}
            | hash == h = case List.find (\(a,_) -> a == k) list of
                Just (k', v') -> case rFilterNEQ k [] list of
                                    !rev -> node.{list = (k; f v v') !: rev}
                nothing       -> node.{list = (k,v) !: list}        -- very bad, collision list grows
            | otherwise = joinNodes s KV{hash=h, key=k, value=v} node 


    --- join two non bitmapped nodes with *different* hash codes into a BM node
    --- works for KV/KV, KV/CO, CO/KV and CO/CO
    private joinNodes !s !n1 !n2
        -- different hashes that map to same index at this level
        -- try next level, there must be a difference
        | h1 == h2  = BM{bitmap, subnodes = mkSingleton (joinNodes (s+5) n1 n2)}
        | h1 <  h2  = BM{bitmap, subnodes = mkPair n1 n2}
        | otherwise = BM{bitmap, subnodes = mkPair n2 n1}  
        where
            !h1 = (n1.hash `ushiftR` s) .&. 0x1F
            !h2 = (n2.hash `ushiftR` s) .&. 0x1F
            !bitmap = Int.bit h1 .|. Int.bit h2

    {--
        Reverse list while filtering out some key.

        Consider a collision list @[("foo", n), ("...", m)]@ in a word counting application.
        Assume that "foo" occurs many times, while "..." ocurs just once.
        So if we would re-compute the collision list with
        > ("foo", n+1) : filter (!="foo")
        we would get
        > ("foo", n+1) : ("...", m) : filter (!="foo") []
        because 'filter' is lazy in the tail. The next time "foo" occurs, we would get
        > ("foo", n+1+1) : ("...", m) : filter (!="foo") (filter (!="foo") [])
        thus building up thunks. In the end, this breaks down on operations like
        'size', 'keys', 'values', 'each' ... etc. because the wrapped up filters will have
        to get evaluated, and a stack overflow may happen.
    -}
    rFilterNEQ !k !acc (t:ts)
        | k == fst t = rFilterNEQ k acc ts
        | otherwise  = rFilterNEQ k (t:acc) ts
    rFilterNEQ _ acc [] = acc


instance ToJSON (ToJSON k, ToJSON v) ⇒ (HashMap k v) where
    toJSON node = case node  of
        HashMap.KV{hash, key, value} -> Value.Object (JSON.Object.Struct t)
            where t = Tree.empty.insert "KV" (toJSON (hash, key, value))
        HashMap.CO{hash, list} -> Value.Object (JSON.Object.Struct t)
            where t = Tree.empty.insert "CO" (toJSON (hash, list))
        HashMap.BM{subnodes, bitmap} -> Value.Object (JSON.Object.Struct t)
            where t = Tree.empty.insert "BM" (toJSON (subnodes, bitmap))

 
-- Instances

derive ArrayElement HashMap a b

instance Show (ToJSON k, ToJSON v) ⇒ HashMap k v where
    show hm = show (toJSON hm)

-- Array primitives

native module where {
    // clone and set element
    private static final THashMap[] cSEA(int inx, THashMap node, THashMap[] array) {
        THashMap[] neu = array.clone();
        neu[inx] = node;
        return neu;
    }
    
    // insert element in a copy that is one element greater
    private static final THashMap[] iA(int inx, THashMap node, THashMap[] array) {
        final int sz   = array.length;
        THashMap[] neu = java.util.Arrays.copyOf(array, 1+sz);
        if (inx < sz)
            java.lang.System.arraycopy(array, inx, neu, inx+1, sz-inx);
        neu[inx] = node;
        return neu;
    }

    // make a singleton array
    private static final THashMap[] mkS(THashMap node) {
        return new THashMap[] { node };
    }
    
    // make an  array with 2 elements
    private static final THashMap[] mkP(THashMap node1, THashMap node2) {
        return new THashMap[] { node1, node2 };
    }
}

{--
    Clone (duplicate) an array, and set a single element to a new value
-}
pure native cloneSetElemAt HashMap.cSEA ∷ Int → HashMap k v → JArray (HashMap k v) → JArray (HashMap k v)
-- cloneSetElemAt ∷ Int → HashMap k v → JArray (HashMap k v) → JArray (HashMap k v)
-- cloneSetElemAt !inx !node !array = ST.run do
--     new ← thaw (mutable array)
--     setElemAt new inx node
--     freeze new

{--
    Insert an element in a copy of an arry that is one element greater.
-}
pure native insertAt HashMap.iA ∷ Int → HashMap k v → JArray (HashMap k v) → JArray (HashMap k v)
-- insertAt ∷ Int → HashMap k v → JArray (HashMap k v) → JArray (HashMap k v)
-- insertAt !inx !node !array = ST.run do
--         new ← copyOf (mutable array) (1+sz)
--         if inx == sz 
--             then do -- append at end
--                 setElemAt new sz node
--             else do
--                 -- old i0, i1, i2, sz == 3
--                 -- new i0, n, i1, i2
--                 -- shift elements from j on one to the right
--                 arraycopy (mutable array) inx new (inx+1) (sz-inx)
--                 setElemAt new inx node
--         freeze new
--     where
--         !sz = arrayLength array

{--
    Make a 1 element array
-}
pure native mkSingleton HashMap.mkS ∷ HashMap k v → JArray (HashMap k v)
-- mkSingleton ∷ HashMap k v → JArray (HashMap k v)
-- mkSingleton !node = ST.run do
--     new ← newArray 1
--     setElemAt new 0 node
--     freeze new

{--
    Make a 2 element array
-}
pure native mkPair HashMap.mkP ∷ HashMap k v → HashMap k v → JArray (HashMap k v)
-- mkPair ∷ HashMap k v → HashMap k v → JArray (HashMap k v)
-- mkPair !node1 !node2 = ST.run do
--     new ← newArray 2
--     setElemAt new 0 node1
--     setElemAt new 1 node2
--     freeze new

--- clone an array
private native thaw clone ∷ ArrayOf s (HashMap k v) -> ST s (ArrayOf s (HashMap k v))

--- freeze an array
private freeze = readonly id

--- use the native array.length to get the length
private pure native arrayLength ".length" ∷ JArray (HashMap k v) → Int 


--- Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length.
private native copyOf java.util.Arrays.copyOf 
        :: ArrayOf s (HashMap k v) -> Int -> ST s (ArrayOf s (HashMap k v)) 

{--
    > arraycopy(Object src, int srcPos, Object dest, int destPos, int length)

    Copies an array from the specified source array, 
    beginning at the specified position, to the specified position of the destination array.
    
    Can be used to do overlapping copies.
-}
private native arraycopy java.lang.System.arraycopy 
    ∷ ArrayOf s (HashMap k v) -> Int -> ArrayOf s (HashMap k v) -> Int -> Int -> ST s ()
 