// enable UTF-8: «««««••••••••••••»»»»»»
package frege.IO;

/*
 * $Revision$
 * $Header: E:/iwcvs/fc3/frege/IO.fr,v 3.15 2010/11/07 19:39:20 ingo Exp $
 * $Log: IO.fr,v $
 * Revision 3.15  2010/11/07 19:39:20  ingo
 * - read/write UTF8 data by default
 * - new function Map.each :: Map k v -> [(k,v)]
 *
 * Revision 3.14  2010/10/25 19:51:49  ingo
 * - make v3 parseable
 *
 * Revision 3.13  2009/05/15 17:30:32  iw
 * - exit can have any type
 *
 * Revision 3.12  2009/05/09 07:30:38  iw
 * - make the InputStreamReader from both FileInputStream and InputStream
 *
 * Revision 3.11  2009/05/03 21:50:04  iw
 * - add method loadClass to URLClassloader
 *
 * Revision 3.10  2009/04/30 13:50:02  iw
 * -intial version
 *
 * Revision 2.8  2009/03/19 21:55:07  iw
 * - elimination of class Display
 * - doc changes
 *
 * Revision 2.7  2008/05/19 22:51:45  iw
 * - implemented dependent types, !type is now a syntax error
 * - made Symbols.fr almost warning - free
 *
 * Revision 2.6  2008/05/10 09:47:43  iw
 * - corrected bug in InputSTreamReader
 *
 * Revision 2.5  2008/04/23 09:27:04  iw
 * - new functions for File, URL, etc
 *
 * Revision 2.4  2008/04/20 07:22:29  iw
 * - more detailed File type
 *
 * Revision 2.3  2007/10/02 19:58:21  iw
 * - smaller changes
 *
 * Revision 2.2  2007/10/01 16:21:04  iw
 * - methods for creating encoded input and output streams.
 *
 * Revision 2.1  2007/09/23 12:12:44  iw
 * - initila revision for self hosting derived from frege-2-prefix
 *
 * Revision 1.9  2007/06/01 19:51:21  iw
 * - new methods for File
 *
 * Revision 1.8  2006/12/26 22:31:34  iw
 * - some modifications to make new compiler happy
 *
 * Revision 1.7  2006/12/14 21:51:04  iw
 * - added PrintWriter
 *
 * Revision 1.6  2006/10/25 18:03:51  iw
 * - move Exception type to Prelude
 *
 * Revision 1.5  2006/10/21 16:30:04  iw
 * - array support with data A dvars = native [] type;
 * - let bound or global variables may not be quantified. Thus, there is no easy way to have a global Var a or Var [a], or similiar.
 *
 * Revision 1.4  2006/10/11 14:22:42  iw
 * - added System.currentTimeMillis()
 *
 * Revision 1.3  2006/08/06 14:06:03  iw
 * - new class syntax
 * - no µtil class, all auxiliary functions now in frege.Run
 *
 * Revision 1.2  2006/08/02 17:42:05  iw
 * BufferedReader Method doesn't use class methods
 *
 * Revision 1.1  2006/05/21 17:56:56  iw
 * CVS on memorystick
 *
 * Revision 2.0  2006/05/20 14:26:16  iw
 * initial revision
 *
 */

// common things

infixl 5 `<<` ;

class Closeable this where {
    close :: this ->  IO (Exception ());
};

data File = native java.io.File where
    protected native new           :: String -> File
    protected native newFS     new :: File -> String -> File
    protected native getParentFile :: File -> (Maybe File)
    protected native toURI         :: File -> URI
    protected native getPath       :: File -> String
    protected native isAbsolute    :: File -> Bool
    protected native separator        java.io.File.separator
                         :: String
    protected native pathSeparator    java.io.File.pathSeparator
                         :: String
    native canRead       :: File -> IO Bool
    native canWrite      :: File -> IO Bool
    native isDirectory   :: File -> IO Bool
    native isFile        :: File -> IO Bool
    native exists        :: File -> IO Bool
    native mkdirs        :: File -> IO Bool
    native lastModified  :: File -> IO Long

    toURL (f::File) = case f.toURI.toURL of
            Right url -> url
            Left exc  -> throw exc
    native list          :: File -> IO (Maybe StringArr)
;

data URI = native java.net.URI where {
    protected native new                        :: String -> Exception URI;
    protected native create java.net.URI.create :: String -> URI;
    protected native toURL                      :: URI -> Exception URL;
    protected native toString                   :: URI -> String;
    protected native toASCIIString              :: URI -> String;
    protected native relativize                 :: URI -> URI -> URI;
};

data URL = native java.net.URL where
        native openStream   :: URL -> IO (Exception InputStream)
        protected native toString     :: URL -> String
    ;
data URLArr = native "java.net.URL[]" where
        protected native getAt  "frege.Run.Arr.vaget" :: URLArr -> Int -> Maybe URL
        protected native setAt  "frege.Run.Arr.vaset" :: URLArr -> Int -> URL -> IO ()
        protected native length "frege.Run.Arr.valen" :: URLArr -> Int
        protected native new    "frege.Run.Arr.vanewURL" :: Int -> URLArr
        fromList [] = URLArr.new 0
        fromList is =
            let
                ilen = is.length
                iarr = URLArr.new ilen
                loop (iarr::URLArr) j (x:xs) = do iarr.[j <- x]; loop iarr (j+1) xs
                loop (iarr::URLArr) _ []     = Prelude.IO.return iarr
            in Prelude.IO.performUnsafe $ loop iarr 0 is
    ;

instance Show File where {show = File.getPath};

data CharBuffer = native java.nio.CharBuffer;

// output
class Appendable app where
    append  :: app -> String -> IO app
;

// (<<)    :: IO Appendable:app -> Show:d -> IO Appendable:app;
(ioa) << (b) = do
            a <- ioa
            append a (display b)
;

data PrintStream = native java.io.PrintStream where {
    native println :: PrintStream -> IO ();
};

data OutputStreamWriter = native java.io.OutputStreamWriter where {
    native new      :: PrintStream -> String -> IO (Exception OutputStreamWriter);
    native close    :: OutputStreamWriter -> IO (Exception ());
    pure native toWriter "(java.io.Writer)" :: OutputStreamWriter -> Writer;
};

data Writer = native java.io.Writer;

data PrintWriter = native java.io.PrintWriter where {
    native println  :: PrintWriter -> IO ();
    native open new :: String -> IO (Exception PrintWriter);
    native new      :: File   -> IO (Exception PrintWriter);
    native encoded new :: File -> String -> IO (Exception PrintWriter);
    native fromWriter   new    :: Writer -> IO PrintWriter;
    native fromWriterAf new    :: Writer -> Bool -> IO PrintWriter;
    native close    :: PrintWriter -> IO (Exception ());
    pure native toWriter "(java.io.Writer)" :: PrintWriter -> Writer;
};

data StringWriter = native java.io.StringWriter where {
    native append :: StringWriter -> String -> IO StringWriter;
    println  :: StringWriter -> IO ();
    println sw = do { sw.append "\n"; void };
    native new      :: () -> IO StringWriter;
    native close    :: StringWriter -> IO (Exception ());
    native toString :: StringWriter -> IO String;
};

instance Closeable PrintWriter;
instance Closeable StringWriter;

data StringBuilder = native java.lang.StringBuilder where {
    protected native new      :: String -> IO StringBuilder;
    protected native toString :: StringBuilder -> IO String;
};

instance Appendable PrintStream where {
    native append :: PrintStream -> String -> IO PrintStream;
};

instance Appendable PrintWriter where {
    native append :: PrintWriter -> String -> IO PrintWriter;
};

// instance Appendable OutputStreamWriter where {
//     native append :: OutputStreamWriter -> String -> IO OutputStreamWriter;
// };

instance Appendable StringBuilder where {
    native append :: StringBuilder -> String -> IO StringBuilder;
};

instance Appendable StringWriter;

// instance Show StringBuilder where {
//     show = StringBuilder.toString;
// };


native stdout  java.lang.System.out  :: IO PrintStream;
native stderr  java.lang.System.err  :: IO PrintStream;

// Input

native stdin  "java.lang.System.in"  :: IO InputStream;

class Readable a where {
    readcb :: a -> CharBuffer -> IO (Exception Int);
};

class Reader Closeable:a where {
    read :: a -> IO (Exception Int);
};

class LineReader Reader:a where {
    readLine :: a -> IO (Exception (Maybe String));
    getlines :: a -> IO [String];
};

data InputStream = native java.io.InputStream;
data FileInputStream = native java.io.FileInputStream where
    native new      :: File   -> IO (Exception FileInputStream)
    native open new :: String -> IO (Exception FileInputStream)
    //* downcast from 'FileInputStream' to 'InputStream'
    protected native inputStream "(java.io.InputStream)" :: FileInputStream -> InputStream
;

data InputStreamReader = native java.io.InputStreamReader where
    native close :: InputStreamReader -> IO (Exception ())
    native read  :: InputStreamReader -> IO (Exception Int)
    native new   :: InputStream -> IO (InputStreamReader)
    native encoded new :: InputStream -> String -> IO (Exception InputStreamReader)
  ;

data FileReader = native java.io.FileReader where
    native close :: FileReader -> IO (Exception ())
    native read  :: FileReader -> IO (Exception Int)
    native new   :: File -> IO (Exception FileReader)
    native open new :: String -> IO (Exception FileReader)
;

data StringReader = native java.io.StringReader where
    native close :: StringReader -> IO (Exception ())
    native read  :: StringReader -> IO (Exception Int)
    protected native new   :: String -> StringReader
;


instance Reader     InputStreamReader;
instance Reader     FileReader;
instance Reader     StringReader;

data BufferedReader = native java.io.BufferedReader where
    native close :: BufferedReader -> IO (Exception ())
    native read :: BufferedReader -> IO (Exception Int)
    native readLine :: BufferedReader -> IO (Exception (Maybe String))
    native new :: FileReader -> IO BufferedReader
    native fromISR new :: InputStreamReader -> IO BufferedReader
    open s = do
                fr <- FileReader.open s
                case fr of
                    Left msg -> Prelude.IO.return (Left msg)
                    Right f  -> do
                                    br <- new f
                                    Prelude.IO.return (Right br)
    native fromSR new :: StringReader -> IO BufferedReader
    from s = fromSR (StringReader.new s);
    // getlines :: BufferedReader -> IO [String];
    getlines (br::BufferedReader) = loop [] (repeat br.readLine) where
        loop acc (a:as) = do
            xms <- a
            case xms of
                Right (Just s) ->  loop (s:acc) as
                _              ->  Prelude.IO.return (reverse acc)
        loop acc [] = error "cannot happen because (repeat br.readLine) is infinite"
;

instance LineReader BufferedReader;

// Class Loading & Resources
data URLClassLoader = native java.net.URLClassLoader where
        protected native new   :: URLArr -> Exception URLClassLoader
        native loadClass       :: URLClassLoader -> String -> IO (Exception Class)
        native getResource     :: URLClassLoader -> String -> IO (Maybe URL)
        native findResource    :: URLClassLoader -> String -> IO (Maybe URL)
    ;
native getSystemResource  java.lang.ClassLoader.getSystemResource :: String -> IO (Maybe URL);


// System

protected native getenv       System.getenv            :: String -> Maybe String;
protected native getProperty  System.getProperty       :: String -> Maybe String;
native exit                   frege.Run.exitFrege      :: Int -> IO a;
native currentTimeMillis      System.currentTimeMillis :: () -> IO Long;
