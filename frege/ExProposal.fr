--- Proposal for exception handling
module frege.ExProposal where

import Data.List

data Cls a = pure native java.lang.Class

data Throwable = pure native java.lang.Throwable

-- some exceptions to play with

data NFE   = pure native java.lang.NumberFormatException where
        pure native exClass "java.lang.NumberFormatException.class" :: Cls NFE 

data EXC   = pure native java.lang.Exception where
    pure native exClass "java.lang.Exception.class" :: Cls EXC

data DIV   = pure native java.lang.ArithmeticException where
    pure native exClass "java.lang.ArithmeticException.class" :: Cls DIV

-- This allows us to get the class object of the
-- exception some handler is handling
-- we could make that derivable                                
class Exceptional e where
    exClass  :: Cls e
    --- return the class object associated with an exception handler
    handledBy :: (e -> IO b) -> Cls e
    handledBy _ = exClass
    
instance Exceptional NFE
instance Exceptional EXC
instance Exceptional DIV

native doCatch frege.runtime.WrappedCheckedException.doCatch 
                :: Cls x -> IO a -> (b -> IO a) -> IO a

catch action handler = doCatch (handledBy handler) action handler


infixl 2 `catch`

main args = 
        -- Unfortunately, for strict funs like println we can't write 
        --     println (expression-that-fails)
        -- because then the expression is evaluated
        -- during the construction of the IO value
        -- and hence the expression will be thrown
        -- before the doCatch is entered.
        return (map ((1000 `div` ) . String.atoi) args) >>= println
            `catch` badnum
            `catch` zerodiv
            `catch` other
  where
    badnum :: NFE -> IO ()
    badnum nfe = do
        print  "Handler for NumberFormatExceptions, "
        println ("catched: " ++ JException.show nfe)
        case regforce "*" of !urks -> return ()  -- throw another exception in the handler
    zerodiv :: DIV -> IO ()
    zerodiv div = do
        print "Looks like we had a 0 in the arguments, "
        println ("catched: " ++ JException.show div)
    other :: EXC -> IO ()
    other ex = do
        print "Handler for other exceptions, "                  
        println ("catched: " ++ JException.show ex)
        
        
        
        
        