{--
    [usgae] java -cp fregec.jar frege.tools.Quick [-v] [-n ddd] module ...
    
    Looks up quick check predicates in the given modules and runs the tests,
    each test repeats ddd times.
-}

module frege.tools.Quick where

import frege.java.lang.Reflect
import frege.lib.QuickCheck (check, quick, verbose)

--- functionality relies on the absolute name of type 'QuickCheck.Property'
propName = TName{pack=Pack.new "frege.lib.QuickCheck", base="Property"}

import frege.compiler.Main (standardOptions)
import frege.compiler.Import (importClass)
import frege.compiler.Data hiding (Options)
import frege.List (values)

data Options = Opt { verbose :: Bool, ntimes :: Int }

defaultOptions = Opt { verbose = false, ntimes = 100 }

main [] = do
    mapM_ stderr.println [
        "usage: java -cp fregec.jar frege.tools.Quick [-v] [-n num] module ...",
        "",
        "       -v      verbose checks",
        "       -n num  each check will be running num times, default 100",
        ""
        ]
    
    
main args = do
    (options, modules) <- getOpt defaultOptions args
    results <- mapM (checkModule options) modules
    unless (and results) (System.exit 1) 

getOpt :: Options -> [String] -> IO (Options, [String])
getOpt options [] = return (options, [])   
getOpt options ("-v":xs) = getOpt options.{verbose=true} xs
getOpt options ("-n":num:xs) = 
    case num.int of
        Left _ -> do
            main []
            stderr.println("number expected instead of `" ++ num ++ "`")
            getOpt options xs
        Right n -> getOpt options.{ntimes = n} xs
getOpt options (xss@´^-´ : xs) = do
    main []
    stderr.println("unknown flag `" ++ head xss ++ "`, ignored.")
    getOpt options xs
getOpt options xs = return (options, xs) 


--- import a package and extract all toplevel properties
getProps pack = do
    let p = Pack.new pack
    importClass Position.null p
    g <- getST
    case g.packages.lookup p of
        Nothing -> return []
        Just env -> return [ sym.name.base |
                sym@SymV{} <- values env,
                ForAll _ RhoTau{context=[], tau} <- Just sym.typ,
                TCon{name} <- Just tau,
                name == propName 
            ]
    


checkModule :: Options -> String -> IO Bool 
checkModule opts pack = do
    g <- standardOptions
    let (res, newg)  = State.run (getProps pack) g
    println ("Package " ++ pack ++ " has the following quickcheck properties: "
        ++ joined ", " res)
    return true