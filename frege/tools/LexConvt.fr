-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{--
    Copyright © 2011, Ingo Wechsung
 *
    All rights reserved.
 *
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

    -   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    -   Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.
 *
    *THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.*
-}

{--
    Perform source code transformations to conform to updated lexical syntax:

    - Haskell comments \/\*(\*) -> {\-(-), \/\/(\/) --> --(-)
 -}

package frege.tools.LexConvt where       -- first comment

import Java.IO

data Stat = Normal | Esc Stat | InChar | InString | InPat
    | Slash1 Stat   --- saw '/' in 'Normal' or 'Block'
    | Slash2        --- saw '/' in 'Slash1 Normal'
    | SkipLn        --- detected line comment
    | StarA  Stat   --- detected /* from Normal or Block
    | Block Stat    --- in Block comment, previous is carried
    | StarB Stat    --- in Block, detected *
derive Show Stat

dispatch Normal app ch = normal app ch
dispatch InChar app ch = inchar app ch
dispatch InString app ch = instring app ch
dispatch InPat app ch = inpat app ch
dispatch (Esc prev) app ch = escaped prev app ch
dispatch (Slash1 stat) app ch = slash1 stat app ch
dispatch Slash2 app ch = slash2 app ch
dispatch SkipLn app ch = skipln app ch
dispatch (StarA stat) app ch = stara stat app ch
dispatch (Block stat) app ch = block stat app ch
dispatch (StarB stat) app ch = starb stat app ch

append :: MutIO PrintWriter -> String -> IO ()
append = PrintWriter.print

normal app '\\' = return (Esc Normal)
normal app '\'' = do
    append app "'"
    return InChar
normal app '"' = do  -- "
    append app "\""
    return InString
normal app '#' = do   -- #
    append app "#"
    return InPat
normal app '/' = return (Slash1 Normal)
normal app ch   = do
    append app (display ch)
    return Normal

slash1 Normal app '/' = return Slash2
slash1 prev   app '*' = return (StarA prev)
slash1 prev app ch  = do
    append app "/"
    append app (display ch)
    return prev

slash2 app '/' = append app "---" >> return SkipLn
slash2 app ch  = append app "--" >> append app (display ch) >> return SkipLn

skipln app '\n' = append app "\n" >> return Normal
skipln app ch   = append app (display ch) >> return SkipLn

stara prev app '*' = append app "{--" >> return (Block prev)
stara prev app ch  = append app "{-" >> append app (display ch) >> return (Block prev)

block prev app '*' = return (StarB prev)
block prev app '/' = return (Slash1 (Block prev))
block prev app ch  = append app (display ch) >> return (Block prev)

starb prev app '/' = append app "-}" >> return prev
starb prev app ch  = append app "*"  >> append app (display ch) >> return (Block prev)


escaped s app ch = do
    append app "\\"
    append app (display ch)
    return s

inchar app '\'' = do
    append app "'"
    return Normal
inchar app '\\' = return (Esc InChar)
inchar app ch   = append app (display ch) >> return InChar


instring app '"' = do
    append app "\""
    return Normal
instring app '\\' = return (Esc InString)
instring app ch   = append app (Char.display ch) >> return InString

inpat app '#' = do
    append app "#"
    return Normal
inpat app '\\' = return (Esc InPat)
inpat app ch   = append app (Char.display ch) >> return InPat

foo = #abcd\b#

convert from to = cvt from to Normal where
    cvt from to state = do
        i <- Reader.read from
        if i < 0 then return state
        else do
            let ch = Char.from i
            ns <- dispatch state to ch
            cvt from to ns

-- ---------------------- code to open files and make printers ---------------
openSrc s = utf8Reader s

stdoutPrinter = stdPrinter System.out
stdPrinter out = do
    out <- out
    osw <- OutputStreamWriter.new out "UTF-8"
    PrintWriter.new osw
  
-- ----------------------------- main -------------------------
main args = do
    results <- mapM process args
    if all id results then return () else System.exit 1

process filename = do
    reader <- openSrc filename
    let target = filename ++ ".cvt"
    let bakfile = filename ++ ".bak"
    ofile <- File.new target
    bfile <- File.new bakfile
    file  <- File.new filename
    writer <- PrintWriter.new ofile "UTF-8"
    endstate <- convert reader writer
    stderr.println("converted " ++ filename ++ " state is " ++ show endstate)
    writer.close
    reader.close
    b <- move file bfile
    if b then do
            b <- move ofile file
            if b then return true else do
                stderr.println("couldn't rename " ++ target ++ " to " ++ filename)
                return false
         else do
            stderr.println("couldn't rename " ++ filename ++ " to " ++ bakfile)
            return false
  `catch` exception where
    exception :: Throwable -> IO Bool
    exception no = do
            stderr.println("Couldn't process " ++ filename ++ ": " ++ no.getMessage)
            return false
        
--- return true if file doesn't exist or has been deleted
deleteIfExists :: MutIO File -> IO Bool
deleteIfExists f = do
    b <- f.exists
    if b then f.delete else return true

--- move a to b and return true if successfull
move :: MutIO File -> MutIO File -> IO Bool
move from to = do
    b <- deleteIfExists to
    if b then from.renameTo to else return false