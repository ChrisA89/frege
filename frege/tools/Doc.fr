{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * This program reads java class files that are the result
 * of compiling a frege package and writes
 * a documentation of that package. All public classes, instances,
 * data types, type aliases and functions are listed along with
 * programmer supplied documentation from /doc/ comments.
 *
 * Usage:
 * >java frege.tools.Doc [-d docpath] your.frege.Package ...
 * This creates or updates the documentation files for the
 * packages named on the command line. A documentation file for package
 * @a.b.C@ will be written in file @docpath/a/b/C.html@, where @docpath@
 * must be an existing directory.
 *
 * If the @-d@  flag is not given, the current directory is assumed for
 * @docpath@.
 *
 * The generated HTML will contain links to the documentation files of imported
 * packages, which are assumed to exist in the same @docpath@.
 -}


package  frege.tools.Doc where

import frege.Prelude hiding(print, println, Integral, div, seq, join)

import Data.TreeMap (Tree, keys, values, each, insertkv)
import Data.List as DL(sortBy, groupBy, intersperse)


import frege.compiler.Data       as D hiding(JType)
import frege.compiler.Import     as I()
import frege.compiler.Main       as C(standardOptions, noClassLoader, scanOpts)
import frege.compiler.Utilities  as U(print, println, theClassLoader)
import frege.compiler.Classtools as CT()
import frege.lib.QuickCheck      as QC(property)
import frege.compiler.DocUtils
import frege.control.monad.State as S(execState)
import frege.java.util.Zip
import frege.java.Util

main args
    | null args = usage 
    | any (~ ´^-h(elp)?´) args = usage
    | any (~ ´^-\?´)      args = usage
main args = do
    -- now   <- System.currentTimeMillis()
    mbopt <- scanOpts C.stdOptions args
    case mbopt of
        Nothing -> System.exit 1
        Just (opt, cs) -> do
            global <- standardOptions
            results <- mapM (docThing global.{options = opt}) cs
            unless (all ((0==) . Global.errors) (concat results)) do
                stderr.println "there were errors"
                System.exit 1
            -- (_, g) <- return $! StG.run (things cs) global.{options = opt}
            return ()


usage = mapM_ stderr.println [
        "usage: java -jar fregec.jar frege.tools.Doc [-v] [-d opt] modules ...",
        "", 
        "   -v          print a message for each processed module",
        "   -d docdir   specify root directory for documentation",
        "               Documentation for module x.y.Z will be writen to",
        "               $docdir/x/y/Z.html",
        "",
        "    Modules can be specified in three ways:",
        "      my.nice.Modul   the Java class for this module must be on the class path.",
        "      directory/      all modules that could be loaded if the given directory was",
        "                      on the class path.",
        "      path.jar        all modules in the specified JAR file",
        ""
    ]
    
docThing :: Global -> String -> IO [Global]
docThing global arg = do
    f <- File.new arg
    directory <- f.isDirectory
    regular   <- f.isFile
    
    if directory || regular
        then do
            let silent = global -- .{options <- D.Options.{flags <- flip BitSet.unionE IDE}}
            let gpath  = silent.{options <- D.Options.{path  =  [arg]}} 
                                                    -- flags <- flip BitSet.differenceE WITHCP}}
            loader <- theClassLoader gpath.options  
            let gopts = gpath.{sub <- D.SubSt.{loader}}
                 
            if directory then docDir  gopts  f [] 
                         else docArch gopts  f
        else do
            g <- return . execState (work arg) $ global
            return [g]

docArch :: Global -> MutableIO File ->  IO [Global]
docArch opts f = do
        j <- ZipFile.new f 
        ns <- j.entries
            >>= Enumeration.toList
            >>= mapM ZipEntry.getName 
            `finally` j.close
        let mods = (map ftom . filter classes) ns
        mapM (return . flip execState opts ) (map work mods)
    `catch` zipex
    `catch` ioex
  where
    -- predicate to filter class files of top level classes
    classes name = name ~ ´\.class$´ && name !~ ´\$´
    -- make module name from path name
    ftom path = mod 
        where
            mod          = (´\\|/´.matcher withoutClass).replaceAll "."
            withoutClass = (´\.class$´.matcher path).replaceFirst ""
    zipex :: ZipException -> IO [Global]
    zipex zex = do
        path <- f.getName
        stderr.println zex.show
        stderr.println ("(is " ++ path ++ " not a valid ZIP or JAR file?)")
        return []
    ioex  :: IOException  -> IO [Global]
    ioex iox = do
        stderr.println iox.show
        return []            
                                    
docDir :: Global -> MutableIO File -> [String] -> IO [Global]
docDir opts f pcs = do
    name <- f.getPath
    -- stderr.println ("Entering " ++ name)
    mbcontent <- f.list
    case mbcontent of
        Nothing -> return []      -- empty directory
        Just arr -> do
            list <- readonly StringArr.toList arr
            globs <- mapM (docDirEntry opts f pcs) list
            return (concat globs)
    

docDirEntry :: Global -> MutableIO File -> [String] -> String -> IO [Global]
docDirEntry opts f pcs ent = do
    f <- File.new f ent
    directory <- f.isDirectory
    regular   <- f.isFile
    if directory then do
        docDir opts f (ent:pcs) 
    else if regular then do
        if ent ~ ´\.class$´ && ent !~ ´\$´          --
        then do
            let base = strhead ent (ent.length - ".class".length)
                pack = joined "." (reverse (base:pcs))
            name <- f.getPath
            -- stderr.println ("Found " ++ name ++ " taken as " ++ pack)
            g <- return . execState (work pack) $ opts
            return [g]
        else return []
    else return []


--- make 1 documentation file
work c = do
    -- doio $ stderr.println ("work " ++ c)
    changeST Global.{options <- Options.{source = c}}
    g <- getST
    changeST Global.{sub <- SubSt.{thisPack = Pack.new g.options.source}}
    g <- getST
    changeST Global.{namespaces <- insertkv g.thisPack.nsName g.thisPack}
    changeST Global.{namespaces <- insertkv (NSX "PreludeBase")     pPreludeBase}
    unless (inPrelude g.thisPack g) do
        changeST Global.{namespaces <- insertkv (NSX "Prelude")     pPrelude}
        I.importClass Position.null pPrelude
    when (g.errors == 0) continueImport

mkLinks :: NSName -> Pack -> StG ()
mkLinks ns pack = do
    g <- getST
    case g.packages.lookup pack of
        Nothing -> stio ()
        Just env -> do
            let syms = [ sym | (k,sym) <- each env,
                                not (Symbol.{alias?} sym),    -- no links
                                isNothing (g.thisTab.lookup k) ]
            foreach syms link
  where
    link (sym::Symbol) = I.linkHere (ns.unNS)
                            protoItem.{name=Simple sym.pos.first.{value=sym.name.base},
                                       alias=sym.name.base}
                            sym

continueImport = do
    g <- getST
    r <- I.importClassData Position.null g.thisPack
    case r of
        Nothing -> do
            -- doio $ stderr.println ("Couldn't import " ++ show g.thisPack)
            return ()
        Just fp -> do
            mkLinks (NSX "PreludeBase") pPreludeBase
            unless (inPrelude g.thisPack g) do
                mkLinks (NSX "Prelude") pPrelude
            -- time to open output file
            C.openFilePrinter ".html"
            when (BitSet.member VERBOSE g.options.flags) do
                doio $ stderr.println("documenting " ++ g.options.source)
            continueNamespaces fp

data Date = native java.util.Date where
    native new      :: Long           -> ST s (Mutable s Date)
    native toString :: Mutable s Date -> ST s String

stime time = ST.run (Date.new time >>= Date.toString)

continueNamespaces :: CT.FregePackage -> StG ()
continueNamespaces fp = do
    g <- getST
    let packs = [ Pack.new p | Just p <- map fp.imps.frozenGetAt (enumFromTo 0 (fp.imps.length-1)) ]
        nspcs = [ NSX      p | Just p <- map fp.nmss.frozenGetAt (enumFromTo 0 (fp.nmss.length-1)) ]
        ins t (n,p) = Tree.insert t n p
        nss   = fold ins g.namespaces (zip nspcs packs)
    changeST Global.{namespaces = nss}
    foreach (each nss) (uncurry mkLinks)
    g <- getST
    let pdoc = fp.doc
        -- pack = g.thisPack.un
        doc = Doc sections
        sections = title:sectPack ++ tableOC ++ imports
                    ++ types ++ classes ++ insts ++ dat ++ vals ++ ordered
                    ++ [valide]
        title = h1 (Label "package" (seq [(text "Package "), code (text g.thisPack.un)]))
        sectPack =
            par (seq [text "Compiled: ", text (stime fp.time),
                      text " from source file: ", code (text fp.source)])
            : h3 (text "Package Documentation")
            : docit g (if pdoc == "" then Nothing else Just pdoc)
        tableOC = [h3 (text "Table of Content"), toc]
        toc = ul Nothing (tocpars [ (asyms, "type", "Type Aliases"),
                                        (csyms, "class", "Classes"),
                                        (isyms, "instance", "Instances"),
                                        (dsyms, "data", "Data Types"),
                                        (funs,  "let", "Functions and Values (alphabetically)"),
                                        (allfuns, "case", "Functions and Values (by type)"),
                                        (expfuns, "of", "Re-Exported Items")
                                        ]) where
            tocpars (([], _, _):xs) = tocpars xs
            tocpars [] = []
            tocpars ((ss, lbl, txt):xs) =
                LI [div (XRef ("#" ++ lbl) (text txt)),
                    div (joins 3 (flip sref g) ss)] : tocpars xs
        imports = [h3 (text "Imports"),
                    ul Nothing (map imppar (zip packs nspcs))]
        imppar (p,ns) = LI [div (seq [text "import ",
                                      PRef p Nothing (text (Pack.un p)),
                                      text " as ",
                                      text (NSName.unNS ns)])]
        types = if null asyms then []
                else [h2 (Label "type" (text "Type Aliases")),
                        DL (Just "clas") (map (docSym g) asyms)]
        classes = if null csyms then []
                else [h2 (Label "class" (text "Classes")),
                        DL (Just "clas") (map (docSym g) csyms)]
        insts = if null isyms then []
                else [h2 (Label "instance" (text "Instances")),
                        DL (Just "inst") (map (docSym g) isyms)]
        dat  =  if null dsyms then []
                else [h2 (Label "data" (text "Data Types")),
                        DL (Just "data") (map (docSym g) dsyms)]
        vals =  if null funs then []
                else [h2 (Label "let" (text "Functions and Values")),
                        DL (Just "func") (map (docSym g) funs)]
        ordered = if null allfuns then []
                else [h2 (Label "case" (text "Functions and Values by Type")),
                        DL (Just "func") (map docTypes ordfuns)]
        asyms = sortBy (comparing Symbol.name) [sym | sym@SymA {pos} <- values g.thisTab]
        csyms = sortBy (comparing Symbol.name) [sym | sym@SymC {pos} <- values g.thisTab]
        isyms = sortBy (comparing Symbol.name) [sym | sym@SymI {pos} <- values g.thisTab]
        dsyms = sortBy (comparing Symbol.name) [sym | sym@SymT {pos} <- values g.thisTab]
        funs  = sortBy (comparing Symbol.name) [sym | sym@SymV {pos} <- values g.thisTab]
        allfuns = funs ++ [ s | syms <- [csyms, isyms, dsyms], sym :: Symbol <- syms,
                                sym.{env?},
                                s <- values sym.env, Symbol.{typ?} s ]
        ordfuns = groupBy (using Symbol.typ) (sortBy (comparing Symbol.typ) allfuns)
        expfuns = sortBy (comparing Symbol.name) [sym | sym@SymL {pos,vis,alias} <- values g.thisTab,
                                                    vis == Public,
                                                    not (QName.our alias g) ]
        docTypes :: [Symbol] -> (Text, [Paragraph])
        docTypes [] = undefined
        docTypes ss = (code typ, [par $ content ss])
            where
                typ = dRho g (head ss).typ.rho (repeat false)
                content = fold (:-) (text "") • intersperse (text ", ") •  map (flip fref g • Symbol.name)

        -- h3 (text "Imports"), ul Nothing (map docImp (Tree.keyvalues ?S.packs Eq))]
        -- we are producing strict HTML401
        valide = par validtext
        validtext = XRef "http://validator.w3.org/check?uri=referer"
                    (E "<img src=\"http://www.w3.org/Icons/valid-html401\" alt=\"Valid HTML 4.01 Strict\" height=\"31\" width=\"88\">")

    htmlDoc doc
    doio $ g.printer.close
    stio ()

