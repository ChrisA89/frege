/*
 * this file will be appended to every parser YYgen.fr builds
 *
 */
/// the main loop of the parser
yyloop (yyvals@(st, _):_) (yytoks@yyt:yyts) =
    case yyaction st yyt of
        YYShift newst
            | yydebug, traceLn (show st ++ ": shift to " ++ show newst ++ " on " ++ yyshow yyt) = undefined
            | otherwise = yyloop ((newst, YYTok yyt):yyvals) yyts
        YYRed red
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule red) = undefined
            | otherwise = do
                vals <- yyreduce red yyvals
                yyloop vals yytoks
        YYErr -> do
            let fun = yyrecs.frozenElemAt st
            toks <- fun yytoks
            yyloop yyvals toks
        YYAccept -> YYM.return (yyaccept (yyvals, yytoks))  // will this ever happen?
;
yyloop (yyvals@(st, _):_) [] =
    case yyeaction st of
        YYAccept -> YYM.return (yyaccept (yyvals, []))
        YYShift newst -> error ("Can't shift on end of file in state " ++ show st)
        YYRed red
            | yydebug, traceLn (show st ++ ": reduce by rule " ++ yyrule red) = undefined
            | otherwise = do
                vals <- yyreduce red yyvals
                yyloop vals []
        YYErr -> do
            yyerror yyEOF ("syntax error on end of file")
            YYM.return (yyvals, [])
    ;
yyloop [] yytoks = error "empty stack in yyloop";

yyaction n tok = case yyacts.[n] of {
    Just fun -> fun tok;
    Nothing  -> YYErr;
};

yyeaction n = case yyeacts.[n] of  {
    Just this -> this;
    Nothing -> YYErr;
};

--- nowarn: application of 'yybadprod' will diverge
yybadprod p yyvs = error ("bad stack for rule " ++ show p ++ ": " ++ showst yyvs);



// drop tokens until token is valid in this state
yydrop i [] = yyrecover i [];
yydrop i (t:ts) = case yyaction i t of {
        YYErr
            | yydebug, trace (show i ++ ": error recovery drops " ++ yyshow t ++ "\n") = undefined
            | otherwise = yydrop i ts;
        _ -> YYM.return (t:ts);
    };
yyrecover i []
    | yydebug, trace (show i ++ ": error recovery reaches end of file\n") = undefined
    | otherwise = YYM.return [];

yyrecover i (ts@t:_) = do
    yyerror (yyline t) ("syntax error on " ++ yynice t)
    yydrop i ts
;

yyexpect n trep (ts@t:_) = do
    yyerror (yyline t) ("expected " ++ yynice trep ++ ", found " ++ yynice t)
    YYM.return (trep:ts)
;

yyexpect n trep [] = do
    yyerror yyEOF ("expected " ++ yynice trep ++ ", found end of file")
    YYM.return [trep]
;

yyparsing n item (ts@t:_) = do
    yyerror (yyline t) ("unexpected " ++ yynice t ++ " while trying to parse " ++ item)
    yydrop n ts

yyparsing n item [] = do
    yyerror yyEOF ("unexpected end of file while parsing " ++ item)
    yyrecover n []

yybadstart n item (ts@t:_) = do
    yyerror (yyline t) ("syntax error, " ++ item ++ " cannot start with " ++ yynice t)
    yydrop n ts

yybadstart n item [] = do
    yyerror yyEOF ("end of file while expecting " ++ item)
    yyrecover n []

yyreduce red yyvs = case yyprods.[red] of
    Just fun -> do
        reduced <- fun yyvs
        case reduced of
            (yyv, yyvals@(popst, _):_) -> case yygos.[popst] of
                Just arr -> case arr.[red] of
                    go | go > 0, yydebug, trace (show popst
                                    ++ ": after reduction goto "
                                    ++ show go ++ "\n") = undefined
                       | go > 0 = YYM.return ((go, yyv):yyvals)
                       | otherwise = error ("nowhere to go in state "
                                                ++ show popst ++ " after reduction " ++ show red)
                Nothing -> error ("nowhere to go in state "
                                            ++ show popst ++ " after any reduction")
            _ -> error ("reduction " ++ show red ++ " yields nonsensical result.")
    Nothing -> error ("reduction " ++ show red ++ " is unknown.")
;


yyparse yytoks = do
    res <- yyloop [(0, YYStart ())] yytoks
    case res of
        ([(_, YYAcc x)], []) -> YYM.return (Just x)
        ([(_, YYAcc x)], (yyt:_)) -> do
            yyerror yyEOF ("expected end of file, found `" ++ yynice yyt ++ "`")
            YYM.return (Just x)
        _ -> YYM.return Nothing;
;