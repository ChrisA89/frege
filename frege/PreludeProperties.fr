/**
 * Properties of the /Prelude/.
 */
/*
 * $Revision$
 * $Header: E:/iwcvs/fc/frege/test/PreludeProperties.fr,v 1.5 2009/04/24 19:09:19 iw Exp $
 * $Log: PreludeProperties.fr,v $
 * Revision 1.5  2009/04/24 19:09:19  iw
 * - Integer to Prelude
 *
 * Revision 1.4  2009/03/25 22:09:39  iw
 * - new class Bound with minBound/maxBound replaces Enum.minval/maxval
 * - get rid of class Truth
 *
 * Revision 1.3  2009/03/19 21:55:47  iw
 * - new properties
 *
 * Revision 1.2  2008/05/16 16:11:45  iw
 * - check the law for `rem`with all 3 Integral types
 * - check that Int.mod works like Integer.mod
 *
 * Revision 1.1  2008/05/05 09:59:06  iw
 * - first version
 *
 *
 */

package frege.PreludeProperties where

import frege.List ()
import frege.IO()
// import frege.Math ()
import frege.lib.QuickCheck

//* a generator for all 16-bit characters
chars = arbitrary::Gen Char
strings = arbitrary::Gen String
ints = arbitrary::Gen Int
longs = arbitrary::Gen Long
integers = arbitrary::Gen Integer
floats = arbitrary::Gen Float
doubles = arbitrary::Gen Double

/// @(c::Char).ord.char == c@
p_OrdChar = forAll chars (\c -> c.ord.char == c)
//* round d == (long) floor (d + 0.5)
p_DoubleRoundFloor = forAll doubles (\d ->
        (d < Long.maxBound.double && d > Long.minBound.double) ==>
            (d.long.double == (d+0.5).floor))
p_FloatRoundFloor = forAll floats (\f ->
        (f < Int.maxBound.float && f > Int.minBound.float) ==>
        (f.int.float == (f+0.5f).floor))
/// if m.group n is Nothing, then m.start m < 0
p_MatcherGroupStartEnd1 = forAll strings (\s ->
         case s =~ #(x)|(.)# of
            Nothing -> trivial true true
            Just m  -> m.group 1 == Nothing ==> m.start 1 < 0 && m.start 1 == m.end 1
         )
/// the matched string is the same as the
/// substring obtained with 'Matcher.start' and 'Matcher.end'
p_MatcherGroupStartEnd2 = forAll strings (\s ->
        case s =~ #([a-zA-Z]+)|(.)# of
            Nothing -> trivial true true
            Just m
                | Just r <- m.group 1 = label "matches" (r == substr s (m.start 1) (m.end 1))
                | otherwise = property true
         )

/// the remainder has the same sign as the divident and @(a div b)*b+r == a@
integralRemainder gen = forAll gen (\a -> forAll gen (\b ->
    if b == zero then label "zero divisor" true
    else if a `rem` b == zero then label "zero remainder" true
    else let r = a `rem` b in
        property $! (a `div` b) * b + r == a && (a <=> zero) == (r <=> zero)
    ))

p_IntRemainder     = integralRemainder ints
p_LongRemainder    = integralRemainder longs
p_IntegerRemainder = integralRemainder integers

/// 'mod' works the same way on Int and Integer
p_ModImplementation = forAll ints (\a -> forAll ints (\b ->
        b != 0 ==> (a.abs.negate `mod` b).big == (a.abs.negate.big `mod` b.big)
    ))

derive Show (a, b, c, d)
derive Eq   (a, b, c, d)
/// Eq -- this should hold for all types
p_Equality = forAll (arbitrary::Gen (Int, Double, [Char], String))
     (\a -> forAll arbitrary (\b ->
        (a == a)
        && !(a != a)
        && (a != b) == !(a == b)
        && (a == b) != (a != b)
        ))

/// this property should hold for all instances of Ord
p_Ord1 = forAll ints (\a -> forAll ints (\b ->
        case a <=> b of
            Eq -> label "equal"     (a == b)
            _  -> label "not equal" (a != b)
    ))

p_OrdLt1 = forAll floats (\a -> forAll arbitrary (\b  -> forAll arbitrary (\c  ->
        let
            // b = a + a
            // c = (b + a) `div` 2
            assumption = (a < b && b < c)
        in if assumption then  property (a < c) // (assumption ==> (a < c))
            else label "trivial" true
    )))
p_OrdLtGt = forAll strings (\a -> forAll arbitrary (\b -> (a < b) == (b > a)))
p_OrdLe1 = forAll doubles (\a -> forAll arbitrary (\b  -> forAll arbitrary (\c  ->
        let
            assumption = (a <= b && b <= c)
        in if assumption then  property (a <= c)
            else label "trivial" true
    )))
p_OrdLe2 = forAll longs (\a -> forAll arbitrary (\b -> (a <= b) == (b >= a)))
p_OrdLe3 = forAll integers (\a -> forAll arbitrary (\b -> (a <= b) == !(a > b)))
p_OrdGt1 = forAll chars (\a -> forAll arbitrary (\b  -> forAll arbitrary (\c  ->
        let
            assumption = (a > b && b > c)
        in if assumption then  property (a > c) // (assumption ==> (a < c))
            else label "trivial" true
    )))
p_OrdGe1 = forAll (arbitrary::Gen (Maybe String)) (\a -> forAll arbitrary (\b  -> forAll arbitrary (\c  ->
        let
            assumption = (a >= b && b >= c)
        in if assumption then  property (a >= c)
            else label "trivial" true
    )))
p_OrdGe2 = forAll (arbitrary::Gen (Either [Char] (Maybe String)))
    (\a -> forAll arbitrary
        (\b -> (a >= b) == (b <= a)))
p_OrdGe3 = forAll (arbitrary::Gen [String]) (\a -> forAll arbitrary (\b -> (a >= b) == !(a < b)))
p_Ordmin = forAll ints (\a -> forAll arbitrary (\b ->
            min a b == (if a < b then a else b)
        ))
p_Ordmax = forAll ints (\a -> forAll arbitrary (\b ->
            max a b == (if a > b then a else b)
        ))

p_Negate arb = forAll arb (\a -> isNumber a ==> (a + negate a == zero))
p_NegInt    = p_Negate ints
p_NegLong   = p_Negate longs
p_NegFloat  = p_Negate floats
p_NegDouble = p_Negate doubles
p_NegBig    = p_Negate integers

main _ = do
        alle <- mapM (check quick.{configMaxTest = 1000}) checks
        unless (fold and true alle) do IO.exit 1
    where
        checks = [ p_OrdChar, p_DoubleRoundFloor, p_Equality, p_FloatRoundFloor,
            p_IntRemainder, p_IntegerRemainder, p_LongRemainder,
            p_MatcherGroupStartEnd1,
            p_MatcherGroupStartEnd2,
            p_ModImplementation,    p_NegBig,    p_NegDouble,    p_NegFloat,
            p_NegInt,    p_NegLong,    p_Ord1,    p_OrdChar,    p_OrdGe1,
            p_OrdGe2,    p_OrdGe3,    p_OrdGt1,    p_OrdLe1,    p_OrdLe2,    p_OrdLe3,
            p_OrdLt1,    p_OrdLtGt,    p_Ordmax,    p_Ordmin ]