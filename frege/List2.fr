/**
    Additional functions for lists as well as closely related data types
    and type classes like 'Tree', 'Map' and 'Set' with their operations.
*/
package frege.List;


/*
# Well known functions on lists.

# $Id$
# $Author$
# $Date$
# $Revision$
*/

/**
 * > grep rx strs = filter (~ rx) strs
 * Returns the list of strings in /strs/ that match the regular expression /rx/.
 *
 * See also 'filter', '~'
 */
grep rx strs = filter (~ rx) strs;

/*
 * @joinStr sep xs@ concatenates all strings in /xs/,
 * and inserts /sep/ between any two elements of /xs/.
 *
 * If /xs/ is empty, the result is an empty string. If /sep/ is an empty string,
 * then the result is just the concatenation of the strings in /xs/.
 *
 * Example:
 * > joinStr ", " ["aaa", "bbb", "ccc"] == "aaa, bbb, ccc"
 */
joinStr "" xs = fold (++) "" xs;
joinStr xx xs = fold (++) "" (intersperse xx xs);

/*
    The following is pure despite a mutable data item is used.
join _ []     = "";
join _ [x]    = x;
join cstr (x:xs) = joinsb (StringBuilder.new x) cstr xs;

joinsb sb _ [] = show sb;
joinsb sb cstr (x:xs) = joinsb (sb << cstr << x) cstr xs;
*/

instance Show [Show:a] where {
	show lst = "[" ++ joinStr ", " (map Show.show lst) ++ "]";
	showsub = show;
	display = show;
};




qsortBy f xs = let
	qsort' [] ys     = ys;
	qsort' (x:xs) ys = let (gt,lt) = partition (f x) xs in qsort' lt (x:qsort' gt ys);
in qsort' xs [];

//rsort = sortBy \a\b{b<a};
qsort  = qsortBy (<);

// sortBy = msortBy;

//
//	also trees
//

/**
 * This type is used in place of the unary '[]' in the instance of 'Map',
 * where 'Map' can be instantiated with binary type constructors only.
 */
type ListKV key value = [(key, value)];
// type TreeKV key value = Tree (key, value);

class Map keyed where {
	lookup    :: keyed Ord:key value -> Ord:key -> Maybe value;
	insert    :: keyed Ord:key value -> Ord:key -> value -> keyed Ord:key value;
	update    :: keyed Ord:key value -> Ord:key -> value -> keyed Ord:key value;
	delete    :: keyed Ord:key value -> Ord:key -> keyed Ord:key value;
	keyvalues :: keyed Ord:key value -> Ordering -> [(Ord:key, value)];
	fromList  :: [(Ord:key, value)]  -> keyed Ord:key value;
	each      :: keyed Ord:key value -> [(Ord:key, value)];
	each k = keyvalues k Eq;
//    lookup :: keyed -> keyed.t_key -> Maybe keyed.t_value;
//	insert :: keyed -> keyed.t_key -> keyed.t_value -> keyed;
//	update :: keyed -> keyed.t_key -> keyed.t_value -> keyed;
//	delete :: keyed -> keyed.t_key -> keyed;
//	keyvalues :: keyed -> Ordering -> [(keyed.t_key, keyed.t_value)];
//	fromList :: [(keyed.t_key, keyed.t_value)] -> keyed;
};

type Set a b  = [(a, b)];

iselem [] key = Nothing;
iselem ((k,v):xs) key = case key <=> k of {
		Lt -> iselem xs key;
		Eq -> Just v;
		Gt -> Nothing;
	};

/*
instance Map ListKV where {
    // t_key   :: [(Ord:key, value)] -> key;
    // t_value :: [(Ord:key, value)] -> value;
	lookup ( []) key = Nothing;
	lookup ( ((k,v):xs)) key = if k != key then lookup ( xs) key else Just v;
	// insert :: [(Ord:k,v)] -> Ord:k -> v -> [(Ord:k,v)];
	insert ( []) key value =  [(key, value)];
	insert ( xs) key value = case lookup ( xs) key of {
		Nothing ->  ((key, value):xs);
		Just _  -> undefined "duplicate insert";
	};
	// update [] key value =  [(key, value)];
	update xs key value = ListKV.insert (ListKV.delete xs key) key value;
	// update xs key value = let xs' = xs.delete key in xs'.insert key value;
	// delete = undefined;
	delete [] key = [];
	delete ( xs) key   =  filter ((key!=) @ fst) xs;
	keyvalues ( xs) Lt = sortBy (\(k1,_)\(k2,_) -> k1 <= k2) xs;
	keyvalues ( xs) Gt = sortBy (\(k1,_)\(k2,_) -> k2 <= k1) xs;
	keyvalues ( xs) Eq = xs;
	fromList xs =  xs
};
*/

data Tree k v = Nil | Node Int (Tree k v) (Tree k v) k v where {
	depth Nil = 0;
	depth (Node _ l r _ _) = max (depth l) (depth r);

	height Nil = 0;
	height (Node h _ _ _  _) = h;

	balance Nil = 0;
	balance (Node _ l r _ _) = height l - height r;

	rotright (Node _ (Node _ ll lr lk lv) r k v) = let
		sx = 1 + max (height lr) (height r);
		x = Node sx lr r k v;
		sa = 1 + max (height ll) (height x);
		a = Node sa ll x lk lv;
	in a;
	rotright t = t;
	rotleft (Node _ l (Node _ rl rr rk rv) k v) = let
		sx = 1 + max (height l) (height rl);
		x = Node sx l rl k v;
		sb = 1 + max (height x) (height rr);
		b = Node sb x rr rk rv;
	in b;
	rotleft t = t;
	drotlr (Node s l r k v) = rotright (Node s (rotleft l) r k v);
	drotlr Nil = Nil;
	drotrl (Node s l r k v) = rotleft  (Node s l (rotright r) k v);
	drotrl Nil = Nil;
	rebalance Nil = Nil;
	rebalance (x@Node s l r k v) =
		if height l + 1 < height r then
			if balance r < 1 then rotleft x else drotrl x
		else if height l > height r + 1 then		// left subtree higher
			if balance l >= 0 then rotright x else drotlr x
		else x;
	heightchange (Node a _ _ _ _) Nil = (+1);
	heightchange Nil (Node a _ _ _ _) = (-1);
	heightchange (Node a _ _ _ _) (Node b _ _ _ _) = case a <=> b of {
		Lt -> (+1);
		Eq -> id;
		Gt -> (-1);
	};
	heightchange Nil Nil = id;
	leftmost (this@Node _ Nil _ _ _) =  this;
	leftmost (Node _ l _ _ _) = leftmost l;
	leftmost Nil              = error "Tree.leftmost Tree.Nil";

	showins ident Nil = ident ++ "Nil\n";
	showins ident (Node h Nil Nil k v) = ident ++ h.show ++ (k,v).show ++ "\n";
	showins ident (Node h l r k v) =
		showins ident (Node h Nil Nil k v) ++ showins (ident++"  ") l
		++ showins (ident++"  ") r;
	tmap f Nil = Nil;
	tmap f (Node i l r k v) = Node i (tmap f l) (tmap f r) k  (f v);
	map = tmap;
	insertlist t kvs = fold ins t kvs where
	    ins t (k,v) = Tree.insert t k v
};

updatekv k v t = Tree.update t k v;
insertkv k v t = Tree.insert t k v;
deletek  k   t = Tree.delete t k;

/*
instance Show Tree (Show:kv) where {
	// show :: Tree Show:kv -> String;
	show t = Tree.showins "" t;
};
*/
derive Show Tree Show:k Show:v;

instance Empty (Tree a b) where
    null Nil = true
    null _ = false
    empty = Nil
;

instance Map Tree where {
    // t_key   :: Tree (Ord:key, value) -> Ord:key;
    // t_value :: Tree (Ord:key, value) -> value;
	insert Nil k v = Node 1 Nil Nil k v;
	insert (Node s l r  k1 v1) k v =
		case k <=> k1 of {
			Lt -> case insert l k v of {
			        !nl -> case 1 + max (Tree.height nl) (Tree.height r) of {
			            !ns -> Tree.rebalance (Node ns nl r k1 v1)
			        }
			      };
			Eq -> Node s l r k v;
			Gt -> case insert r k v of {
					!nr -> case 1 + max (Tree.height l) (Tree.height nr) of {
					    !ns -> Tree.rebalance (Node ns l nr k1 v1)
					}
			      }
        };
	update t k v = insert t k v;
	delete Nil k = Nil;
	delete (x@Node _ Nil Nil k1  _) k = if k == k1 then Nil else x;
	// delete   (Node s l r (kv1@(k1,v1))
	delete   (Node _ l   Nil k1 v1) k = if k == k1 then l else
		let
			nl = delete l k;
			s' = 1 + Tree.height nl;
		in Tree.rebalance (Node s' nl Nil k1 v1);
	delete (Node _ Nil r   k1 v1) k = if k == k1 then r else
		let
			nr = delete r k;
			s' = 1 + Tree.height nr;
		in Tree.rebalance (Node s' Nil nr k1 v1);
	delete (Node s l r k1 v1) k =
		case k <=> k1 of {
			Lt -> let
				nl = delete l k;
				ns = 1 + max (Tree.height nl) (Tree.height r);
			in Tree.rebalance (Node ns nl r k1 v1);
			Gt -> let
				nr = delete r k;
				ns = 1 + max (Tree.height l) (Tree.height nr);
			in Tree.rebalance (Node ns l nr k1 v1);
			Eq -> case Tree.leftmost r of
				Node ls _ _ lk lv -> let    // r may not be Nil here, see above
				        nr = delete r lk;
				        ns = 1 + max (Tree.height l) (Tree.height nr);
			        in Tree.rebalance (Node ns l nr lk lv);
			    Nil -> undefined "cannot happen";
		};
	lookup Nil _ = Nothing;
	lookup (Node _ l r k1 v) k =
	                case k <=> k1 of {
			            Lt -> lookup l k;
			            Gt -> lookup r k;
			            Eq -> Just v;
		            };

	// keyvalues :: (Tree (Ord:a, b)) -> Ordering -> [(Ord:a, b)];
	keyvalues t order = let
		kv Nil acc = acc;
		kv (Node _ l r key v) acc = case order of {
			Lt -> kv l ((key,v): kv r acc);
			Gt -> kv r ((key,v): kv l acc);
			Eq -> (key,v) : kv l (kv r acc);
		};
		in kv t [];

    fromList = Tree.insertlist Nil;
    each t = kv t [] where
        kv Nil acc = acc
        kv (Node _ l r key v) acc = (key,v) : kv l (kv r acc)
};

//type XTree a b = Tree a b;
type OrdSet a  = Tree a ();
emptySet :: OrdSet a;
emptySet = Tree.Nil;
including s o = Tree.insert s o ();
contains  s o
    | Nothing <- Tree.lookup s o = false
    | otherwise = true;
isEmpty Tree.Nil = true;
isEmpty _ = false;
fromKeys = Tree.fromList <~ map (\x -> (x,()));
union s1 s2 = let kv = Tree.keyvalues s2 Eq in Tree.insertlist s1 kv;
intersection s1 s2 = let
						b = [ x | x <- keys s1, s2 `contains` x ]
					in fromKeys b;
diff s1 s2 = let
				b = [ x | x <- keys s1, !(s2 `contains` x) ]
			in fromKeys b;


keys t   = [ f | (f,_) <- (keyvalues  t Eq)];
values t = [ s | (_,s) <- (keyvalues  t Eq)];
