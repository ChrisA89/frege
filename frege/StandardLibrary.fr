--- The purpose of this package is to get all library modules compiled

package StandardLibrary where


                                            -- links to avoid unused import warnings
import Control.Arrow()                      ; arrow = Arrow.arr
import Control.CombineIn()                  ; combinein = (CombineIn.&&&)
import Control.Concurrent()                 ; concurrent = Concurrent.async
import Control.First()                      ; first = First.first
import Control.Second()                     ; second = Second.second
import Control.Tensor()                     ; tensor = (Tensor.***)

import Control.arrow.Kleisli()              ; kleisli = Kleisli.Kleisli

import Control.monad.Reader()               ; reader = Reader.ask
import Control.monad.State()                ; state = State.State.get

import Control.monad.trans.EitherT()        ; eithert = EitherT.EitherT.run
import Control.monad.trans.MaybeT()         ; maybet = MaybeT.MaybeT.run
import Control.monad.trans.MonadIO()        ; monadio = MonadIO.liftIO
import Control.monad.trans.MonadTrans()     ; monadtrans = MonadTrans.lift

import Data.Bits()                          ; bits = Bits.BitSet.member
import Data.Char()                          ; char = Char.isUpper
import Data.Compose()                       ; compose = Compose.compose
import Data.Coproduct()                     ; coproduct = Coproduct.Inl
import Data.Foldable()                      ; foldable = Foldable.fold
import Data.Graph()                         ; graph = Graph.scc
import Data.Iterators()                     ; iterators = Iterators.StringIterator.empty
import Data.List()                          ; list = List.groupBy
import Data.Map()                           ; maP = Map.insert
import Data.Maybe()                         ; mayBe = Maybe.mapM
import Data.Monoid()                        ; monoid = Monoid.mempty
import Data.NanoParsec()                    ; nano = NanoParsec.satisfy
import Data.NonEmpty()                      ; nonempty = NonEmpty.nonEmpty
import Data.Product()                       ; prodUct = Product.Prod
import Data.Stream()                        ; stream = Stream.Cons
import Data.Traversable()                   ; trav = Traversable.traverse
import Data.Tree()                          ; tree = Tree.Node
import Data.TreeMap()                       ; treemap = TreeMap.insert
import Data.Tuples()                        ; tuples = (1,2,3,4,5,6).show

import Data.wrapper.Boolean()               ; boolean = Boolean.Any
import Data.wrapper.Const()                 ; consT = Const.Const
import Data.wrapper.Dual()                  ; dual = Dual.Dual
import Data.wrapper.Endo()                  ; endo = Endo.Endo
import Data.wrapper.Identity()              ; ident = Identity.Identity
import Data.wrapper.Num()                   ; num = Num.Sum
import Data.wrapper.Ord()                   ; orD = Ord.Max
import Data.wrapper.ZipList()               ; ziplist = ZipList.ZipList


import Java.Awt()                           ; awt = Awt.Frame.setTitle
import Java.IO()                            ; io = IO.File.new
import Java.Lang()                          ; lang = Lang.Error.javaClass
import Java.Net()                           ; net = Net.URI.new
import Java.Swing()                         ; swing = Swing.JLabel.new
import Java.Util()                          ; util = Util.Scanner.new

import Java.lang.Reflect()                  ; reflect = Reflect.Field.get

import Java.swing.GroupLayout()             ; gl = GroupLayout.Alignment.leading

import Java.util.Concurrent as JC()         ; jc = JC.BlockingQueue.add
import Java.util.Jar()                      ; jar = Jar.JarFile.new
import Java.util.Zip()                      ; ziP = Zip.ZipFile.new

import Lib.ForkJoin()                       ; fj = ForkJoin.par
import Lib.Modules()                        ; modules = Modules.walkCP
import Lib.PP()                             ; pp = PP.text

import Test.QuickCheck()                    ; qc = QuickCheck.property

import System.Random()                      ; random = Random.random
 
