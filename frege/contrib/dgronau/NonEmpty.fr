package control.NonEmpty where

import control.Foldable
import control.Monoid
import frege.List

{--
    A 'NonEmpty' is like a list, but never empty.
-}
data NonEmpty a = NonEmpty {
  neHead :: a,  --- The head of the non-empty list.
  neTail :: [a] --- The tail of the non-empty list.
}

derive Eq NonEmpty a
derive Ord NonEmpty a

infixr 6 `|:` `.:`

instance Functor NonEmpty where
  fmap f (NonEmpty h t) = NonEmpty (f h) (Functor.fmap f t)

--instance Applicative NonEmpty where
--  pure = return
--  (<*>) = ap

instance Monad NonEmpty where
  return x = NonEmpty x []
  (NonEmpty h t) >>= f = let NonEmpty a b = f h
                             k = t >>= (toList • f)
                         in NonEmpty a (b ++ k)


instance ListSource NonEmpty where
    toList (NonEmpty h t) = h : t
instance Foldable NonEmpty where
  foldrF f x (NonEmpty h t) = f h (foldr f x t)
  foldlF f x (NonEmpty h t) = foldl' f x (h:t)

--instance Traversable NonEmpty where
--  traverse f a = NonEmpty <$> head <*> tail <$> traverse f (toList a)

instance Show Show a => NonEmpty a where
  show (NonEmpty h t) = Show.show (h:t)
--  show (NonEmpty h t) = '|' : Show.show (h:t) ++ "|"

instance Semigroup NonEmpty a where
  mappend (NonEmpty a b) (NonEmpty c d) = NonEmpty a (b ++ [c] ++ d)

--instance Zip NonEmpty where
--  fzip = list2 zip

--instance (Arbitrary a) => Arbitrary (NonEmpty a) where
--  arbitrary = nonEmpty <$> arbitrary <*> arbitrary
--  shrink = (unsafeToNonEmpty <$>) . shrink . toList

--- Constructs a non-empty list with the given head and tail.
nonEmpty :: a -> [a] -> NonEmpty a
nonEmpty = NonEmpty

--- Constructs a non-empty list with the given head and tail (an alias for 'nonEmpty').
(|:) :: a -> [a] -> NonEmpty a
(|:) = nonEmpty

--- Tries to convert a list to a 'NonEmpty' returning 'Nothing' if the given list is empty.
toNonEmpty :: [a] -> Maybe (NonEmpty a)
toNonEmpty [] = Nothing
toNonEmpty (h:t) = Just (NonEmpty h t)

--- Converts a list to a 'NonEmpty' using the given default value for the empty list case.
toNonEmpty' :: NonEmpty a -> [a] -> NonEmpty a
toNonEmpty' d = fromMaybe d • toNonEmpty

--- /WARNING: Fails if given the empty list./
--- Tries to convert a list to a 'NonEmpty'.
unsafeToNonEmpty :: [a] -> NonEmpty a
unsafeToNonEmpty = toNonEmpty' (error "unsafeToNonEmpty on empty list")

--- Prepends a value to a non-empty list.
(.:) :: a -> NonEmpty a -> NonEmpty a
a .: NonEmpty h t = NonEmpty a (h:t)

--- Reverses the elements of the (finite) non-empty list.
reverseN :: NonEmpty a -> NonEmpty a
reverseN = list reverse

scanlN :: (b -> a -> b) -> b -> NonEmpty a -> NonEmpty b
scanlN = (list •) • scanl

scanl1N :: (a -> a -> a) -> NonEmpty a -> NonEmpty a
scanl1N = list • scanl1

scanrN :: (a -> b -> b) -> b -> NonEmpty a -> NonEmpty b
scanrN = (list •) • scanr

scanr1N :: (a -> a -> a) -> NonEmpty a -> NonEmpty a
scanr1N = list • scanr1

iterateN :: (a -> a) -> a -> NonEmpty a
iterateN = (unsafeToNonEmpty •) • iterate

cycleN :: (Foldable f) => f a -> NonEmpty a
cycleN = list cycle

initsN :: [a] -> NonEmpty [a]
initsN = unsafeToNonEmpty • inits

tailsN :: [a] -> NonEmpty [a]
tailsN = unsafeToNonEmpty • tails

sortN :: (Ord a) => NonEmpty a -> NonEmpty a
sortN = list sort

--insertN :: (Ord a) => a -> NonEmpty a -> NonEmpty a
--insertN a = unsafeToNonEmpty • insert a • toList

unzipN :: NonEmpty (a, b) -> (NonEmpty a, NonEmpty b)
unzipN zs = let (xs, ys) = unzip $ toList zs
            in (unsafeToNonEmpty xs, unsafeToNonEmpty ys)

--- helper methods (should be moved to frege.List) --------

scanr1 :: (a -> a -> a) -> [a] -> [a]
scanr1 _ [] = []
scanr1 _ [x] = [x]
scanr1 f (x:xs) =  let (q:qs) = scanr1 f xs in f x q : (q:qs)

scanr :: (a -> b -> b) -> b -> [a] -> [b]
scanr _ q0 [] = [q0]
scanr f q0 (x:xs) =  let (q:qs) = scanr f q0 xs  in f x q : (q:qs)

inits :: [a] -> [[a]]
inits xs =  [] : (case xs of {[] -> []; x : xs' -> map (x :) (inits xs')})

tails :: [a] -> [[a]]
tails xs = xs : (case xs of {[] -> []; _ : xs' -> tails xs'})

-- ---------------
-- Not exported --
-- ---------------

private list :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty b
private list = ((unsafeToNonEmpty •) • (• toList))

private list2 :: Foldable f => ([a] -> [b] -> [c]) -> f a -> f b -> NonEmpty c
private list2 f a b = unsafeToNonEmpty $ f (toList a) (toList b)
