package frege.test.QuickCheck
    /**
     * derived from original Haskell QuickCheck by Koen Claessen and John Hughes
     * see also http://www.cs.chalmers.se/~rjmh/QuickCheck/
     */
  /* -- testing functions
  ( quickCheck    -- :: prop -> IO ()
  , verboseCheck  -- :: prop -> IO ()
  , test          -- :: prop -> IO ()  -- = quickCheck

  , Config(..)    -- :: *
  , check         -- :: Config -> prop -> IO ()

  -- property combinators
  , forAll        -- :: Gen a -> (a -> prop) -> prop
  , (==>)         -- :: Bool -> prop -> prop

  -- gathering test-case information
  , label         -- :: String         -> prop -> prop
  , collect       -- :: Show a => a    -> prop -> prop
  , classify      -- :: Bool -> String -> prop -> prop
  , trivial       -- :: Bool           -> prop -> prop

  -- generator combinators
  , Gen           -- :: * -> * ; Functor, Monad

  , elements      -- :: [a] -> Gen a
  , two           -- :: Gen a -> Gen (a,a)
  , three         -- :: Gen a -> Gen (a,a,a)
  , four          -- :: Gen a -> Gen (a,a,a,a)

  , sized         -- :: (Int -> Gen a) -> Gen a
  , resize        -- :: Int -> Gen a -> Gen a
  , choose        -- :: Random a => (a, a) -> Gen a
  , oneof         -- :: [Gen a] -> Gen a
  , frequency     -- :: [(Int, Gen a)] -> Gen a

  , vector        -- :: Arbitrary a => Int -> Gen [a]

  -- default generators
  , Arbitrary(..) -- :: class
  , rand          -- :: Gen StdGen
  , promote       -- :: (a -> Gen b) -> Gen (a -> b)
  , variant       -- :: Int -> Gen a -> Gen a

  -- testable
  , Testable(..)  -- :: class
  , Property      -- :: *
  )
  */
 where
/*
-- QuickCheck v.0.2
-- DRAFT implementation; last update 000104.
-- Koen Claessen, John Hughes.
*/

import frege.system.Random
import frege.List( takeWhile dropWhile sort join grep map reverse fold foldr cstos)
import frege.IO(<< stdout)


instance Ord [Ord:a] where
    [] <=> [] = Eq
    [] <=> _  = Lt
    (x:xs) <=> (y:ys) = case x.<=> y of
        Eq -> xs <=> ys
        other -> other
    (x:xs) <=> [] = Gt
    // as != bs = Eq Ordering.!= (as <=> bs)
    // as == bs = Eq Ordering.== (as <=> bs)

// import Monad( liftM2, liftM3, liftM4 )

filter p xs = grep p xs
unlines xs = join "\n" xs

infixr 16 `==>`
infix  15 `classify`
infixl 2 `!!`

(x:xs) !! 0 = x
(x:xs) !! n = xs !! (n-1)


// --------------------------------------------------------------------
// -- Generator

data Gen a
  = Gen (Int -> StdGen -> a)

sized :: (Int -> Gen a) -> Gen a
sized fgen = Gen (\n \r -> let Gen m = fgen n in m n r)

resize :: Int -> Gen a -> Gen a
resize n (Gen m) = Gen (\_ \r -> m n r)

rand :: Gen StdGen
rand = Gen (\n \r -> r)

promote :: (a -> Gen b) -> Gen (a -> b)
promote f = Gen (\n \r -> \a -> let Gen m = f a in m n r)

variant :: Int -> Gen a -> Gen a
variant v (Gen m) = Gen (\n \r -> m n (rands r !! (v+1)))
 where
  rands r0 = r1 : rands r2 where (r1, r2) = split r0

generate :: Int -> StdGen -> Gen a -> a
generate n rnd (Gen m) = m size rnd1
 where
  (size, rnd1) = Int.randomR (0, n) rnd


instance Functor Gen where
  // fmap f m = m >>= Gen.return ° f
  mapf m f = m >>= Gen.return ° f


instance Monad Gen where
  return a    = Gen (\n \r -> a)
  Gen m >>= k =
    Gen (\n \r0 -> let (r1,r2) = StdGen.split r0
                       Gen bm  = k (m n r1)
                   in bm n r2)

// derived

choose :: (Randoms:a, a) -> Gen a
choose bounds = let t = fst bounds in (fst ° t.randomR bounds) Gen.`fmap` rand

elements :: [a] -> Gen a
elements xs = (xs !!) Gen.`fmap` choose (0, length xs - 1)

vector :: Arbitrary:a -> Int -> Gen [Arbitrary:a]
vector x n = sequence Gen.return [ x.arbitrary | i <- 1..n ]

oneof :: [Gen a] -> Gen a
oneof gens = elements gens >>= id

frequency :: [(Int, Gen a)] -> Gen a
frequency xs = choose (1, tot) >>= (`pick` xs)
 where
  tot = fold (+) 0 (map fst xs)

  pick n ((k,x):xs)
    | n <= k    = x
    | otherwise = pick (n-k) xs



// --------------------------------------------------------------------
// Arbitrary

class Arbitrary arb where
  arbitrary   :: arb -> Gen arb
  coarbitrary :: arb -> Gen barb -> Gen barb
  coarbitrary _ = variant 0

instance Arbitrary () where
  arbitrary _   = Gen.return ()
  coarbitrary _ = variant 0

instance Arbitrary Bool where
  arbitrary _   = elements [true, false]
  coarbitrary b = if b then variant 0 else variant 1

instance Arbitrary Char where
  arbitrary _   = choose (32,127) >>= (\n -> Gen.return (chr n))
  coarbitrary n = variant (ord n)

instance Arbitrary Int where
  arbitrary  _  = sized (\n -> choose (negate n,n))
  coarbitrary n = variant (if n >= 0 then 2*n else 2*(negate n) + 1)

instance Arbitrary Long where
  arbitrary _    = sized (\n -> choose (negate n.long, n.long))
  coarbitrary n = variant (Long.int (if n >= 0L then 2L*n else 2L*(negate n) + 1L))


instance Arbitrary Float where
  arbitrary  x   = liftM4 (fraction x) 0.arbitrary 0.arbitrary 0.arbitrary expo
    where expo = choose (0-100, 100)
  coarbitrary x = undefined "coarbitrary (decodeFloat x)"

instance Arbitrary Double where
  arbitrary x   = liftM4 (fraction x) 0.arbitrary 0.arbitrary 0.arbitrary expo
    where expo = choose (0-100, 100)
  coarbitrary x = undefined "coarbitrary Double"  // coarbitrary (decodeFloat x)

fraction x a b c e = exp y e where
        y = x.fromInt a + (x.fromInt b / (abs (x.fromInt c) + x.one))
        exp y n
            | n == 0 = y
            | n > 0 = exp (y * (ten y)) (n-1)
            | n < 0 = exp (y / (ten y)) (n+1)
            where
                ten f = five f * two f
                two f = f.one + f.one
                five f = two f + two f + one f


instance Arbitrary (Arbitrary:a, Arbitrary:b) where
  arbitrary   (a, b) = liftM2 (,) a.arbitrary b.arbitrary
  coarbitrary (a, b) = a.coarbitrary ° b.coarbitrary

instance Arbitrary (Arbitrary:a, Arbitrary:b, Arbitrary:c) where
  arbitrary   (a, b, c) = liftM3 (,,) a.arbitrary b.arbitrary c.arbitrary
  coarbitrary (a, b, c) = a.coarbitrary ° b.coarbitrary ° c.coarbitrary

instance Arbitrary (Arbitrary:a, Arbitrary:b, Arbitrary:c, Arbitrary:d)
 where
  arbitrary   (a, b, c, d) = liftM4 (,,,) a.arbitrary b.arbitrary c.arbitrary d.arbitrary
  coarbitrary (a, b, c, d) =
    a.coarbitrary ° b.coarbitrary ° c.coarbitrary ° d.coarbitrary

instance Arbitrary [Arbitrary:a] where
  arbitrary   (x:_)  = sized (\n -> choose (0,n) >>= vector x)
  coarbitrary []     = variant 0
  coarbitrary (a:as) = a.coarbitrary ° variant 1 ° coarbitrary as

instance Arbitrary String where
    arbitrary _ = ['c'].arbitrary >>= (\cs -> Gen.return (cstos cs))
    coarbitrary ""  = variant 0
    coarbitrary str = (str.charAt 0).coarbitrary ° variant 1 ° coarbitrary str.tail

instance Arbitrary (Maybe Arbitrary:a) where
    arbitrary (Just a) = frequency [(1, Gen.return Nothing),
                         (9, liftM Just a.arbitrary) ]
    coarbitrary Nothing = variant 0
    coarbitrary (Just s) = variant 1 ° s.coarbitrary

// instance Arbitrary (Arbitrary:a -> Arbitrary:b) where
//  arbitrary   f     = promote (`coarbitrary` arbitrary)
//  coarbitrary f gen = arbitrary >>= ((`coarbitrary` gen) ° f)


// --------------------------------------------------------------------
// Testable

data Result
  = Result { ok :: Maybe Bool, stamp :: [String], arguments :: [String] }

nothing :: Result
nothing = Result { ok = Nothing, stamp = [], arguments = [] }

data Property
  = Prop (Gen Result)

result :: Result -> Property
result res = Prop (Gen.return res)

evaluate :: Testable:a -> Gen Result
evaluate a = gen where Prop gen = property a

class Testable a where
  property :: a -> Property

instance Testable () where
  property _ = result nothing

instance Testable Bool where
  property b = result (Result n.{ ok = Just b }) where
                        Result n = nothing

instance Testable Result where
  property res = result res

instance Testable Property where
  property prop = prop

// instance Testable (Arbitrary:Show:arg -> Testable:res) where
//  property f = forAll arbitrary f

forAll :: Gen Show:a -> (a -> Testable:b) -> Property
forAll gen body = Prop $ ( gen >>=
    (\a   -> evaluate (body a) >>=
    (\res -> Gen.return (argument a res))))
    /*
  do a   <- gen
     res <- evaluate (body a)
     return (argument a res)
     */
 where
  argument a (Result res) = Result {res | arguments = show a : res.{arguments} }

(==>) :: Bool -> Testable:a -> Property
a ==> b = if a then property b else property ()
// true  ==> a = property a
// false ==> a = property ()

label :: String -> Testable:a -> Property
label s a = Prop (add Gen.`fmap` evaluate a)
 where
  add (Result res) = Result res.{ stamp = s : res.{stamp} }

classify :: Bool -> String -> Testable:a -> Property
classify true  name t = label name t
classify false _    t = property t

trivial :: Bool -> Testable:a -> Property
trivial b t = (b `classify` "trivial") t

collect :: Show:a -> Testable:b -> Property
collect v t = label (display v) t

// ------------------------------------------------------------------
// Testing

data Config = Config
  { maxTest :: Int
  , maxFail :: Int
  , size    :: Int -> Int
  , every   :: Int -> [String] -> String
  }

quick :: Config
quick = Config
  { maxTest = 100
  , maxFail = 1000
  , size    = (+ 3) ° (`div` 2)
  , every   = \n \args -> let s = show n in s ++ cstos [ '\b' | _ <- 1..s.length ]
  }

verbose :: Config
verbose = Config q.{ every = \n \args -> show n ++ ":\n" ++ unlines args ++ "\n"} where
    Config q = quick

ntimes :: Int -> Config
ntimes n = Config q.{ maxTest = n }.{ maxFail = 0-1 } where
    Config q = quick
test         :: Testable:a -> Bool
quickCheck   :: Testable:a -> Bool
verboseCheck :: Testable:a -> Bool
test         t = check quick t
testn      n t = check (ntimes n) t
quickCheck   t = check quick t
verboseCheck t = check verbose t

check :: Config -> Testable:a -> Bool
check config a =
  do rnd <- StdGen.new ()
  for tests config (evaluate a) rnd 0 0 []

tests :: Config -> Gen Result -> StdGen -> Int -> Int -> [[String]] -> Bool
tests config gen rnd0 ntest nfail stamps
  | ntest == cfg.maxTest = do done "OK, passed" ntest stamps for true
  | nfail == cfg.maxFail = do done "Arguments exhausted after" ntest stamps for true
  | otherwise               =
      do stdout << (cfg.{every} ntest (res.{arguments}))
      for case res.{ok} of
           Nothing    ->
             tests config gen rnd1 ntest (nfail+1) stamps
           Just true  ->
             tests config gen rnd1 (ntest+1) nfail (res.{stamp}:stamps)
           Just false -> do
                (stdout << "Falsifiable, after "
                   << ntest
                   << " tests:\n"
                   << unlines (res.{arguments})
                    ).println
              for false
  where
      Config cfg  = config
      Result res  = result
      result      = generate (cfg.{size} ntest) rnd2 gen
      (rnd1,rnd2) = split rnd0

done :: String -> Int -> [[String]] -> ()
done mesg ntest stamps =
 do stdout << mesg << " " << ntest << " tests" << table for ()
 where
  table = displ
        ° map entry
        ° reverse
        ° sort
        ° map pairLength
        ° group
        ° sort
        ° filter ((!) ° null)
        $ stamps

  displ []  = ".\n"
  displ [x] = " (" ++ x ++ ").\n"
  displ xs  = ".\n" ++ unlines (map (++ ".") xs) ++ "\n"

  pairLength (xss@xs:_) = (length xss, xs)
  entry (n, xs)         = percentage n ntest
                       ++ " "
                       ++ (join  ", " xs)

  percentage n m        = show ((100 * n) `div` m) ++ "%"



group xs = groupBy (==) xs
groupBy eq [] = []
groupBy eq (x:xs) = (x:ys) : groupBy eq zs
    where (ys, zs) = span (eq x) xs

span p xs = (takeWhile p xs, dropWhile p xs)

const2 c _ _ = c
// ------------------------------------------------------------------
// the end.


