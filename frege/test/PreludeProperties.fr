/**
 * Properties of the /Prelude/.
 */
/*
 * $Revision$
 * $Header: E:/iwcvs/fc3/frege/test/PreludeProperties.fr,v 3.10 2009/04/30 13:51:10 iw Exp $
 * $Log: PreludeProperties.fr,v $
 * Revision 3.10  2009/04/30 13:51:10  iw
 * -intial version
 *
 * Revision 1.5  2009/04/24 19:09:19  iw
 * - Integer to Prelude
 *
 * Revision 1.4  2009/03/25 22:09:39  iw
 * - new class Bound with minBound/maxBound replaces Enum.minval/maxval
 * - get rid of class Truth
 *
 * Revision 1.3  2009/03/19 21:55:47  iw
 * - new properties
 *
 * Revision 1.2  2008/05/16 16:11:45  iw
 * - check the law for `rem`with all 3 Integral types
 * - check that Int.mod works like Integer.mod
 *
 * Revision 1.1  2008/05/05 09:59:06  iw
 * - first version
 *
 *
 */

package frege.test.PreludeProperties where

import frege.List ()
import frege.IO()
import frege.Math ()
import frege.test.QuickCheck

//* a generator for all 16-bit characters
allchars = choose (0,0xffff) >>= (\n -> Gen.return (chr n))
strings = "".arbitrary
ints = 0.arbitrary
longs = 0.long.arbitrary
integers = 0n.arbitrary
xs = [0n].arbitrary
xss = [[0n]].arbitrary

unless b1 b2 = classify "not checked" b1 (b1 `or` b2)

// ############# properties of list functions ######################
p_headTail = forAll xs (\xs ->
        trivial (null xs) (null xs `or` (head xs : tail xs) == xs)
    )

p_initLast = forAll xs (\xs ->
        unless (null xs) (init xs ++ [last xs] == xs)
    )
p_scanlFold = forAll xs (\xs ->
        last (scanl (+) 0n xs) == fold (+) 0n xs
    )
p_foldR = forAll xs (\xs ->
        trivial (null xs) (foldr (-) 0n xs == foldrs (-) 0n xs)
    )
p_takeDrop = forAll xs (\xs -> forAll ints (\n ->
        unless (n < 0) $
        classify "empty list" (null xs) $
        classify "whole list" (n >= length xs) $
        classify "initial segment" (n < length xs) $
        take n xs ++ drop n xs == xs
    ))
p_takedropWhile = forAll xs (\xs -> forAll ints (\n ->
        classify "empty list" (null xs) $
        // classify "whole list" (n >= length xs) $
        // classify "initial segment" (n < length xs) $
        takeWhile (n<) xs ++ dropWhile (n<) xs == xs
    ))
p_takedropUntil = forAll xs (\xs -> forAll ints (\n ->
        classify "empty list" (null xs) $
        // classify "whole list" (n >= length xs) $
        // classify "initial segment" (n < length xs) $
        takeUntil (n<) xs ++ dropUntil (n<) xs == xs
    ))
p_Partition = forAll xs (\xs -> forAll ints (\n ->
        let p = (<n)
            ps = partition p xs
        in  classify "empty list" (null xs) $
             all p (fst ps)
            && (not @ any p) (snd ps)
            && length (fst ps) + length (snd ps) == length xs
            && all (`elem` xs) (fst ps)
            && all (`elem` xs) (snd ps)
            && all (\x -> x `elem` fst ps || x `elem` snd ps) xs
    ))
p_zipUnzip = forAll [(0,1)].arbitrary (\xs ->
        (curry zip @ unzip) xs == xs
    )
//* @(c::Char).ord.char == c@
p_OrdChar = forAll allchars (\c -> c.ord.char == c)
//* round d == (long) floor (d + 0.5)
p_DoubleRoundFloor = forAll 1d.arbitrary (\d ->
        (d < Long.maxBound.double && d > Long.minBound.double) ==>
            (d.long.double == (d+0.5).floor))
p_FloatRoundFloor = forAll 1f.arbitrary (\f ->
        (f < Int.maxBound.float && f > Int.minBound.float) ==>
        (f.int.float == (f+0.5f).floor))
//* if m.group n is Nothing, then m.start m < 0
p_MatcherGroupStartEnd1 = forAll strings (\s ->
         case s =~ #(x)|(.)# of
            Nothing -> trivial true true
            Just m  -> m.group 1 == Nothing ==> m.start 1 < 0 && m.start 1 == m.end 1
         )
p_MatcherGroupStartEnd2 = forAll strings (\s ->
        case s =~ #([a-zA-Z]+)|(.)# of
            Nothing -> property true
            Just m
                | Just r <- m.group 1 = label "matches" (r == substr s (m.start 1) (m.end 1))
                | otherwise = property true
         )

//* the remainder has the same sign as the divident and (a(b)*b+r == a
integralRemainder gen = forAll gen (\a -> forAll gen (\b ->
    if b == b.zero then label "zero divisor" true
    else if a `rem` b == b.zero then label "zero remainder" true
    else let r = a `rem` b in
        property $ (a `div` b) * b + r == a && (a <=> a.zero) == (r <=> a.zero)
    ))

p_IntRemainder     = integralRemainder ints
p_LongRemainder    = integralRemainder longs
p_IntegerRemainder = integralRemainder integers

p_ModImplementation = forAll ints (\a -> forAll ints (\b ->
        b != 0 ==> (a.abs.negate `mod` b).big == (a.abs.negate.big `mod` b.big)
    ))

derive Show (Show:a, Show:b, Show:c, Show:d)
derive Eq   (Eq:a, Eq:b, Eq:c, Eq:d)
//* Eq -- this should hold for all types
p_Equality = forAll t.arbitrary (\a -> forAll t.arbitrary (\b ->
        (a == a)
        && !(a != a)
        && (a != b) == !(a == b)
        && (a == b) != (a != b)
    )) where
        t = (0, 3.0d, ['c'], "string")

//* this property should hold for all instances of Ord
p_Ord1 = forAll ints (\a -> forAll ints (\b ->
        case a <=> b of
            Eq -> label "equal"     (a == b)
            _  -> label "not equal" (a != b)
    ))
p_OrdLt1 = forAll 0f.arbitrary (\a -> forAll 1f.arbitrary (\b  -> forAll 2f.arbitrary (\c  ->
        let
            // b = a + a
            // c = (b + a) `div` 2
            assumption = (a < b && b < c)
        in if assumption then  property (a < c) // (assumption ==> (a < c))
            else label "trivial" true
    )))
p_OrdLtGt = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b -> (a < b) == (b > a)))
p_OrdLe1 = forAll 0d.arbitrary (\a -> forAll 1d.arbitrary (\b  -> forAll 2d.arbitrary (\c  ->
        let
            // b = a + a
            // c = (b + a) `div` 2
            assumption = (a <= b && b <= c)
        in if assumption then  property (a <= c)
            else label "trivial" true
    )))
p_OrdLe2 = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b -> (a <= b) == (b >= a)))
p_OrdLe3 = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b -> (a <= b) == !(a > b)))
p_OrdGt1 = forAll 0.big.arbitrary (\a -> forAll 1.big.arbitrary (\b  -> forAll 2.big.arbitrary (\c  ->
        let
            // b = a + a
            // c = (b + a) `div` 2
            assumption = (a > b && b > c)
        in if assumption then  property (a > c) // (assumption ==> (a < c))
            else label "trivial" true
    )))
p_OrdGe1 = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b  -> forAll 1.arbitrary (\c  ->
        let
            // b = a + a
            // c = (b + a) `div` 2
            assumption = (a >= b && b >= c)
        in if assumption then  property (a >= c)
            else label "trivial" true
    )))
p_OrdGe2 = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b -> (a >= b) == (b <= a)))
p_OrdGe3 = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b -> (a >= b) == !(a < b)))
p_Ordmin = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b ->
            min a b == (if a < b then a else b)
        ))
p_Ordmax = forAll 0.arbitrary (\a -> forAll 1.arbitrary (\b ->
            max a b == (if a > b then a else b)
        ))

p_Negate n = forAll n.arbitrary (\a -> isNumber a ==> (a + negate a == zero a))
p_NegInt    = p_Negate 0
p_NegLong   = p_Negate 1l
p_NegFloat  = p_Negate 1.0f
p_NegDouble = p_Negate 1.0
p_NegBig    = p_Negate 1.big

/*
p_Divide n = forAll n.arbitrary (\a -> forAll n.arbitrary (\b ->
        (isNumber a && isNumber b && sign b != 0) ==> ((a/b) * b == a)
    ))
p_DivF = p_Divide 1f
p_DivD = p_Divide 1.0
*/