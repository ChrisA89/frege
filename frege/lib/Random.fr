--- Random numbers
--- This tries to mimick Haskell's System.Random module as far as quickcheck needs it.
--- The type 'JavaGen' is the random number generator found in java.util.Random


package frege.lib.Random where

    {--
     * Interface for random number generators
     -}
    class RandomGen g where
        next     :: g -> (Int, g)
        nextLong :: g -> (Long, g)
        nextBool :: g -> (Bool, g)
        nextDouble :: g -> (Double, g)
        split    :: g -> (g,g)
        genRange :: g -> (Int, Int)
        genRange _ = (Int.minBound, Int.maxBound)


    protected data JavaGen = native java.util.Random where
        public  native new         :: ()   -> IOMutable JavaGen
                                   |  Long -> STMutable s JavaGen
        public  native nextInt     :: Mutable s JavaGen -> ST s Int
        public  native nextLong    :: Mutable s JavaGen -> ST s Long
        public  native nextFloat   :: Mutable s JavaGen -> ST s Float
        public  native nextDouble  :: Mutable s JavaGen -> ST s Double
        public  native nextBool nextBoolean :: Mutable s JavaGen -> ST s Bool

    abstract data StdGen = StdGen Long where
        new i = StdGen (Int.long i)
        private nextST (StdGen seed) next = do
                r <-JavaGen.new seed
                i <- next r
                l <- JavaGen.nextLong r
                return (i, StdGen l)
        -- get the next integer and a new generator
        next g = ST.run (nextST g JavaGen.nextInt)
        -- i have no idea if this works
        split (g@StdGen seed) = (g0, g1) where
                (!i,!g1) = next g
                !g0 = StdGen (seed + i.long)
        nextLong (g@StdGen seed) = ST.run (nextST g JavaGen.nextLong)
        nextBool (g@StdGen seed) = ST.run (nextST g JavaGen.nextBool)
        nextDouble (g@StdGen seed) = ST.run (nextST g JavaGen.nextDouble)
                

    instance RandomGen StdGen

    --- create a standard random generator with a fixed seed
    mkStdGen i = StdGen.new i
    --- create a standard random generator with an arbitrary seed
    newStdGen = do
        r <- JavaGen.new ()
        i <- r.nextInt
        return (mkStdGen i)


    class Random r where
        --- a random value in the given bounds
        randomR     :: forall r g . RandomGen g => (r, r) -> g -> (r, g)
        --- a random value
        random      :: forall r g . RandomGen g => g -> (r, g)
        --- a list of random values in the given bound
        randomRs    :: forall r g . RandomGen g => (r, r) -> g -> [r]
        randomRs bnds g = case randomR bnds g of (!h,!nextg) -> h:randomRs bnds nextg
        --- a list of random values            
        randoms     :: forall r g . RandomGen g => g -> [r]
        randoms g  =  case random g of (!h,!nextg) -> h : randoms nextg

    instance Random Long where
        {--
            We allow only intervals from (Long.minBound `div` 2)
            to (Long.maxBound `div` 2) with the exception (Long.minBound, Long.maxBound),
            which is allowed.
        -}
        randomR (lower,upper) g
           | Long.minBound == lower && Long.maxBound == upper = g.nextLong
           | lower >= Long.minBound  `div` 2L  && upper <= Long.maxBound `div` 2L = let
               range = upper - lower + 1L
               (!rl, !g1)  =  g.nextLong
               n           = rl `mod` range
               !g0         = n + lower
           in (g0, g1)
           | otherwise = error ("invalid range " ++ show (lower, upper) ++ " in Long.randomR")
        random g = randomR (minBound, maxBound) g


    instance Random Int where
        random g = randomR (minBound, maxBound) g
        randomR :: RandomGen a => (Int, Int) -> a -> (Int, a)
        randomR (lower,upper) g = let
                    l = lower.long
                    u = upper.long
                    (li, !g1) = g.next
                    i = li.long
                    r = u - l + 1L
                    n = abs (i `mod` r) + l
                    !g0 = (n `band` 0xffffffffL).int
                in (g0, g1)

    instance Random Integer where
        {--
            We allow only intervals from (Long.minBound `div` 2)
            to (Long.maxBound `div` 2) with the exception (Long.minBound, Long.maxBound),
            which is allowed.
        -}
        randomR (lower,upper) g
           | Long.minBound.big == lower && Long.maxBound.big == upper = case g.nextLong of
                (a, g) -> case g.nextLong of
                    (b, g) -> case g.nextLong of
                        (c, g) -> case g.nextLong of
                            (d, g) -> ((a.big+b.big) * (c.big-d.big), g)
                                
           | otherwise = case g.nextLong of
                (n, g) -> (abs n.big `rem` (upper-lower) + lower, g)
               
        random g = randomR (Long.minBound.big, Long.maxBound.big) g

    instance Random Bool where
        random g = randomR (false, true) g
        randomR (_,_) g = g.nextBool