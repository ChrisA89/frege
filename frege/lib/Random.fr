/// Random numbers
/// This tries to mimick Haskell's System.Random module as far as quickcheck needs it.
/// The type 'JavaGen' is the random number generator found in java.util.Random 
/*
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 */

package frege.lib.Random where

    /**
     * Interface for random number generators
     */
    class RandomGen g where
        next     :: g -> (Int, g)
        nextLong :: g -> (Long, g)
        split    :: g -> (g,g)
        genRange :: g -> (Int, Int)
        genRange _ = (Int.minBound, Int.maxBound)
        

    data JavaGen s = native java.util.Random where
        public  native new         :: ()   -> IO (JavaGen RealWorld)
        public  native mkJUGen new :: Long -> ST s (JavaGen s)
        public  native nextInt     :: JavaGen s -> ST s Int
        public  native nextLong    :: JavaGen s -> ST s Long
        public  native nextFloat   :: JavaGen s -> ST s Float
        public  native nextDouble  :: JavaGen s -> ST s Double
        public  native nextBool nextBoolean :: JavaGen s -> ST s Bool

    abstract data StdGen = StdGen Long where        
        new i = StdGen (Int.long i)
        private nextST (StdGen seed) = do
                r <-JavaGen.mkJUGen seed
                i <- r.nextInt
                l <- r.nextLong
                return (i, StdGen l)
        // get the next integer and a new generator                
        next g = ST.run (g.nextST)                
        // i have no idea if this works                
        split (g@StdGen seed) = (StdGen (seed + i.long); g1) where
                (i,g1) = next g
        nextLong (StdGen seed) = ST.run do
                r <- JavaGen.mkJUGen seed
                l1 <- r.nextLong
                l2 <- r.nextLong
                return (l1, StdGen l2)
                
    instance RandomGen StdGen
    
    /// create a standard random generator
    mkStdGen i = StdGen.new i
    newStdGen = do
        r <- JavaGen.new ()
        i <- r.nextInt
        return (mkStdGen i) 
        

    class Random r where
        randomR     :: forall r g . RandomGen g => (r, r) -> g -> (r, g)
        random      :: forall r g . RandomGen g => g -> (r, g)
        // random r g = r.randomR g.genRange g
        randomRs    :: forall r g . RandomGen g => (r, r) -> g -> [r]
        randomRs bnds g = h:randomRs bnds nextg where
            (!h,!nextg) = randomR bnds g 
        randoms     :: forall r g . RandomGen g => g -> [r]
        randoms g  =  h : randoms nextg where (!h,!nextg) = random g 

    instance Random Long where
        /**
            We allow only intervals from (Long.minBound `div` 2)
            to (Long.maxBound `div` 2) with the exception (Long.minBound, Long.maxBound),
            which is allowed.
        */
        randomR (lower,upper) g
           | Long.minBound == lower && Long.maxBound == upper = g.nextLong
           | lower >= Long.minBound  `div` 2L  && upper <= Long.maxBound `div` 2L = let
               range = upper - lower + 1L
               (rl, g1)  =  g.nextLong
               n      = rl `mod` range
           in (n + lower; g1)
           | otherwise = error ("invalid range " ++ show (lower, upper) ++ " in Long.randomR")
        random g = randomR (minBound, maxBound) g


    instance Random Int where
        random g = randomR (minBound, maxBound) g
        /*
        randomR bnds g
            | traceLn ("randomR: " ++ show bnds ++ " = " ++ show (fst res)) = undefined
            | otherwise = res
            where res = randomXR bnds g
        */
        // randomR :: forall RandomGen a . (Int, Int) -> a -> (Int, a)            
        randomR (lower,upper) g = let
                    l = lower.long
                    u = upper.long
                    (li, g1) = g.next
                    i = li.long
                    r = u - l + 1L
                    n = abs (i `mod` r) + l
                in ((n `band` 0xffffffffL).int; g1)
