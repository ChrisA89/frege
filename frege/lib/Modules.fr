--- Find frege modules 
module frege.lib.Modules where

import Data.List as L()
import Java.Net(URLClassLoader)
import Java.util.Zip
import frege.compiler.Classtools as CT(getFrege)

{--
    Walk a 'ZipFile' and find Frege modules.
    
    The classes inside the ZIP/JAR must be loadable with the given
    'ClassLoader'
    
    Ignores 'ClassNotFoundException's and 'NoClassDefFoundError's
    -}
zipWalk :: ClassLoader -> ZipFile -> IO [(String, CT.FregePackage)]
zipWalk loader zip = do 
          zip.entries           -- read the entries of the zip file
            >>= _.toList        -- make it a list
                                -- remove the directories
            >>= filterM (liftM not . _.isDirectory)
            >>= mapM _.getName  -- give us the names
            >>= mapM (getX loader)       -- load them all 
                . map           -- substitute / and \ with .
                    (flip _.replaceAll "." . dirSep.matcher)
                . map           -- cut off ".class"
                    (flip _.replaceAll "" . classAtEnd.matcher)
                . filter        -- no '$' in the class name
                    (!~ dollars) 
                . filter        -- only "*.class" 
                    (~ classAtEnd)
            >>= return . catMaybes 
    `finally` zip.close
 
--- load a package and return maybe a tuple of package name and 'FregePackage'
getX loader p = fmap (fmap ((,) p)) (getFrege loader p)
        `catch` classNotFound
    where
        classNotFound (ex::ClassNotFoundException) = return Nothing
        
classAtEnd = ´\.class$´
dollars    = ´\$´
dirSep    = ´/|\\´ 

--- the path separator used here
pathSep = fromMaybe ":"  (System.getProperty "path.separator")

--- a pattern that can be used to 'Regex.split' a 'String' by the path separator
pathRE = case regcomp pathSep.quote of
    Right p -> p
    Left _ -> Prelude.error ("cannot regcomp " ++ pathSep.quote)

--- the class path this JVM started with, as ['String']
classPath = (pathRE.splitted • fromMaybe "." • System.getProperty) "java.class.path"

{--
    Walk a directory and find Frege modules.
    
    The classes in the directory must be loadable with the given
    'ClassLoader'
    
    Ignores 'ClassNotFoundException's and 'NoClassDefFoundError's  
    -}
dirWalk :: ClassLoader -> String -> MutableIO File -> IO [(String, CT.FregePackage)]
dirWalk loader sofar file = do
    isd  <- file.isDirectory
    isf  <- file.isFile
    name <- file.getName
    let subof "" x = x
        subof a  x = a ++ "." ++ x
    if isf 
    then do
        if name ~ classAtEnd && name !~ dollars
        then do
            let pack = flip _.replaceAll "" . classAtEnd.matcher $ sofar
            fmap maybeToList (getX loader pack)
        else 
            return []
    else if name !~ dollars
        then do
            subfiles <- file.list
            case subfiles of
                Nothing    -> return []
                Just files -> do
                    ls <- readonly toList files
                    let subwalk f = File.new file f >>= dirWalk loader (subof sofar f)
                    mapM subwalk ls >>= return . concat 
        else return []

--- Walk a directory or a zip file and search for Frege packages.
--- If the argument is neither a directory nor a ZIP/JAR file, an empty list is returned.
walkThing arg = do
        loader  <- CT.makeClassLoader [arg]
        what    <- File.new arg
        isdir   <- what.isDirectory
        if isdir 
            then dirWalk loader "" what
            else ZipFile.new what >>= zipWalk loader
            -- `catch` cnf
                    `catch` fnf
    where
        cnf (ex::ClassNotFoundException) = return []
        fnf (ex::FileNotFoundException) =  do
            stderr.println ("Could not walk " ++ ex.getMessage)
            return []

walkCP = mapM walkThing classPath >>= return . concat
                        
main = mapM_ (\x -> walkThing x >>= mapM_ (println . fst)) classPath     
