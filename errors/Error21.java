/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.18.42 from errors/Error21.fr
  Do not edit this file! Instead, edit the source file and recompile.
*/


package errors;

import frege.MD;
import frege.RT;
import frege.rt.*;
import frege.prelude.Base;
import frege.prelude.Text;

@MD.FregePackage(
  source="errors/Error21.fr", time=1323532011453L,
  ops={
    @MD.Operator(name="<~", kind=1, prec=1), @MD.Operator(name="..", kind=2, prec=13),
    @MD.Operator(name="&&", kind=1, prec=11), @MD.Operator(name="!~", kind=2, prec=2),
    @MD.Operator(name="!=", kind=2, prec=10), @MD.Operator(name="!!", kind=0, prec=1),
    @MD.Operator(name="!==", kind=2, prec=10), @MD.Operator(name="$!", kind=1, prec=16),
    @MD.Operator(name="$", kind=1, prec=16), @MD.Operator(name="%", kind=0, prec=3),
    @MD.Operator(name="++", kind=1, prec=4), @MD.Operator(name="**", kind=1, prec=2),
    @MD.Operator(name="*", kind=0, prec=3), @MD.Operator(name="+", kind=0, prec=4),
    @MD.Operator(name="/=", kind=2, prec=10), @MD.Operator(name="/", kind=0, prec=3),
    @MD.Operator(name="/~", kind=2, prec=2), @MD.Operator(name=":", kind=1, prec=13),
    @MD.Operator(name="<", kind=2, prec=8), @MD.Operator(name=":=", kind=1, prec=15),
    @MD.Operator(name="<=", kind=2, prec=8), @MD.Operator(name="<<", kind=0, prec=5),
    @MD.Operator(name="<=>", kind=2, prec=9), @MD.Operator(name="band", kind=0, prec=6),
    @MD.Operator(name=">=", kind=2, prec=8), @MD.Operator(name="==", kind=2, prec=10),
    @MD.Operator(name="=<<", kind=1, prec=15), @MD.Operator(name="===", kind=2, prec=10),
    @MD.Operator(name=">", kind=2, prec=8), @MD.Operator(name="=~", kind=2, prec=2),
    @MD.Operator(name="??", kind=1, prec=2), @MD.Operator(name=">>", kind=1, prec=14),
    @MD.Operator(name=">>=", kind=1, prec=14), @MD.Operator(name="@", kind=1, prec=15),
    @MD.Operator(name="?~", kind=2, prec=2), @MD.Operator(name="and", kind=1, prec=11),
    @MD.Operator(name="mod", kind=0, prec=3), @MD.Operator(name="bxor", kind=0, prec=7),
    @MD.Operator(name="bshl", kind=0, prec=5), @MD.Operator(name="bor", kind=0, prec=7),
    @MD.Operator(name="bshr", kind=0, prec=5), @MD.Operator(name="div", kind=0, prec=3),
    @MD.Operator(name="compare", kind=2, prec=9), @MD.Operator(name="elem", kind=2, prec=8),
    @MD.Operator(name="~", kind=2, prec=2), @MD.Operator(name="rem", kind=0, prec=3),
    @MD.Operator(name="or", kind=1, prec=12), @MD.Operator(name="notElem", kind=2, prec=8),
    @MD.Operator(name="quot", kind=0, prec=3), @MD.Operator(name="xor", kind=1, prec=12),
    @MD.Operator(name="seq", kind=1, prec=15), @MD.Operator(name="||", kind=1, prec=12),
    @MD.Operator(name="~~", kind=2, prec=2), @MD.Operator(name="~>", kind=0, prec=1),
    @MD.Operator(name="~~~", kind=2, prec=2), @MD.Operator(name="•", kind=1, prec=1)
  },
  imps={"frege.Prelude", "frege.prelude.Base", "frege.prelude.Text"},
  nmss={"Prelude", "PreludeBase", "PreludeText"}, symas={}, symcs={}, symis={}, symts={},
  symvs={
    @MD.SymV(
      name=@MD.QName(pack="errors.Error21", base="bar"), stri="s(s)", sig=1, depth=1, rkind=45
    )
  },
  symls={}, taus={@MD.Tau(tvar="a"), @MD.Tau(tvar="b")},
  rhos={
    @MD.Rho(rhofun=false, rhotau=0), @MD.Rho(rhofun=false, rhotau=1), @MD.Rho(sigma=0, rhotau=1)
  },
  sigmas={@MD.Sigma(rho=0), @MD.Sigma(bound={"a", "b"}, rho=2)}, exprs={@MD.Expr()}
)

final public class Error21 {
final public static Consts ĳ = new Consts();
// function `bar`  s(s)  45
// forall a b.a -> b
// λa_djt -> bar a_djt
// has static worker
final public static FV bar(FV arg$1) {
  tailrecursion: while (true) {
    final FV arg$1f = arg$1;
    // bind  a_djt  to  arg$1f
    // tailcall  bar a_djt
    arg$1 = arg$1f;
    continue tailrecursion;
  }
}
@MD.LambdaClasses(qnames={}, jnames={})
public static class Consts  {
  public Consts() {}
}
}
