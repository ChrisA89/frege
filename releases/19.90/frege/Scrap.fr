--- develop and test new things.
package Scrap where

import frege.compiler.Data
import frege.compiler.Utilities hiding(print, println, error)
import frege.List (Tree, Map(insert,lookup,each), values)

--- helper type class to make 'unAlias' type-wise work on all 'TauT'
private class QNameMatcher n where
    private match :: Global -> n -> QName -> Bool
    private fakeQName :: n -> QName

instance QNameMatcher SName where
    match _ _ _ = false
    fakeQName s = TName (Pack.new "fake.Pack") s.id.value 

instance QNameMatcher QName where
    match g q1 q2 = q1.findit g == q2.findit g
    fakeQName q = q

{--
    'unAlias' tries to replace a TApp with an application of a type alias that would give the same type back.
    This does work for 'Tau' only, source 'TauS's 'TName's will never match.
    -} 
unAlias :: QNameMatcher a => Global -> TauT a -> Tau
unAlias g tau = unAlias (fake tau)
    where
        fake (TFun a b)      = TFun (fake a) (fake b)
        fake (TApp a b)      = TApp (fake a) (fake b)
        fake TVar{pos,var}   = TVar pos var
        fake (Meta x)        = TVar Position.null ("t" ++ show x.uid)
        fake TCon{pos,name}  = TCon{pos, name = fakeQName name}
        
        unAlias  tau = case tau of
                TFun a b       -> TFun (unAlias a) (unAlias b) 
                TApp a b       -> case mapMaybe (aliased tau) aliases of
                                        []      -> TApp (unAlias a) (unAlias b)
                                        (ali:_) -> ali
                _              -> tau
            where
                
                aliased (tau1@TApp a b) (SymA{pos,name,typ}) = case rho of
                        RhoTau [] tau2 -> case unify Nil tau1 tau2 of
                            Just subst -> Just (substTau env aApp) 
                                where env = Tree.map unAlias subst
                            Nothing    -> Nothing
                        _              -> Nothing
                    where
                        rho = typ.rho
                        aApp :: Tau
                        aApp = fold TApp (TCon pos name) (map (TVar pos) typ.bound) 
                        
                aliased _ _ = Nothing
                
                aliases = [ sym | any <- values g.thisTab, sym@SymA{} <- Symbol.follow any g]
                
                
                substTau env (TFun a b)  = TFun (substTau env a) (substTau env b)
                substTau env (TApp a b)  = TApp (substTau env a) (substTau env b)
                substTau env (TVar{var}) 
                    | Just tau <- lookup env var = tau
                substTau env tau         = tau 
                
                
                unify t (TFun a b) (TFun c d) = do
                        t1 <- unify t  a c
                        t2 <- unify t1 b d
                        return t2
                unify t (Meta x) (Meta y) | x.uid == y.uid = Just t
                unify t TCon{name=name1} TCon{name=name2} |  match g name1 name2 = Just t
                unify t (TApp a b) (TApp c d) = do
                        t1 <- unify t  a c
                        t2 <- unify t1 b d
                        return t2
                unify t TVar{var} tau = case lookup t var of
                        Nothing  -> Just (insert t var tau)         -- extend substitution
                        Just old -> case unify Nil old tau of       -- check if previous substitution matches current
                            Just sub | all varSelf (each sub) = Just t
                            _                                 = Nothing
                    where     
                        -- checks whether each variable would be substituted by itself
                        -- if all substitutions are of this form, then we have type equality
                        varSelf (s, TVar{var}) = s == var
                        varSelf _              = false
                unify t _ _ = Nothing