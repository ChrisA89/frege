-- ••••

-- 54494648
-- 93486154

package Issue12 where

import frege.List ()
import frege.lib.ForkJoin

-- instance Eq m a         -- issue 13

{-
class AbsList this where    -- issue 8
    hd :: this elem -> elem
    tl :: this -> this
    app :: this -> this -> this
    -}

-- Issue 10
{-
class M this where
    foo :: this
    bar :: this
    bar = foo


data Id x = Id x

instance M (M a) => Id a where
    foo  = Id M.foo
    -- bar = M.foo
-}

-- Issue 12
{-
fib :: Num a => a -> a
fib n | n == zero = zero
fib n | n == one  = one
fib n = a `par` b `par` a+b
    where
        a = fib (n - (fromInt 2))
        b = fib (n - (fromInt 1))



main (mode : ns) = do
    let numbers = [ n | Right n <- map String.int ns ]
    fibs = map (fib • fromInt) numbers
    nfibs = zip numbers fibs
    case mode of
            "int"  -> println (nfibs :: [(Int, Int)])
            "long" -> println (nfibs :: [(Int, Long)])
            "big"  -> println (nfibs :: [(Int, Integer)])
            other  -> println "usage: fibs [int|long|big] numbers ..."
-}

-- Issue 14
{-
foo :: Ord a => a -> a -> Bool
foo x y = x == y

bar :: Eq a => a -> a -> Bool
bar x y = x < y
-}
