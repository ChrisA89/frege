--- develop and test new things.
package Scrap where

import frege.compiler.Data
import frege.compiler.Utilities hiding(print, println, error)
import frege.List (Tree, values)

--- helper type class to make unAlias type-wise work on all TauT
private class QNameMatcher n where
    private match :: Global -> n -> QName -> Bool

instance QNameMatcher SName where
    match _ _ _ = false

instance QNameMatcher QName where
    match g q1 q2 = q1.findit g == q2.findit g
{--
    'unAlias' tries to replace a TApp with an application of a type alias that would give the same type back.
    This does work for 'Tau' only, source 'TauS's 'TName's will never match.
    -} 
unAlias :: Global -> TauT a -> Maybe Tau
unAlias g tau = unAlias tau
    where
        unAlias  tau = case tau of
            TFun a b -> do
                ta <- unAlias  a
                tb <- unAlias  b
                return (TApp ta tb) 
            TApp a b -> case mapMaybe (aliased tau) aliases of
                []      -> Nothing
                (ali:_) -> Just ali
            _        -> Nothing
    where
        aliased :: TauT a -> Symbol -> Maybe Tau
        aliased (TApp a b) (SymA{name,typ}) = 
            where
                rho = inst typ
        aliased _ _ = Nothing
        aliases = [ sym | any <- values g.thisTab, sym@SymA{} <- Symbol.follow any g]
        -- instantiate sig 