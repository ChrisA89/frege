--- develop and test new things.
module Scrap where
import frege.IO

--Reads a line from standard input device
main _ = do
  isin  <- stdin
  isrin <- IO.InputStreamReader.new isin
  brin <- IO.BufferedReader.fromISR isrin
  -- line <- brin.readLine
  -- println line
  mapM_ println (bitpattern 8 2)


foo1 a = e
    where
        e = (bar â€¢ baz) a 
        bar = baz
        baz = un
        un a = negate a

data T a b = MkT {fst::a, snd::b}

foo = MkT 42 true
bar = foo.{fst="baz",snd=2.0}         

data Bit = Zero | One
derive Show Bit
{--
    @bitpattern n k@ creates a list of lists of length @n@ with @k@ 'One's in descending order
    -} 
bitpattern n k 
    | n < k = []
    | k == 0 = [replicate n Zero]
    | n == k = [replicate k One]
    | otherwise = map (One:) (bitpattern (n-1) (k-1)) ++ map (Zero:) (bitpattern (n-1) k)     