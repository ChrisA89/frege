--- develop and test new things.
module Scrap where
import frege.IO
import frege.List

--Reads a line from standard input device
getLine :: IO String
getLine = do
  isin  <- stdin
  isrin <- IO.InputStreamReader.new isin
  brin  <- IO.BufferedReader.fromISR isrin
  line <- brin.readLine
  return $ fromExceptionMaybe line

fromExceptionMaybe :: Exception (Maybe a) -> a
fromExceptionMaybe (Right (Just r)) = r
fromExceptionMaybe (Right _) = error "get on Nothing"
fromExceptionMaybe (Left l) = error l.getMessage


main _ = do
  println "Enter names:"
  name1 <- getLine
  name2 <- getLine
  println $ flames (unpacked name1) (unpacked name2)
  
flames :: [Char] -> [Char] -> Char
flames name1 name2 = flames' count where
  count = length $ removeCommon name1 name2


flames' count = flamesFrom (unpacked "FLAMES") count


flamesFrom :: [Char] -> Int -> Char
flamesFrom [x] _ = x
flamesFrom s n = flamesFrom ((drop modn s) ++ (take (modn - 1) s)) n where
  modn =  if roundedn == 0 then length s else roundedn where
    roundedn = n `mod` (length s)


removeCommon :: Eq a => [a] -> [a] -> [a]
removeCommon name1 name2 = (name1 `removeMatching` name2) ++ (name2 `removeMatching` name1)


removeMatching :: Eq a => [a] -> [a] -> [a]
removeMatching [] _ = []
removeMatching (x : xs) ys = 
  if not (x `elem` ys) then x : removeMatching xs ys 
  else  removeMatching xs (removeFirst  x ys)


removeFirst :: Eq a => a -> [a] -> [a]
removeFirst _ [] = []
removeFirst y (x : xs) | x == y = xs
removeFirst y (x : xs) = x : removeFirst y xs

