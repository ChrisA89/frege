-- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
 -}


package frege.Prelude where

import frege.prelude.PreludeBase public hiding(Ordering)
import frege.prelude.PreludeBase public (Ordering(Eq EQ, Lt LT, Gt GT))
import frege.prelude.PreludeList public
import frege.prelude.PreludeList public (unique nub, uniqueBy nubBy, fold fold', foldl1 foldl1')
import frege.prelude.Arrays public
import frege.prelude.PreludeText public

-- derived instances for named types
derive Eq   Ordering
derive Ord  Ordering
derive Enum Ordering


derive Eq   Maybe a
derive Ord  Maybe a


derive Eq   Either a b
derive Ord  Either a b

-- ---------------------- list instances -----------------------------
derive Ord      [a]

instance Functor [] where
    fmap = map
instance Monad [] where
    return x = [x]
    xs >>= f = concat ( map f xs )
    fail     = const []


-- ----------------------- tuple instances ---------------------------
derive Ord      ()

derive Eq       (a,b)
derive Ord      (a,b)


derive Eq       (a,b,c)
derive Ord      (a,b,c)

-- ########### functions in asylum here until their prelude package is done #####

print d = printStr (display d);
println d = printStrLn (display d);

{--
    @xs !! n@ is the element with index /n/ of the list /xs/,
    where the head element of a list has index 0.
-}
(x:_)  !! 0         = x
(_:xs) !! n | n > 0 = xs !! (n-1)
(_:_)  !! n         = error ("Prelude.!!: negative index (" ++ show n ++ ")")
[]     !! n         = error ("[] Prelude.!! " ++ show n)
