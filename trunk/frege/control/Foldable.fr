--- Contributed by Daniel Gronau
{-- Many functions here have an @F@ appended to avoid naming conflicts with
    functions from Prelude and Data.List
    -}

package Control.Foldable where

import Data.Maybe
import Control.Monoid

class Foldable ListSource t => t where
    foldF :: Monoid m => t m -> m
    foldF = foldMapF id
    
    foldMapF :: Monoid m => (a -> m) -> t a -> m
    foldMapF f = foldrF (mappend • f) mempty

    foldrF :: (a -> b -> b) -> b -> t a -> b
    foldrF f z t = Endo.appEndo (foldMapF (Endo • f) t) z

    foldlF :: (a -> b -> a) -> a -> t b -> a
    foldlF f z t = Endo.appEndo (Dual.getDual (foldMapF (Dual • Endo • flip f) t)) z

    foldr1F :: (a -> a -> a) -> t a -> a
    foldr1F f xs = fromMaybe (error "foldr1: empty structure") (foldrF mf Nothing xs)
      where
        mf x Nothing = Just x
        mf x (Just y) = Just (f x y)

    foldl1F :: (a -> a -> a) -> t a -> a
    foldl1F f xs = fromMaybe (error "foldl1: empty structure") (foldlF mf Nothing xs)
      where
        mf Nothing y = Just y
        mf (Just x) y = Just (f x y)

    foldMap1F :: Semigroup m => (a -> m) -> t a -> m
    foldMap1F f = maybe (error "foldMap1") id • foldMapF (Just • f) 

    fold1F :: Semigroup m => t m -> m  
    fold1F = foldMap1F id        
    
foldr' :: Foldable t => (a -> b -> b) -> b -> t a -> b
foldr' f z0 xs = foldlF f' id xs z0
  where f' k x z = k $! f x z

{-- 
    Monadic fold over the elements of a structure,
    associating to the right, i.e. from right to left.
-}
foldrM :: (Foldable t, Monad m) => (a -> b -> m b) -> b -> t a -> m b
foldrM f z0 xs = foldlF f' return xs z0
  where f' k x z = f x z >>= k

{-- 
    Fold over the elements of a structure,
    associating to the left, but strictly.
-}
foldlF' :: Foldable t => (a -> b -> a) -> a -> t b -> a
foldlF' f z0 xs = foldrF f' id xs z0
  where f' x k z = k $! f z x

{--
    Monadic fold over the elements of a structure,
    associating to the left, i.e. from left to right.
-}
foldlM :: (Foldable t, Monad m) => (a -> b -> m a) -> a -> t b -> m a
foldlM f z0 xs = foldrF f' return xs z0
  where f' x k z = f z x >>= k

{--
    Map each element of a structure to an action, evaluate
    these actions from left to right, and ignore the results.
-}
-- traverse_ :: (Foldable t, Applicative f) => (a -> f b) -> t a -> f ()
-- traverse_ f = foldr ((*>) . f) (pur ())

{-
    'for_' is 'traverse_' with its arguments flipped.
    
-}
--for_ :: (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
--for_ = flip traverse_

{--
    Map each element of a structure to a monadic action, evaluate
    these actions from left to right, and ignore the results.
    -}
mapM_F :: (Foldable t, Monad m) => (a -> m b) -> t a -> m ()
mapM_F f = foldrF ((>>) • f) (return ())

--- 'forM_' is 'mapM_' with its arguments flipped.
forM_F :: (Foldable t, Monad m) => t a -> (a -> m b) -> m ()
forM_F = flip mapM_F

-- | Evaluate each action in the structure from left to right,
-- and ignore the results.
--sequenceA_ :: (Foldable t, Applicative f) => t (f a) -> f ()
--sequenceA_ = foldr (*>) (pure ())

{--
    Evaluate each monadic action in the structure from left to right,
    and ignore the results.
    -}
sequence_F :: (Foldable t, Monad m) => t (m a) -> m ()
sequence_F = foldrF (>>) (return ())

-- | The sum of a collection of actions, generalizing 'concat'.
-- asum :: (Foldable t, Alternative f) => t (f a) -> f a
-- asum = foldr (<|>) empty

-- | The sum of a collection of actions, generalizing 'concat'.
--msum :: (Foldable t, MonadPlus m) => t (m a) -> m a
--msum = foldr mplus mzero

-- These use foldr rather than foldMap to avoid repeated concatenation.

--- The concatenation of all the elements of a container of lists.
concatF :: Foldable t => t [a] -> [a]
concatF = foldF

{--
    Map a function over all the elements of a container and concatenate
    the resulting lists.
    -}
concatMapF :: Foldable t => (a -> [b]) -> t a -> [b]
concatMapF = foldMapF

-- | 'and' returns the conjunction of a container of Bools.  For the
-- result to be *true*, the container must be finite; *false*, however,
-- results from a *false* value finitely far from the left end.
andF :: Foldable t => t Bool -> Bool
andF = All.getAll • foldMapF All

{--
    'or' returns the disjunction of a container of Bools.  For the
    result to be *false*, the container must be finite; *true*, however,
    results from a *true* value finitely far from the left end.
    -}
orF :: Foldable t => t Bool -> Bool
orF = Any.getAny • foldMapF Any

---  Determines whether any element of the structure satisfies the predicate.
anyF :: Foldable t => (a -> Bool) -> t a -> Bool
anyF p = Any.getAny • foldMapF (Any • p)

--- Determines whether all elements of the structure satisfy the predicate.
allF :: Foldable t => (a -> Bool) -> t a -> Bool
allF p = All.getAll • foldMapF (All • p)

--- The 'sum' function computes the sum of the numbers of a structure.
sumF :: (Foldable t, Num a) => t a -> a
sumF = Sum.getSum • foldMapF Sum

---  The 'product' function computes the product of the numbers of a structure.
productF :: (Foldable t, Num a) => t a -> a
productF = Product.getProduct • foldMapF Product

--- The largest element of a non-empty structure.
maximumF :: (Foldable t, Ord a) => t a -> a
maximumF = foldr1F max

{-- The largest element of a non-empty structure with respect to the
    given comparison function. -}
maximumBy :: Foldable t => (a -> a -> Ordering) -> t a -> a
maximumBy cmp = foldr1F max'
  where max' x y = case cmp x y of
                        Gt -> x
                        _  -> y

--- The least element of a non-empty structure.
minimumF :: (Foldable t, Ord a) => t a -> a
minimumF = foldr1F min

{-- 
    The least element of a non-empty structure with respect to the
    given comparison function.
    -}
minimumBy :: Foldable t => (a -> a -> Ordering) -> t a -> a
minimumBy cmp = foldr1F min'
  where min' x y = case cmp x y of
                        Gt -> y
                        _  -> x

---  Does the element occur in the structure?
elemF :: (Foldable t, Eq a) => a -> t a -> Bool
elemF = anyF • (==)

---  'notElem' is the negation of 'elem'.
notElemF :: (Foldable t, Eq a) => a -> t a -> Bool
notElemF x = not • elemF x

{--
    The 'find' function takes a predicate and a structure and returns
    the leftmost element of the structure matching the predicate, or
    'Nothing' if there is no such element.
    -}
findF :: Foldable t => (a -> Bool) -> t a -> Maybe a
findF p = listToMaybe • concatMapF (\ x -> if p x then [x] else [])

    
instance Foldable Maybe where
    foldrF _ z Nothing = z
    foldrF f z (Just x) = f x z

    foldlF _ z Nothing = z
    foldlF f z (Just x) = f z x

  
instance Foldable [] where
    foldrF = foldr
    foldlF = foldl


    
    