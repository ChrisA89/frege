package frege.control.monad.State where

data StateT s m a = StateT { run :: s -> m (a, s) }

run :: StateT s m a -> s -> m (a, s)
run (StateT k) = k

instance Functor Functor m => (StateT s m) where
  fmap f (StateT k) = StateT (\s -> fmap (\(a, s) -> (f a, s)) (k s))

instance Applicative Monad m => (StateT s m) where
  return a = StateT (\s -> return (a, s))

  StateT mf <*> StateT ma = StateT go
    where
      go s = do
        (f, s')  <- mf s
        (a, s'') <- ma s'
        return (f a, s'') 

instance Monad Monad m => (StateT s m) where
  StateT ma >>= f = StateT go 
    where
      go s = do
        (a, s') <- ma s
        (f a).run s' 

