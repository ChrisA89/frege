package frege.data.HashMap where

import Data.List (lookup)

data HashMap a b = Empty 
                 | ! Branch { b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, bA, bB, bC, bD, bE, bF :: HashMap a b }
                 | ! Bucket [(a,b)]
               
derive Eq HashMap a b  

instance Show (Show a, Show b) => HashMap a b where
    show s = "fromList " ++ show (toList s)            

instance Empty HashMap a where   
  empty = Empty
  null Empty = true
  null _ = false

singleton :: Eq a => a -> b -> HashMap a b
singleton k v = insert k v empty


private emptyBranch :: HashMap a b
private emptyBranch = Branch Empty Empty Empty Empty Empty Empty Empty Empty
                             Empty Empty Empty Empty Empty Empty Empty Empty

private changeBranch :: HashMap a b -> Int -> (HashMap a b -> HashMap a b) -> HashMap a b
private changeBranch (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) n f = case n of
   0  -> Branch (f x0) x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   1  -> Branch x0 (f x1) x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   2  -> Branch x0 x1 (f x2) x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   3  -> Branch x0 x1 x2 (f x3) x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   4  -> Branch x0 x1 x2 x3 (f x4) x5 x6 x7 x8 x9 xA xB xC xD xE xF  
   5  -> Branch x0 x1 x2 x3 x4 (f x5) x6 x7 x8 x9 xA xB xC xD xE xF  
   6  -> Branch x0 x1 x2 x3 x4 x5 (f x6) x7 x8 x9 xA xB xC xD xE xF   
   7  -> Branch x0 x1 x2 x3 x4 x5 x6 (f x7) x8 x9 xA xB xC xD xE xF   
   8  -> Branch x0 x1 x2 x3 x4 x5 x6 x7 (f x8) x9 xA xB xC xD xE xF  
   9  -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 (f x9) xA xB xC xD xE xF
   10 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 (f xA) xB xC xD xE xF  
   11 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA (f xB) xC xD xE xF  
   12 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB (f xC) xD xE xF  
   13 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC (f xD) xE xF   
   14 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD (f xE) xF  
   15 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE (f xF)   

private getBranch :: HashMap a b -> Int -> HashMap a b
private getBranch (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) n = case n of 
   0 -> x0; 1 -> x1; 2 -> x2; 3 -> x3; 4 -> x4; 5 -> x5; 6 -> x6; 7 -> x7;
   8 -> x8; 9 -> x9; 10 -> xA; 11 -> xB; 12 -> xC; 13 -> xD; 14 -> xE; 15 -> xF
   
insert :: Eq a => a -> b -> HashMap a b -> HashMap a b
insert k v s = ins (hashCode k) 0 s where
   ins _ 7 Empty = Bucket [(k,v)]
   ins _ 7 (bucket @ Bucket xs) = Bucket ((k,v) : filter ((!=k) <~ fst) xs)
   ins h k Empty = changeBranch emptyBranch (h `band` 15) (const $ ins (h `bshr` 4) (k + 1) Empty)
   ins h k branch = changeBranch branch (h `band` 15) $ ins (h `bshr` 4) (k + 1) 

delete :: Eq a => a -> HashMap a b -> HashMap a b
delete k s = del (hashCode k) s where
   del _ Empty = Empty
   del _ (Bucket xs) = let xs' = filter ((!=k) <~ fst) xs
                       in if Prelude.null xs' then Empty else Bucket xs'
   del h branch = replaceEmptyBranch $ changeBranch branch (h `band` 15) $ del (h `bshr` 4) 
   replaceEmptyBranch (Branch Empty Empty Empty Empty Empty Empty Empty Empty
                             Empty Empty Empty Empty Empty Empty Empty Empty) = Empty
   replaceEmptyBranch branch = branch
       
contains :: Eq a => a -> HashMap a b -> Bool
contains k s = cnt s (hashCode k) where
   cnt Empty _ = false
   cnt (Bucket xs) _ = elem k $ map fst xs  
   cnt branch h = cnt (getBranch branch (h `band` 15)) (h `bshr` 4)
      
get :: Eq a => a -> HashMap a b -> Maybe b
get k s = get' s (hashCode k) where
   get' Empty _ = Nothing
   get' (Bucket xs) _ = lookup k xs  
   get' branch h = get' (getBranch branch (h `band` 15)) (h `bshr` 4)
      
partition :: Eq a => (a -> b -> Bool) -> HashMap a b -> (HashMap a b, HashMap a b)
partition f s = foldr insPair (empty, empty) $ toList s where
    insPair (k,v) (left, right) | f k v = (insert k v left, right)
                                | otherwise = (left, insert k v right)            
          
fromList :: Eq a => [(a,b)] -> HashMap a b         
fromList xs = foldr insMap empty xs where
   insMap (k,v) m = insert k v m 

size :: HashMap a b -> Int
size m = length (HashMap.toList m)      
                
toList :: HashMap a b -> [(a,b)]          
toList Empty = []
toList (Bucket xs) = xs
toList (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) = 
     concatMap toList [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, xA, xB, xC, xD, xE, xF]
     
mapValues :: (b -> c) -> HashMap a b -> HashMap a c  
mapValues _ Empty = Empty
mapValues f (Bucket xs) = Bucket (map (\(k,v) -> (k,f v)) xs)
mapValues f (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) =
  Branch (mv x0) (mv x1) (mv x2) (mv x3) (mv x4) (mv x5) (mv x6) (mv x7) 
         (mv x8) (mv x9) (mv xA) (mv xB) (mv xC) (mv xD) (mv xE) (mv xF) where
  mv = mapValues f 
     
