package frege.control.trans.MaybeT where

--import Control.Monad.IO.Class
import frege.control.trans.MonadTrans

--import Control.Applicative
--import Control.Monad (MonadPlus(mzero, mplus), liftM, ap)

-- | The parameterizable maybe monad, obtained by composing an arbitrary
-- monad with the 'Maybe' monad.
--
-- Computations are actions that may produce a value or fail.
--
-- The 'return' function yields a successful computation, while @>>=@
-- sequences two subcomputations, failing on the first error.
data MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }

-- | Transform the computation inside a @MaybeT@.
mapMaybeT :: (m (Maybe a) -> n (Maybe b)) -> MaybeT m a -> MaybeT n b
mapMaybeT f = MaybeT <~ f <~ MaybeT.runMaybeT

instance Functor Functor m => MaybeT m where
    fmap f = mapMaybeT (fmap (fmap f))

--instance (Functor m, Monad m) => Alternative (MaybeT m) where
--    empty = mzero
--    (<|>) = mplus

instance Monad Monad m => MaybeT m where
    --fail _ = MaybeT (return Nothing)
    return = lift <~ return
    x >>= f = MaybeT $ do
        v <- MaybeT.runMaybeT x
        case v of
            Nothing -> return Nothing
            Just y  -> MaybeT.runMaybeT (f y)
            
instance MonadFail Monad m => MaybeT m where
    fail _ = MaybeT (return Nothing)            

instance MonadPlus Monad m => MaybeT m where
    mzero = MaybeT (return Nothing)
    mplus x y = MaybeT $ do
        v <- MaybeT.runMaybeT x
        case v of
            Nothing -> MaybeT.runMaybeT y
            Just _  -> return v

instance MonadTrans MaybeT where
    lift = MaybeT <~ liftM Just

--instance MonadIO MonadIO m => MaybeT m where
--    liftIO = lift <~ liftIO