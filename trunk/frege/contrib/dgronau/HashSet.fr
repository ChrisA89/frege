package frege.data.HashSet where

import Data.List (nub, delete)

class Hashable Eq a => a where
   hashCode :: a -> Int
   
instance Hashable Int where
   hashCode x = x   
   
instance Hashable String

data HashSet a = Empty | !Branch (HashSet a) (HashSet a) (HashSet a) (HashSet a) | !Bucket [a]

empty :: HashSet a
empty = Empty

singleton :: Hashable a => a -> HashSet a
singleton x = insert x empty

private mod4 :: Int -> Int
private mod4 x = let m = x `mod` 4 in if m < 0 then -m else m  

size :: HashSet a -> Int
size Empty       = 0
size (Bucket xs) = length xs
size (Branch b1 b2 b3 b4) = size b1 + size b2 + size b3 + size b4  

insert :: Hashable a => a -> HashSet a -> HashSet a
insert x s = ins s (hashCode x) 0 where
   ins Empty _ 15 = Bucket [x]
   ins (Bucket xs) _ 15 = Bucket (x:xs)
   ins Empty h k = case mod4 h of
      0 -> Branch (ins Empty (h `div` 4) (k + 1)) Empty Empty Empty
      1 -> Branch Empty (ins Empty (h `div` 4) (k + 1)) Empty Empty  
      2 -> Branch Empty Empty (ins Empty (h `div` 4) (k + 1)) Empty   
      3 -> Branch Empty Empty Empty (ins Empty (h `div` 4) (k + 1)) 
   ins (Branch b0 b1 b2 b3) h k = case mod4 h of
      0 -> Branch (ins b0 (h `div` 4) (k + 1)) b1 b2 b3 
      1 -> Branch b0 (ins b1 (h `div` 4) (k + 1)) b2 b3  
      2 -> Branch b0 b1 (ins b2 (h `div` 4) (k + 1)) b3   
      3 -> Branch b0 b1 b2 (ins b3 (h `div` 4) (k + 1)) 
   ins _ _ _ = error "malformed hash set"

delete :: Hashable a => a -> HashSet a -> HashSet a
delete x s = del s (hashCode x) where
   del Empty _ = Empty
   del (Bucket xs) _ = let xs' = List.delete x xs
                       in if null xs' then Empty else Bucket xs'
   del (Branch b0 b1 b2 b3) h = case mod4 h of 
            0 -> replaceEmptyBranch $ Branch (del b0 (h `div` 4)) b1 b2 b3 
            1 -> replaceEmptyBranch $ Branch b0 (del b1 (h `div` 4)) b2 b3  
            2 -> replaceEmptyBranch $ Branch b0 b1 (del b2 (h `div` 4)) b3   
            3 -> replaceEmptyBranch $ Branch b0 b1 b2 (del b3 (h `div` 4))                                      
   replaceEmptyBranch (Branch Empty Empty Empty Empty) = Empty
   replaceEmptyBranch branch = branch
       
elem :: Hashable a => a -> HashSet a -> Bool
elem x s = elm s (hashCode x) where
   elm Empty _ = false
   elm (Bucket xs) _ = Prelude.elem x xs  
   elm (Branch b0 b1 b2 b3) h = case mod4 h of
      0 -> elm b0 (h `div` 4)
      1 -> elm b1 (h `div` 4)
      2 -> elm b2 (h `div` 4)
      3 -> elm b3 (h `div` 4)
      
union :: Eq a => HashSet a -> HashSet a -> HashSet a
union Empty s2 = s2
union s1 Empty = s1
union (Bucket xs1) (Bucket xs2) = Bucket (nub $ xs1 ++ xs2)
union (Branch b0 b1 b2 b3) (Branch c0 c1 c2 c3) = 
   Branch (b0 `union` c0) (b1 `union` c1) (b2 `union` c2) (b3 `union` c3)     
         
fromList :: Hashable a => [a] -> HashSet a         
fromList xs = fold (flip insert) empty xs        
                
instance ListSource HashSet where                
  toList Empty = []
  toList (Bucket xs) = xs
  toList (Branch b0 b1 b2 b3) = toList b0 ++ toList b1 ++ toList b2 ++ toList b3  