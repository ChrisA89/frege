package frege.data.HashSet where

import Data.List (nub, delete)

data HashSet a = Empty 
               | ! Branch { b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, bA, bB, bC, bD, bE, bF :: HashSet a }
               | ! Bucket [a]
               
derive Eq HashSet a   

instance Show Show a => HashSet a where
    show s = "fromList " ++ show (toList s)            

instance Empty HashSet where   
  empty = Empty
  null Empty = true
  null _ = false

singleton :: Eq a => a -> HashSet a
singleton x = insert x empty


private emptyBranch :: HashSet a
private emptyBranch = Branch Empty Empty Empty Empty Empty Empty Empty Empty
                             Empty Empty Empty Empty Empty Empty Empty Empty

private changeBranch :: HashSet a -> Int -> (HashSet a -> HashSet a) -> HashSet a
private changeBranch (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) n f = case n of
   0  -> Branch (f x0) x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   1  -> Branch x0 (f x1) x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   2  -> Branch x0 x1 (f x2) x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   3  -> Branch x0 x1 x2 (f x3) x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF   
   4  -> Branch x0 x1 x2 x3 (f x4) x5 x6 x7 x8 x9 xA xB xC xD xE xF  
   5  -> Branch x0 x1 x2 x3 x4 (f x5) x6 x7 x8 x9 xA xB xC xD xE xF  
   6  -> Branch x0 x1 x2 x3 x4 x5 (f x6) x7 x8 x9 xA xB xC xD xE xF   
   7  -> Branch x0 x1 x2 x3 x4 x5 x6 (f x7) x8 x9 xA xB xC xD xE xF   
   8  -> Branch x0 x1 x2 x3 x4 x5 x6 x7 (f x8) x9 xA xB xC xD xE xF  
   9  -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 (f x9) xA xB xC xD xE xF
   10 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 (f xA) xB xC xD xE xF  
   11 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA (f xB) xC xD xE xF  
   12 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB (f xC) xD xE xF  
   13 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC (f xD) xE xF   
   14 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD (f xE) xF  
   15 -> Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE (f xF)   

private getBranch :: HashSet a -> Int -> HashSet a
private getBranch (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) n = case n of 
   0 -> x0; 1 -> x1; 2 -> x2; 3 -> x3; 4 -> x4; 5 -> x5; 6 -> x6; 7 -> x7;
   8 -> x8; 9 -> x9; 10 -> xA; 11 -> xB; 12 -> xC; 13 -> xD; 14 -> xE; 15 -> xF
   
private zipBranch :: (HashSet a -> HashSet a -> HashSet a) -> HashSet a -> HashSet a -> HashSet a   
private zipBranch f (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) 
                    (Branch y0 y1 y2 y3 y4 y5 y6 y7 y8 y9 yA yB yC yD yE yF) = 
   Branch (f x0 y0) (f x1 y1) (f x2 y2) (f x3 y3) (f x4 y4) (f x5 y5) (f x6 y6) (f x7 y7)     
          (f x8 y8) (f x9 y9) (f xA yA) (f xB yB) (f xC yC) (f xD yD) (f xE yE) (f xF yF)   

insert :: Eq a => a -> HashSet a -> HashSet a
insert x s = ins (hashCode x) 0 s where
   ins _ 7 Empty = Bucket [x]
   ins _ 7 (bucket @ Bucket xs) = if Prelude.elem x xs then bucket else Bucket (x:xs)
   ins h k Empty = changeBranch emptyBranch (h `band` 15) (const $ ins (h `bshr` 4) (k + 1) Empty)
   ins h k branch = changeBranch branch (h `band` 15) $ ins (h `bshr` 4) (k + 1) 

delete :: Eq a => a -> HashSet a -> HashSet a
delete x s = del (hashCode x) s where
   del _ Empty = Empty
   del _ (Bucket xs) = let xs' = List.delete x xs
                       in if Prelude.null xs' then Empty else Bucket xs'
   del h branch = replaceEmptyBranch $ changeBranch branch (h `band` 15) $ del (h `bshr` 4) 
   replaceEmptyBranch branch | branch == emptyBranch = Empty
                             | otherwise = branch
       
member :: Eq a => a -> HashSet a -> Bool
member x s = mbr s (hashCode x) where
   mbr Empty _ = false
   mbr (Bucket xs) _ = elem x xs  
   mbr branch h = mbr (getBranch branch (h `band` 15)) (h `bshr` 4)
      
union :: Eq a => HashSet a -> HashSet a -> HashSet a
union Empty s2 = s2
union s1 Empty = s1
union (Bucket xs1) (Bucket xs2) = Bucket (nub $ xs1 ++ xs2)
union branch1 branch2 = zipBranch union branch1 branch2
          
unions :: Eq a => [HashSet a] -> HashSet a
unions ss = foldr union empty ss       

difference :: Eq a => HashSet a -> HashSet a -> HashSet a          
difference Empty _ = Empty
difference s1 Empty = s1
difference (Bucket xs1) (Bucket xs2) = let xs' = filter (\x1 -> not $ elem x1 xs2) xs1 
                                       in if Prelude.null xs' then Empty else Bucket xs'           
difference branch1 branch2 = zipBranch difference branch1 branch2

intersection :: Eq a => HashSet a -> HashSet a -> HashSet a 
intersection Empty _ = Empty
intersection _ Empty = Empty          
intersection (Bucket xs1) (Bucket xs2) = let xs' = filter (\x1 -> elem x1 xs2) xs1 
                                         in if Prelude.null xs' then Empty else Bucket xs'
intersection branch1 branch2 = zipBranch intersection branch1 branch2
          
partition :: Eq a => (a -> Bool) -> HashSet a -> (HashSet a, HashSet a)
partition f s = foldr insPair (empty, empty) $ toList s where
    insPair x (left, right) | f x = (insert x left, right)
                            | otherwise = (left, insert x right)            
          
fromList :: Eq a => [a] -> HashSet a         
fromList xs = foldr insert empty xs  

size :: HashSet a -> Int
size s = length (HashSet.toList s)      
                
instance ListSource HashSet where                
  toList Empty = []
  toList (Bucket xs) = xs
  toList (Branch x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF) = 
     concatMap toList [x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, xA, xB, xC, xD, xE, xF]
     
                
     