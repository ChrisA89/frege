{-
    Copyright Â© 2011, Ingo Wechsung
 
    All rights reserved.
 
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

    -   Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

    -   Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.
 
    *THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.*
-}

{--
 
    This package provides common list functions for the Frege language.
    
    It contains all functions described in section 9.1 and chapter 20 of the 
    _Haskell 2010 Language Report_. Where possible, the code has been ported
    from public Haskell source code 
    (http:\/\/www.haskell.org\/ghc\/docs\/latest\/html\/libraries\/base\/src\/Data-List.html).
    
    In addition to the common list functions, three type classes capture common
    properties of types that are like ordinary lists:
    ['Empty'] provides 'null' to test for empty containers and 'empty' to create one.
    ['ListLike'] provides 'length', 'head', 'tail' and '++'
    ['ListSource'] is the type class for types that can be converted to lists ('toList'). 
    There are instances for 'String', 'Maybe', 'Either' and arrays. 
    
    The functions originating from Haskell have been changed so that they take
    instances of 'ListSource' instead of just plain lists. Instances of 'ListSource'
    can also appear on the right side of the arrow in list comprehension qualifiers.
    Hence, functions and list comprehensions work with 'String's, 
    despite 'String' not being a list in Frege.  

    This package is /implementation specific/ insofar as the compiler may
    assume that certain items are defined here in a certain way.
    Changes may thus lead to compiler crashes or java code that 
    will be rejected by the java compiler.
    
    In particular, desugared list comprehensions will reference 'ListSource.toList'.
    
    This package is implicitly imported.
 -}

{-
 * $Author$
 * $Revision$
 * $Id$
 * $Date$
-}


protected package frege.prelude.PreludeList where

import frege.prelude.PreludeBase
import frege.prelude.PreludeBase(StringJ)

{--
    A class for containers/collections that have an empty value.
    -}
class Empty c where
    --- *true* if and only if the container is 'empty'
    null :: c e -> Bool
    --- the empty container
    empty :: c e
     
{--
    A class for data types that can be viewed as list.
    
    Such data types are instances of 'Empty' 
    and support 'head', 'tail', 'length' and concatenation ('++')
    
    This class provides no means to construct a list. 
    -}
class ListLike  Empty list => list where
    --- computes the length of a list in a type dependend way
    length :: list elem -> Int
    --- Get the element at the head of a non empty list, otherwise 'undefined'
    head :: list elem -> elem
    --- Get the tail elements. This is 'undefined' if the list is empty.
    tail :: list elem -> list elem
    --- concatenate two lists, strings or whatever
    ---  > empty ++ x == x && x ++ empty == x
    (++) :: list e -> list e -> list e

{--
    A class for things we can make a list from
    -}
class ListSource t  where
    --- converts the value to a list
    toList :: t e -> [e]


--  ----------------------
--  Instances for ListLike
--  ----------------------

instance ListLike StringJ where
    
    -- 'String.length' is defined in the 'StringJ' type
    
    --- The first element of a 'String' or 'undefined' if the string is empty.
    head s = s.itemAt 0 
    
    --- The tail of a 'String' or undefined if it is empty
    tail s = strtail s 1
    
    -- concatenation is defined in 'String.++'
     
    --- True if and only if the length of the string is 0
    null s = length s == 0
    
    --- A polymorphic empty string. 
    --- This is the only string value whose type is not 'String' that must ever exist.
    pure native empty frege.RT.emptyString :: StringJ elem   

instance ListLike [] where
    --- Get the length of a list
    length as = len as 0 where
        len (_:as) !acc = len as (acc+1)
        len []     !acc = acc
    
    --- The first element of a list or 'undefined' if it is empty.
    head (hd:_) = hd
    head []     = error "Prelude.head []"
    
    --- The tail of a list or undefined if it is empty
    tail (_:tl) = tl
    tail []     = error "Prelude.tail []"
    
    --- Concatenation of 2 lists
    (a:as) ++ bs = a : as ++ bs
    _      ++ bs = bs
    
    --- *true* for the empty list, false otherwise
    null [] = true
    null _  = false
    
    --- the empty list
    empty = []

--  ------------------------
--  Instances for ListSource
--  ------------------------
instance ListSource [] where
    --- The list itself.
    toList xs = xs

instance ListSource Maybe where
    --- Singleton with element from 'Just' or empty list for 'Nothing' 
    toList (Just a) = [a]
    toList Nothing  = []

instance ListSource  Either l where
    --- Singleton with element from 'Right' or empty list for 'Left'
    toList (Left _) = []
    toList (Right a) = [a]

instance ListSource StringJ where
    --- List of characters, computed lazily in contrast to 'unpacked'
    toList s
        | null s    = []
        | otherwise = head s : toList (tail s)

--
-- Auxiliary functions needed here and re-exported from appropriate package
--
protected listToMaybe xs = listToMaybe xs.toList where      -- reexported from frege.prelude.Maybe
    listToMaybe (a:_) = Just a
    listToMaybe []    = Nothing

--
--  Conversion between 'String's and lists and String functions that need the above
--

--- Eagerly converts a 'String' to a list.
unpacked :: String -> [Char]
unpacked s = loop (length s - 1) [] where
        loop :: Int -> [Char] -> [Char]
        loop i res
            | i >= 0 = loop (i-1) (s.charAt i : res)
            | otherwise = res

{--
    convert a list of characters to a string
    > packed ['a', 'b', 'c' ] == "abc"
    Not very efficient, may be replaced by a java function that does it with a
    string buffer later.
    -}
packed [] = ""
packed cs = fold (++) "" (map ctos cs)

{--
    @strhead s n@ returns the initial portion of s with at most n characters.
    if s.'length' is lower than n, only so much characters are returned.
    -}
strhead s i = substr s 0 (min i s.length)

--
--  Common list functions. Includes what Haskell 2010 has in Data.List
--       

{--
    'and' returns the conjunction of a Boolean list. 
    For the result to be *true*, the list must be finite; *false*,
    however, results from a *false* value at a finite index of a finite or infinite list.
    -}
and as = and as.toList where
    and (x:xs) = x && and xs
    and _      = true

{--
    'or' returns the disjunction of a Boolean list. 
    For the result to be *false*, the list must be finite; *true*,
    however, results from a *true* value at a finite index of a finite or infinite list.
    -}
or as = or as.toList where
    or (x:xs) = x || or xs
    or _      = false    

{--
    @any p xs@ tells if any element of /xs/ has property /p/.
    This is equivalent to @fold (||) false (map p xs)@ except that
    'any' stops at the first element that has property /p/.

    Note that, according to the identity above,  @any p []@ is always @false@.
    -}
any p as = any p as.toList where
    any p (x:xs) = if p x then true else any p xs
    any p [] = false

{--
    @all p xs@ tells if all elements of /xs/ have property /p/.
    This is equivalent to @fold (&&) true (map p xs)@ except that
    'all' stops at the first element that hasn't property /p/.

    Note that, according to the identity above, @all p []@ is always @true@.
    -}
all p as = all p as.toList where
    all p (x:xs) = if p x then all p xs else false
    all p [] = true


{--
    'concat' concatenates the sublists of the argument which is a list of list.
    It is ok if the argument is an infinite list or any of the sublists is infinite.
    In either case, the result will also be infinite.
    -}
concat xss = foldr (++) empty xss

{--
    Map a function over a list and concatenate the results.
    -}
concatMap f as = [ x | xs <- map f as, x <- xs ]    

{--
    @cycle xs@ builds a value that is an infinite repetition of /xs/, which must not be empty.
    -}
cycle :: (Empty list, ListSource list) => list a -> [a]
cycle xs | null xs   = error "Prelude.cycle []"
         | otherwise = ys ++ cycle ys
         where ys = toList xs

{--
    @filter p xs@ returns the list of elements /x/ from /xs/ where (/p/ /x/) holds.

    'filter' will not stop to evaluate its argument list until the first
    element with the property asked for is found. For example

    > filter (==true) (repeat false)

    will loop forever, whereas

    > filter iseven (iterate succ 1n) where iseven n = n `band` 1n == 0n

    will faithfully deliver the list of positive integers that are divisible by 2,
    one by one.
    -}
filter p es = filter' es.toList where
    filter' (x:xs) = if p x then x:filter' xs else filter' xs
    filter' []     = []



{--
    'foldl', applied to a binary operator, a starting value (typically the
    left identity of the operator), and a list, reduces the list using
    the binary operator, from left to right:

    > fold f z [x1, x2, ..., xn] = (((z `f` x1) `f` x2) `f` ...) `f` xn

    Because the operator is applied lazily, 'foldl' typically builds up
    large thunks which, when finally evaluated, may overflow the stack space.
    Therefore, the use of 'fold' instead of 'foldl' is strogly suggested.

    This function exists merely for compatibility with Haskell.

-}
foldl f acc as = foldl f acc as.toList where
    foldl f acc []     = acc
    foldl f acc (x:xs) = foldl f  (f acc x) xs

{--
    'fold', applied to a binary operator, a starting value (typically the
    left identity of the operator), and a list, reduces the list using
    the binary operator, from left to right:
    > fold f z [x1, x2, ..., xn] = (((z `f` x1) `f` x2) `f` ...) `f` xn
    'fold' runs in constant stack space, but consumes the entire list before
    returning a result, so it must not be applied to infinite lists.

    This function is known as @foldl'@ in Haskell where there is a bias in favour
    of using 'foldr'.

    In the environment of the JVM stack space is precious, hence one should prefer 'fold'
    when one has the choice.

    'fold' is strict in the accumulator, hence in
    every recursion the intermediate result is evaluated, thus preventing build up of
    possibly huge thunks that result in stack overflows on evaluation.
    -}
fold f !acc as = fold acc as.toList where 
    fold !acc []     = acc
    fold !acc (x:xs) = fold (f acc x) xs

--- The sum of the numbers in a list, same as ('fold' ('+') 'zero')
sum = fold (+) zero

--- The product of the numbers in a list, same as ('fold' ('*') 'one')
product = fold (*) one

--- The minimal value of a non empty list, same as ('foldl1' 'min') 
minimum = foldl1 min

--- The maximal value of a non empty list, same as ('foldl1' 'max') 
maximum = foldl1 max

{--
    'foldl1' is a variant of 'fold' that has no starting value argument
    and thus must be applied to nonempty lists only.
    -}
foldl1 f as 
    | (x:xs) <- as.toList = fold f x xs
foldl1 f _                = error "Prelude.foldl1 f []"

{--
    'scanl' is similar to 'fold' but returns a list of successive
    reduced values from the left:
    > scanl f z [x1, x2, ...] = [z, z `f` x1, (z `f` x1) `f` x2, ... ]
    The follwoing property holds for all finite lists /xs/:
    > last (scanl f z xs) == fold f z xs
    In contrast to 'fold', 'scanl' can operate on infinite lists.
     -}
scanl f !q as = scanl' f q as.toList where
    scanl' f !q (x:xs) = q : scanl' f (f q x) xs
    scanl' f !z []     = [z]

{--
    'scanl1' is similar to 'scanl', but takes the 'head' of the list as
    starting element and is thus only applicable to non-empty lists.
    > scanl1 f [x1, x2, ...] = [x1, x1 `f` x2, (x1 `f` x2) `f` ...]
    -}
scanl1 f as
    | (x:xs) <- as.toList = scanl f x xs
scanl1 f _                = error "Prelude.scanl1 f []"


--- 'scanr' is the right-to-left dual of 'scanl'.
--- Note that
--- > head (scanr f z xs) == foldr f z xs.

scanr f q0 ys = scanr f q0 ys.toList where --                  :: (a -> b -> b) -> b -> [a] -> [b]
    scanr _ q0 []           =  [q0]
    scanr f q0 (x:xs)       =  f x q : qs
                               where qs@(q:_) = scanr f q0 xs
 

--- 'scanr1' is a variant of 'scanr' that has no starting value argument.
-- scanr1 :: ListSource b => (a -> a -> a) -> b a -> [a]
scanr1 f ys = scanr1 f ys.toList where
    scanr1 _ []             =  []
    scanr1 _ [x]            =  [x]
    scanr1 f (x:xs)         =  f x q : qs
                               where qs@(q:_) = scanr1 f xs 

{--
    Fold over a list from right to left.
    > foldr f a (x1:x2:x3:[])
    is the same as
    > x1 `f` (x2 `f` (x3 `f` a))
    Note that, if /f/ is strict in the second argument,
    @foldr f@ will need stack space proportional
    to the length of the list.
    But if /f/ is lazy in it's second argument, 'foldr' works on infinite lists.

    If /f/ is commutative, the list finite and lazyness not an issue,
    'fold' may be the better choice since it runs with constant stack space.
    Otherwise, if /f/ is not commutative, 'foldrs' will trade time and heap space for
    stack space by 'fold'ing the 'flip'ped /f/ over the 'reverse'd list.
    -}
foldr :: ListSource c => (e->a->a) -> a -> c e -> a
foldr f acc as = foldr acc as.toList where
    foldr acc (x:xs) =  x `f` (foldr acc xs)
    foldr acc []     = acc

--- 'foldr1' is a variant of 'foldr' that has no starting argument, and thus must be applied to a non-empty list 
foldr1 f as 
    | (x:xs) <- as.toList = foldr f x xs
    | otherwise           = error "Prelude.foldr1 f []"    

{--
    This function may be used in place of
    > foldr f z xs
    if /f/ is strict in its right operand and /xs/ is a finite list,
    in cases where 'foldr' exceeds the stack size, which is usually quite limited in
    the JVM.

    'foldrs' will need extra CPU cycles and maybe (temporary) heap space for
    'reverse'-ing its list argument, before 'fold'ing the 'flip'ped /f/ over it.

    If /f/ is commutative, you may simply use 'fold' instead.

    The following property holds for all finite lists /xs/:
    > foldr f z xs == foldrs f z xs
    -}
foldrs f z xs = fold (flip f) z (reverse xs)

{--
   The 'unfoldr' function is a \`dual\' to 'foldr': while 'foldr'
   reduces a list to a summary value, 'unfoldr' builds a list from
   a seed value.  The function takes the element and returns 'Nothing'
   if it is done producing the list or returns 'Just' @(a,b)@, in which
   case, @a@ is a prepended to the list and @b@ is used as the next
   element in a recursive call.  For example,

   > iterate f == unfoldr (\x -> Just (x, f x))

   In some cases, 'unfoldr' can undo a 'foldr' operation:

   > unfoldr f' (foldr f z xs) == xs

   if the following holds:

   > f' (f x y) = Just (x,y)
   > f' z       = Nothing

   A simple use of unfoldr:

   > unfoldr (\b -> if b == 0 then Nothing else Just (b, b-1)) 10
   >  [10,9,8,7,6,5,4,3,2,1]
-}
unfoldr      :: (b -> Maybe (a, b)) -> b -> [a]
unfoldr f b  =
  case f b of
   Just (a,new_b) -> a : unfoldr f new_b
   Nothing        -> []


--- Returns all but the last element from a list.
--- The following property holds for all non-empty finite lists /xs/:
--- > init xs ++ [last xs] == xs
init es = init' es.toList where
    init' [x]    = []
    init' (x:xs) = x : init' xs
    init' _      = error "Prelude.init: empty list"


--- Returns the last element of a list by taking the 'head' of the 'reverse'd list.
--- See also 'init'
last = head â¢ reverse

{--
    The 'inits' function returns all initial segments of the argument,
    shortest first.  For example,

    > inits "abc" == ["","a","ab","abc"]
    -}
-- inits                   :: [a] -> [[a]]
inits ys = inits ys.toList where
    inits (x:xs)            =  [[]] ++ map (x:) (inits xs)
    inits _                 =  [[]]
    

{--
    The 'tails' function returns all final segments of the argument,
    longest first.  For example,

    > tails "abc" == ["abc", "bc", "c",""]
    -}
tails ys = tails ys.toList where
    tails (xxs@(_:xs))      =  xxs : tails xs
    tails _                 =  [[]]


{--
    @map f xs@ applies /f/ to each element of /xs/ and builds a new list from the results.

    Usage of 'map' is safe on infinite lists, it delivers the result list one by
    one as it is demanded.
    -}
map f list = map' (toList list) where
    map' (x:xs) = (f x):map' xs
    map' _ = []

{--
    reverses a list
    -}
reverse xs = rev xs.toList [] where
    rev (x:xs) ys = rev xs (x:ys)
    rev _     ys = ys

{--
    @take n xs@ returns the starting sequence of /xs/ with at most /n/ elements.
    If /n/ is greater than the 'length' of /xs/, the result is /xs/.

    For negative /n/, the result is undefined.

    The following property holds for all lists /xs/ and non negative /n/:
    > take n xs ++ drop n xs == xs
    -}
take n as = take n as.toList where
    take 0 _ = []
    take n (x:xs) = x:take (n-1) xs
    take n _ = []

{--
    @drop n xs@ returns what remains from /xs/ after the /n/ leading elements have been dropped.
    If /n/ is greater than the 'length' of /xs/, the result is the empty list.

    For negative /n/, the result is undefined.

    The following property holds for all lists /xs/ and non negative /n/:
    > take n xs ++ drop n xs == xs
    -}
drop n as = drop n as.toList where
    drop 0 lst = lst
    drop n (x:xs) = drop (n-1) xs
    drop n _ = []

{--
    @splitAt n xs@ returns a tuple where first element is /xs/ prefix of length /n/ 
    and the second element is the
    remainder of the list.
-}
splitAt n xs = (take n xs, drop n xs)

{--
    @takeWhile p xs@ takes leading elements from /xs/ while they satisfy the predicate /p/.

    Example:
    > takeWhile (<7) [1,2,3,9,4] == [1,2,3]
    -}
takeWhile p as = takeWhile p as.toList where
    takeWhile p (x:xs) = if p x then x:takeWhile p xs else []
    takeWhile p _      = []

{--
    @takeUntil p xs@ is the same as @takeWhile (not \@ p) xs@
    -}
takeUntil p as = takeUntil p as.toList where
    takeUntil p (x:xs) = if p x then [] else x:takeUntil p xs
    takeUntil p _      = []
    

{--
    @dropWhile p xs@ drops leading elements from /xs/ that satisfy the predicate /p/.

    The following holds for all lists /xs/
    > takeWhile p xs ++ dropWhile p xs == xs
    -}
dropWhile p as = dropWhile p as.toList where    
    dropWhile p (list@(x:xs)) = if p x then dropWhile p xs else list
    dropWhile p _             = []
    

{--
    @dropUntil p xs@ is the same as @dropWhile (not â¢ p) xs@

    Consequently, for all lists /xs/
    > takeUntil p xs ++ dropUntil p xs == xs
    -}
dropUntil p as = dropUntil p as.toList where
    dropUntil p (list@(x:xs)) = if p x then list else dropUntil p xs
    dropUntil p _             = []
    

{--
    @span p xs@ returns a tuple whose first element is the longest prefix of @xs@
    elements that satisfy @p@ and whose second element is the remainder of the list.

    > span p xs == (takeWhile p xs, dropWhile p xs)
    -}
span p xs = (takeWhile p xs, dropWhile p xs)

{--
    'break', applied to a predicate /p/ and a list /xs/, 
    returns a tuple where the first element is the longest prefix
    (possibly empty) of /xs/ elements that do *not* satisfy /p/ 
    and the second element is the remainder of the list.

    @break p@ is equivalent to @span (not â¢ p)@.
-}
break p = span (not â¢ p)

{--
    @group xs@ returns a list of sub-lists made of adjacent equal elements in @xs@.
    All sublist are not empty and their concatenation yields again @xs@.
    -}
group as = group as.toList where
    group (x:xs) = (x:ys) : group zs where (!ys,!zs) = span (x==) xs
    group _ = []

{--
    @groupBy f xs@ groups by function @f@ instead of (==) that is used by @group@
    -}
groupBy f as = groupBy f as.toList where 
    groupBy f (x:xs) = (x:ys) : groupBy f zs where (!ys,!zs) = span (x `f`) xs
    groupBy f _      = []

{--
    @e `elem` xs@ is true if and only if at least one of the elements of /xs/ equals /e/.
    -}
elem e es = elem e es.toList where
    elem e (h:t) = e == h || elem e t
    elem e _     = false

--- opposite of 'elem'
notElem e es = not ( elem e es )

--- @elemBy f@ is a more general version of 'elem' that uses /f/ instead of '=='.
--- See also: 'using'
elemBy f e es = elemBy f e es.toList where 
    elemBy f e []    = false
    elemBy f e (h:t) = e `f` h || elemBy f e t

--- lookup a key in an association list
--- Will not be exported by default, because we have class operation Map.lookup
protected lookup a as = lookup a as.toList where
    lookup key ((a,b):as)
        | key == a  = Just b
        | otherwise = lookup key as
    lookup key []   = Nothing
     
{--
    'unique' removes duplicate elements from an unsorted list,
    which may or may not be faster than using @(uniq â¢ sort)@

    However, the follwoing holds
    > sort (unique xs) == uniq (sort xs)
 -}
unique as = unique as.toList where
    unique (e:es) = e : unique (filter (e !=) es)
    unique _ = []

{--
    @uniqueBy f@ is a more general form of 'unique',
    but uses ('elemBy' @f@) instead of 'elem' to decide
    whether equal elements are contained in the list.

    The following holds:
    > sortBy (comparing f) (uniqueBy (using f) xs) == uniqBy (using f) (sortBy (comparing f) xs)
    -}
uniqueBy f (e:es) = e : uniqueBy f (filter (not â¢ f e) es)
uniqueBy f _     = []

{--
    'uniq' removes adjacent equal elements from a list
    > uniq [1, 2, 2, 3, 2] = [1, 2, 3, 2]
    This is most useful on sorted lists to remove duplicates.
    For unsorted lists use 'unique'
    -}
uniq xs = uniq xs.toList where
    uniq (x:xs) = x : uniq (dropWhile (x==) xs)
    uniq _ = []

{--
    @uniqBy f@ is a variant of 'uniq' that uses /f/ instead of '=='.
    In the result, there are no two adjacent elements /x/ and /y/ where
    the relation @y `f` x@ holds.

    This is most useful on sorted lists with projection functions that
    compare parts of the value for equality. See also 'using'.

    > uniqBy (using fst) [(1, 1), (2, 2), (2, 3), (3, 4), (2, 5)]
    >   = uniqBy (\a\b -> fst a == fst b) [(1, 1), (2, 2), (2, 3), (3, 4), (2, 5)]
    >   = [(1, 1), (2, 2), (3, 4), (2, 5)]

    The example shows that the first of adjacent, equal comparing elements is retained.
 -}
uniqBy f xs = uniqBy xs.toList where
    uniqBy (x:xs) = x : uniqBy (dropWhile (f x) xs)
    uniqBy _      = []

{--
    @partitioned p xs@ splits /xs/ in 2 lists and returns them as a tuple @(xs1, xs2)@,
    such that  /xs1/
    contains all elements of /xs/ that satisfy predicate /p/ and /xs2/ contains
    those that do not.

    The order of the elements of /xs/ is reversed in the results.
    The argument must be finite, it is processed in a tail recursive loop.
    
    See also 'partition', which is lazy and works on infinite lists, but may be slower
    on finite lists because if processes the argument twice.

    The follwoing is true for all finite lists xs
    > let ps = partitionR p xs
    > in    all p (fst ps)
    >    && (not @ any p) (snd ps)
    >    && length (fst ps) + length (snd ps) == length xs
    >    && all (`elem` xs) (fst ps)
    >    && all (`elem` xs) (snd ps)
    >    && all (\x -> x `elem` fst ps || x `elem` snd ps) xs
    -}
partitioned p lst = loop lst.toList [] [] where
    loop (x:xs) as bs
        | p x         = loop xs (x:as) bs
        | otherwise   = loop xs as (x:bs)
    loop _     as bs = (as,bs)

--- A variant of 'partition' that satisfies the Haskell 2010 specification.
--- When the order of the results is irrelevant or one actually wants the results reversed, consider 'partitioned'.     
partition p lst = (filter p lst, filter (not â¢ p) lst)

{--
    @intercalate xs xss@ is equivalent to @concat (intersperse xs xss)@    
    -}
intercalate xs xss = concat (intersperse xs xss)


{--
    @intersperse a xs@ inserts /a/ between every two elements of /xs/
    > intersperse 0 (1..3) == [1,0,2,0,3]
    -}
intersperse a bs = intersperse a bs.toList where    
    intersperse a [x]      = [x]
    intersperse a (x:ys)   = x:a:intersperse a ys
    intersperse a []       = []

{--
    @repeat a@ builds an infinite list where all elements are /a/.
    -}
repeat a = a:repeat a

-- @replicate n x@ is a list of length /n/ with /x/ the value of every element.
replicate n = take n â¢ repeat


{--
    @iterate f a@ builds the infinite list @[a, f a, f (f a), ...]@
    -}
iterate f a = a:iterate f (f a)



{--
    @zip as bs@ builds a list of tuples of corresponding elements of /as/ and /bs/.
    Trailing elements of the longer list are ignored.
    > zip (1,2,3) "ab" = [(1, "a"), (2, "b")]
    -}
zip as bs = zip as.toList bs.toList where
    zip (x:xs) (y:ys) = (x,y):zip xs ys
    zip _ _  = []

{--
    'unzip' turns a list of tuples into a tuple of lists.
    It is the opposite of 'zip' and the follwoing holds for genuine lists
    > (curry zip @ unzip) xs == xs
    But note that
    > (unzip @ curry zip) (as, bs) == (as,bs)
    will only hold if @length as == length bs@
    -}
unzip [] = ([], []);
unzip ((a,b):rest) = (a:as, b:bs)
    where {
        (as, bs) = unzip rest;
    };

{--
    @zipWith f xs ys@ zips two lists with function /f/ instead of the standard '(,)' that
    is used by 'zip'
    -}
zipWith f as bs = zipWith f as.toList bs.toList where    
    zipWith f (x:xs) (y:ys) = f x y:zipWith f xs ys
    zipWith _ _ _ = []


{--
    @sortBy f xs@ is a stable sort (merge sort), it uses /f/ to decide the order of elements.
    If @a `f` b@ is true, then /a/ comes before /b/, otherwise /b/ comes before /a/.

    see also 'comparing',  'descending'
-}
sortBy f as = sortBy' f (toList as) where
    sortBy' _ []  = [];
    sortBy' _ [x] = [x];
    sortBy' by xs = merge (sortBy' by l1) (sortBy' by l2)
        where
            (l1,l2) = splitted xs
            merge [] x = x
            merge x [] = x
            merge (a:as) (b:bs)
                 | a `by` b   = a : merge as (b:bs)
                 | otherwise  = b : merge (a:as) bs
            splitted [] = ([],[])
            splitted xs = (take n2 xs, drop n2 xs) where n2 = length xs `quot` 2

{-- 
    Standard sort uses operator '<=' and demands that the type of 
    the list elements is an instance of 'Ord'
    -}
sort = sortBy (<=)        

-- --------------------------------------------------------------------------------------
-- -------------- taken from Data.List --------------------------------------------------
-- --------------------------------------------------------------------------------------

--- The 'transpose' function transposes the rows and columns of its argument.
--- For example,
--- > transpose [[1,2,3],[4,5,6]] == [[1,4],[2,5],[3,6]]
transpose               :: [[a]] -> [[a]]
transpose []             = []
transpose ([]   : xss)   = transpose xss
transpose ((x:xs) : xss) = (x : [h | (h:_) <- xss]) : transpose (xs : [ t | (_:t) <- xss])

--- The 'subsequences' function returns the list of all subsequences of the argument.
--- > subsequences "abc" == ["","a","b","ab","c","ac","bc","abc"]
-- subsequences            :: [a] -> [[a]]
subsequences xs         =  [] : nonEmptySubsequences xs

{--
    The 'nonEmptySubsequences' function returns the list of all subsequences 
    of the argument, except for the empty list.
    > nonEmptySubsequences "abc" == ["a","b","ab","c","ac","bc","abc"]
    -}
nonEmptySubsequences as = nonEmptySubsequences as.toList where 
    nonEmptySubsequences (x:xs)  =  [x] : foldr f [] (nonEmptySubsequences xs)
        where f ys r = ys : (x : ys) : r
    nonEmptySubsequences _       =  []

--- The 'permutations' function returns the list of all permutations of the argument.
--- > permutations "abc" == ["abc","bac","cba","bca","cab","acb"]
-- permutations            :: [a] -> [[a]]
permutations xs = permutations xs.toList
  where
    permutations xs0  =  xs0 : perms xs0 []
    perms []     _  = []
    perms (t:ts) is = foldr interleave (perms ts (t:is)) (permutations is)
      where interleave    xs     r = let (_,zs) = interleave' id xs r in zs
            interleave' _ []     r = (ts, r)
            interleave' f (y:ys) r = let (us,zs) = interleave' (f â¢ (y:)) ys r
                                     in  (y:us, f (t:y:us) : zs)

{-- 
    The 'mapAccumL' function behaves like a combination of 'map' and
    'fold'; it applies a function to each element of a list, passing
    an accumulating parameter from left to right, and returning a final
    value of this accumulator together with the new list.
    -}
mapAccumL :: (ListSource src) => 
          (acc -> x -> (acc, y)) -- Function of elt of input list
                                    -- and accumulator, returning new
                                    -- accumulator and elt of result list
          -> acc            -- Initial accumulator 
          -> src x            -- Input list
          -> (acc, [y])     -- Final accumulator and result list
mapAccumL f s ys = mapAccumL f s ys.toList where           
    mapAccumL _ s []        =  (s, [])
    mapAccumL f s (x:xs)    =  (s'',y:ys)
                               where (s', y ) = f s x
                                     (s'',ys) = mapAccumL f s' xs

{--
    The 'mapAccumR' function behaves like a combination of 'map' and
    'foldr'; it applies a function to each element of a list, passing
    an accumulating parameter from right to left, and returning a final
    value of this accumulator together with the new list.
    -}
mapAccumR :: (ListSource src) =>
             (acc -> x -> (acc, y))     -- Function of elt of input list
                                        -- and accumulator, returning new
                                        -- accumulator and elt of result list
            -> acc              -- Initial accumulator
            -> src x            -- Input list
            -> (acc, [y])               -- Final accumulator and result list
mapAccumR f s ys = mapAccumR f s ys.toList where
    mapAccumR _ s []        =  (s, [])
    mapAccumR f s (x:xs)    =  (s'', y:ys)
                               where (s'',y ) = f s' x
                                     (s', ys) = mapAccumR f s xs

{--
    The 'stripPrefix' function drops the given prefix from a list.
    It returns 'Nothing' if the list did not start with the prefix
    given, or 'Just' the list after the prefix, if it does.

    > stripPrefix "foo" "foobar" -> Just "bar"
    > stripPrefix "foo" "foo" -> Just ""
    > stripPrefix "foo" "barfoo" -> Nothing
    > stripPrefix "foo" "barfoobaz" -> Nothing
    -}
stripPrefix pre prefix = stripPrefix pre.toList prefix.toList where 
    stripPrefix [] ys = Just ys
    stripPrefix (x:xs) (y:ys)
     | x == y = stripPrefix xs ys
    stripPrefix _ _ = Nothing

{--
    The 'isPrefixOf' function takes two lists and returns 'True'
    iff the first list is a prefix of the second.
    -}
isPrefixOf as bs = isPrefixOf as.toList bs.toList where
    isPrefixOf (x:xs) (y:ys)=  x == y && isPrefixOf xs ys
    isPrefixOf [] _         =  true
    isPrefixOf _  []        =  false

{--
    The 'isSuffixOf' function takes two lists and returns 'True'
    iff the first list is a suffix of the second.
    Both lists must be finite.
    -}
-- isSuffixOf              :: (Eq a) => [a] -> [a] -> Bool
isSuffixOf x y          =  reverse x `isPrefixOf` reverse y

{--
    The 'isInfixOf' function takes two lists and returns 'True'
    iff the first list is contained, wholly and intact,
    anywhere within the second.

    Example:

    > isInfixOf "Haskell" "I really like Haskell." == True
    > isInfixOf "Ial" "I really like Haskell." == False
-}
-- isInfixOf               :: (Eq a) => [a] -> [a] -> Bool
isInfixOf needle haystack = any (isPrefixOf needle) (tails haystack)

{-- 
    The 'elemIndex' function returns the index of the first element
    in the given list which is equal (by '==') to the query element,
    or 'Nothing' if there is no such element.
-}
-- elemIndex       :: Eq a => a -> [a] -> Maybe Int
elemIndex x     = findIndex (x==)

-- | The 'elemIndices' function extends 'elemIndex', by returning the
-- indices of all elements equal to the query element, in ascending order.
-- elemIndices     :: Eq a => a -> [a] -> [Int]
elemIndices x   = findIndices (x==)

-- | The 'find' function takes a predicate and a list and returns the
-- first element in the list matching the predicate, or 'Nothing' if
-- there is no such element.
-- find            :: (a -> Bool) -> [a] -> Maybe a
find p          = listToMaybe â¢ filter p

-- | The 'findIndex' function takes a predicate and a list and returns
-- the index of the first element in the list satisfying the predicate,
-- or 'Nothing' if there is no such element.
-- findIndex       :: (a -> Bool) -> [a] -> Maybe Int
findIndex p     = listToMaybe â¢ findIndices p

-- | The 'findIndices' function extends 'findIndex', by returning the
-- indices of all elements satisfying the predicate, in ascending order.
-- findIndices      :: (a -> Bool) -> [a] -> [Int]
findIndices p ls = loop 0 ls.toList
     where
       loop _ [] = []
       loop n (x:xs) | p x       = n : loop (n + 1) xs
                     | otherwise = loop (n + 1) xs

-- ---------------------------------------------------------------------
-- -------------------- monadic list functions -------------------------
-- ---------------------------------------------------------------------

{--
    Turn a list of monadic values @[m a]@ into a monadic value with a list @m [a]@
  
    sequence [Just 1, Just 3, Just 2] = Just [1,2,3]
    This version of 'sequence' runs in constant stack space,
    but needs heap space proportional to the size of the input list.
    -}

sequence :: (ListSource list, Monad m) => list (m a) -> m [a]
sequence xs = loop xs.toList []
        where                  
            loop [] acc     = return (reverse acc)
            loop (m:ms) acc = do a <- m; loop ms (a:acc)


--- @mapM f@ is equivalent to @sequence â¢ map f@
mapM  :: (ListSource list, Monad m) => (a -> m b) -> list a -> m [b]
mapM  f = sequence  â¢ map f â¢ toList

--- @mapM_ f@ is equivalent to @sequence_ â¢ map f@
mapM_ :: (ListSource list, Monad m) => (a -> m b) -> list a -> m ()
mapM_ f = sequence_ â¢ map f â¢ toList

--- @forM xs f@ = @mapM_ f xs@ 
forM  xs f = (sequence  â¢ map f â¢ toList) xs
forM_ xs f = (sequence_ â¢ map f â¢ toList) xs

--- @foldM f a xs@ folds a monadic function @f@ over the list @xs@.
foldM :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
foldM f a bs = fm f bs a
    where
        fm f (b:bs) a = a `f` b >>= fm f bs
        fm f []     a = return a

--- @foldM_@ is the same as 'foldM', but discards the result
foldM_ f a bs = foldM f a bs >> return ()

{-- foldr ('>>') over a list of monadic values for side effects -}
sequence_ xs = loop xs.toList
    where
        loop (m:ms) = do _ <- m; loop ms
        loop []     = return ()             -- foldr (>>) (return ()) xs
