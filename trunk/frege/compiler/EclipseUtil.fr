{--
    Provide functions for use in the fregIDE
-}

{-
 * $Author$
 * $Revision$
 * $Date$
 * $Id$
-}

package frege.compiler.EclipseUtil where

import frege.compiler.Data
import frege.compiler.Utilities as U(isPSigma)
import frege.compiler.Import as I
import frege.List (each, values)
import Data.List as DL(sortBy)
import frege.compiler.DocUtils as DU(docit, docSym, DL, Doc, emitHtml)
import frege.lib.PP()
import frege.IO(PrintWriter)


--- This is $Revision$
public version = v "$Revision$" where
    v (m ~ #(\d+)#) | Just g <- m.group 1 = g.atoi
    v _ = 0

{--
    Create a list of triples with  position, namespace and package
    for every import except the automatic ones.
    -}
imports :: Global -> [(Position, String, String)]
imports g = [ (pos, NSName.unNS ns, Pack.un pack) | 
                (ns, pos) <- (sortBy (comparing snd) • each) g.sub.nsPos,
                pos != Position.null,
                pack <- maybe [] (:[]) (g.namespaces.lookup ns) ]

{--
    Create the list of symbols ordered by position
    -}
symbols :: Symtab -> [Symbol]
symbols tab = (sortBy positionAndName • filter wanted • values) tab
    where
        positionAndName a b = case Symbol.pos a <=> Symbol.pos b of
                                    Eq -> comparing (QName.base • Symbol.name) a b
                                    ne -> ne 
        wanted :: Symbol -> Bool 
        wanted sym 
            | sym.{alias?}                       = false
            | Local{} <- sym.name                = true
            -- sym.vis == Private                 = false
            | sym.name.base ~ ´^(chg|upd|has|let|anon|lc)\$´ = false
            | otherwise                          = true

exprSymbols = U.foldEx false collectsyms []
    where
        collectsyms acc Let{env} = do
            syms <- mapSt U.findV env
            stio (Left (acc ++ syms))
        collectsyms acc _        = stio (Left acc)

verbose g t
    | isPSigma t = "?"
    | otherwise    = t.rho.nicer g

{--
    Make a label for a symbol
    -}
label g SymI{clas,typ} = clas.nicer g ++ "  "   ++ verbose g typ
label g SymV{name,typ} = name.base    ++ " :: " ++ verbose g typ 
label g SymD{name,typ} = name.base    ++ " :: " ++ verbose g typ             
label g sym            = sym.name.base 
                    
{--
    Increment the pass number in the state
    -}
passDone = changeST Global.{sub <- SubSt.{nextPass <- (1+)}}    

{--
    Failure tolerant version of 'Global.thisTab' for use in TreeModelBuilder.
    In case of syntax errors, there is no symtab yet, hence Global.thisTab
    is undefined. This, in turn, causes an exception in Eclipse. We can avoid
    this by just pretending the symbol table was empty.
    -}
thisTab :: Global -> Symtab
thisTab g = case g.packages.lookup g.thisPack of
        Just st -> st
        Nothing -> Symtab.Nil

--- a java string writer
data StringWriter s = native java.io.StringWriter where
    native new :: () -> ST s (StringWriter s)
    native printer new :: StringWriter RealWorld -> IO PrintWriter
    native flush :: StringWriter RealWorld -> IO ()
    native toString :: StringWriter RealWorld -> IO String

packDocumentation :: String -> StG String
packDocumentation pack = do
    g <- getST
    r <- I.getFP pack
    case r of
        Right (Just fp) -> case fp.doc of
            ""   -> return ("Undocumented package " ++ pack)
            text -> do 
                let doc = Doc $ docit g (Just text)
                sw <-  doio $  StringWriter.new ()
                p  <-  doio $  StringWriter.printer sw
                changeST Global.{gen <- GenSt.{printer=p}}
                emitHtml false doc      -- html without CSS, eclipse does not understand    
                doio $ g.printer.close
                doio $ sw.flush
                result <- doio $ sw.toString
                return result
        Left ex -> return (ex.getMessage)            
        sonst   -> return ("(java class?) " ++ pack)
     
symbolDocumentation :: Symbol -> StG String
symbolDocumentation sym = do
    sw <-  doio $  StringWriter.new ()
    p  <-  doio $  StringWriter.printer sw
    changeST Global.{gen <- GenSt.{printer=p}}
    g <- getST
    let ds = docSym g sym
        dl = DL (Just "func") [ds]
        doc = Doc [dl]
    emitHtml false doc      -- html without CSS, eclipse does not understand    
    doio $ g.printer.close
    doio $ sw.flush
    result <- doio $ sw.toString
    return result