--- compare different Set implementations

module examples.SetBenchmk where

import frege.IO

import frege.List as AVL()
import frege.data.Set as T()
import frege.data.HashSet as H()

data AVLSet a = AVLSet (AVL.Tree a ())

asTypeOf :: a -> a -> a
asTypeOf a b = a

class TestCandidate x where
    singleton :: Int -> x Int
    elemOf    :: Int -> x Int -> Bool
    fromList  :: [Int] -> x Int
    size      :: x Int -> Int
    
instance TestCandidate AVLSet where
    singleton a = AVLSet (AVL.Tree.insert AVL.Nil a ())
    elemOf a (AVLSet s) = isJust (s.lookup a)
    fromList xs = AVLSet (AVL.fromKeys xs)
    size (AVLSet s) = length (AVL.values s)
    
instance TestCandidate T.Set where
    singleton = T.singleton
    elemOf = T.member    
    fromList xs = T.fromList xs
    size = T.size

instance TestCandidate H.HashSet where
    singleton = H.singleton
    elemOf = H.elem    
    fromList xs = H.fromList xs
    size = H.size

test1 s ntimes = and (zipWith elemOf elems sets) where
    elems = replicate ntimes 42
    sets  = map singleton elems  `asTypeOf` [s]

test2 s ntimes = size (fromList (1..ntimes) `asTypeOf` s) == ntimes

runTest t times = do
    start <- currentTimeMillis ()
    if (t times)
    then do
        end   <- currentTimeMillis ()
        println (show (end-start) ++ "ms.")
    else println "Test not passed"

main [] = main [show 1_000_000]
main (arg:_) 
    | Right times <- String.int arg = do
        let t1 = show times ++ " singletons, lookups:     "
        let t2 = show times ++ " ascending inserts, size: " 
        print ("AVL  " ++ t1) >> runTest  (test1 (AVLSet AVL.Tree.Nil)) times
        print ("Tree " ++ t1) >> runTest  (test1 (T.Set.empty)) times
        print ("Hash " ++ t1) >> runTest  (test1 (H.empty)) times
        print ("AVL  " ++ t2) >> runTest  (test2 (AVLSet AVL.Tree.Nil)) times
        print ("Tree " ++ t2) >> runTest  (test2 (T.Set.empty)) times
        print ("Hash " ++ t2) >> runTest  (test2 (H.empty)) times
        print ("AVL  " ++ t1) >> runTest  (test1 (AVLSet AVL.Tree.Nil)) times
        print ("Tree " ++ t1) >> runTest  (test1 (T.Set.empty)) times
        print ("Hash " ++ t1) >> runTest  (test1 (H.empty)) times
    | otherwise = error "need integer argument"
        