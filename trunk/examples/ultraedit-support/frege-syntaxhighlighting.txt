/L14"Frege" String Chars = "#'
/Escape Char = \
/File Extensions = FR fr
/Delimiters = 	 ()[]{}:;"',.|=+*/\@
/Line Comment = --
/Line Comment Alt = ---
/Block Comment On = {-
/Block Comment Off = -}
/Block Comment On Alt = {--
/Block Comment Off Alt = -}
/Indent Strings =   "let" "do" "where"
/Function String 1 = "% ++^([A-Za-z0-9]+ +::*^)$"
/Function String 2 = "% ++pure +native +^([A-Za-z0-9]+^)"
/Function String 3 = "% ++native +^([A-Za-z0-9]+^)"
/Function String 4 = "xlerb"
/Function String 5 = "xlerb"

/C1"Reserved IDs"
abstract
break
case class
data derive do
else
false forall
if in infix infixl infixr instance interface import
let
module
native
of
then true type
package private protected public pure
where
/C2"Special IDs"
_
as
boolean byte
char continue
default double
error except exit extends
final float for
hiding
int
long
this trace traceLn
otherwise
return
short
undefined unless
void
when while
/C3"User defined operators"
** `
/C4"Standard Functions"
and any all append ascending atod atof atoi atol autoflush
chr close comparing concat const contains cstos ctos curry
delete deletek descending diff display double drop dropUntil dropWhile
each either elem elemBy elementType empty
filter flip float flush fold foldl foldl1 foldr foldrs from fromMaybe fromKeys fromList fst
getline getlines grep
head
id including init insert insertkv int intersection intersperse isEmpty isJust isNothing iterate
join joined
keys keyvalues
last length long lookup
map max maxBound maybe min minBound
new not notElem null
open or ord
packed partition pred print println printLn
quote quotemeta
read regcomp repeat reverse
scanl scanl1 show showsub snd sort sortBy stderr stdin stdout stocs strhead strlen strtail substr succ sum
tail take takeUntil takeWhile
uncurry undefined union uniq uniqBy unique uniqueBy unpacked update updatekv unzip using
values
xor
zip zipWith
/C5"Classes & Types"
Bool
Char
Double
Either
Float
Int Integer IO
Long
Matcher Maybe Monad
Regex
ST State String
/C6"Sondersymbole"
(
)
,
->
: ::
;
<-
=
=>
[
\
]
{
|
}
~>
/C7"Constructor Symbols"
Just
Left
Nothing
Right
/C8"Constructor Words"
** A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

