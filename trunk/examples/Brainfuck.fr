package examples.Brainfuck where

data Tape = Tape { left :: [Int], cell :: Int, right :: [Int] }

instance Show Tape where
   show (Tape ls c rs) = show [reverse ls,[c],rs]  

data Op = Plus | Minus | GoLeft | GoRight | Output | Input | Loop [Op]

derive Eq Op
derive Show Op

removeComments :: [Char] -> [Char]
removeComments xs = filter (`elem` (unpacked "+-<>.,[]")) xs

parseOp :: [Char] -> Maybe (Op, [Char])
parseOp ('+':cs) = Just (Plus, cs)
parseOp ('-':cs) = Just (Minus, cs)
parseOp ('<':cs) = Just (GoLeft, cs)
parseOp ('>':cs) = Just (GoRight, cs)
parseOp ('.':cs) = Just (Output, cs)
parseOp (',':cs) = Just (Input, cs)
parseOp ('[':cs) = case parseOps cs of
  (prog, (']':cs')) -> Just (Loop prog, cs')
  _ -> Nothing  
parseOp _ = Nothing

parseOps :: [Char] -> ([Op],[Char])
parseOps cs = go cs [] where
  go cs acc = case parseOp cs of
    Nothing -> (reverse acc, cs)
    Just (op, cs') -> go cs' (op:acc)

parse :: String -> [Op]
parse prog = case parseOps $ removeComments $ unpacked prog of
   (ops, []) -> ops
   (ops, rest) -> error $ "Parsed: " ++ show ops ++ ", Rest: " ++ packed rest

exec :: [Op] -> Tape -> IO Tape
exec [] tape = return tape
exec (Plus:prog) tape = exec prog tape.{cell <- succ} 
exec (Minus:prog) tape = exec prog tape.{cell <- pred}
exec (GoLeft:prog) (Tape ls c rs) = 
  let (hd,tl) = uncons ls in exec prog (Tape tl hd (c:rs))
exec (GoRight:prog) (Tape ls c rs) = 
  let (hd,tl) = uncons rs in exec prog (Tape (c:ls) hd tl)
exec (Output:prog) tape = do
  printAsChar tape.cell 
  exec prog tape
exec (Input:prog) tape = do
  n <- getChar
  exec prog tape.{cell = n}
exec (Loop loop:prog) (tape @ Tape ls 0 rs) = exec prog tape      
exec (Loop loop:prog) tape = do
  tape' <- exec loop tape
  exec (if tape'.cell == 0 then prog else (Loop loop:prog)) tape'

execute :: [Op] -> IO Tape
execute prog = exec prog (Tape [] 0 [])
    
private uncons :: [Int] -> (Int,[Int])    
private uncons [] = (0,[])
private uncons (x:xs) = (x,xs)

private native systemInRead "java.lang.System.in.read" :: () -> IO (Exception Int)

private getChar :: IO Int
private getChar = do
   (Right i) <- systemInRead ()
   return i 
   
private printAsChar :: Int -> IO ()
private printAsChar i = print $ packed [Char.from i]   
   
main _ = do
  tape <- execute $ parse helloWorld
  println ""
  println tape
  
-- example programs

helloWorld =
  ">+++++++++[<++++++++>-]<.>+++++++[<++++>-]<+.+++++++..+++.[-]>++++++++" ++
  "[<++++>-]<.>+++++++++++[<+++++>-]<.>++++++++[<+++>-]<.+++.------.--------." ++
  "[-]>++++++++[<++++>-]<+.[-]++++++++++."

nineToZero =
  "++++++++++++++++++++++++++++++++[>+>+<<-]" ++
  ">>+++++++++++++++++++++++++<<++++++++++[>>.-<.<-]"
      




