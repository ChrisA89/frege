
--- Contributed by Daniel Gronau

protected package frege.prelude.Math where

import frege.prelude.PreludeBase(Double, Float, Int, Long, IO, Num, Real)
import frege.control.Semigroupoid
import Java.lang.Math as J public()

--- Returns a 'Double' with a positive sign, greater than or equal to 0.0 and less than 1.0.
public         native random    java.lang.Math.random   :: () -> IO Double

infixr 15  `**`




--- square
sqr :: Num a => a -> a
sqr x = x * x

class  Floating Real 𝖗 ⇒ 𝖗 where
    pi                  ∷ 𝖗

    --- The 'Double' value that is closer than any other to e, the base of the natural logarithms.
    e                   ∷ 𝖗
    exp                 ∷ 𝖗 → 𝖗
    
    {--
      Returns the largest (closest to positive infinity) value that is
      less than or equal to the argument and is equal to a mathematical integer.
    
      Special cases:
    
        - If the argument value is already equal to a mathematical integer,
        then the result is the same as the argument.
        - If the argument is NaN or an infinity or positive zero or
        negative zero, then the result is the same as the argument.

    -}
    floor               ∷ 𝖗 -> Double
    log                 ∷ 𝖗 → 𝖗 
    sqrt                ∷ 𝖗 → 𝖗
    (**)                ∷ 𝖗 → 𝖗 → 𝖗
    logBase             ∷ 𝖗→ 𝖗 → 𝖗
    sin                 ∷ 𝖗 → 𝖗
    cos                 ∷ 𝖗 → 𝖗
    tan                 ∷ 𝖗 → 𝖗
    asin                ∷ 𝖗 → 𝖗
    acos                ∷ 𝖗 → 𝖗
    atan                ∷ 𝖗 → 𝖗
    sinh                ∷ 𝖗 → 𝖗
    cosh                ∷ 𝖗 → 𝖗
    tanh                ∷ 𝖗 → 𝖗
    asinh               ∷ 𝖗 → 𝖗
    acosh               ∷ 𝖗 → 𝖗
    atanh               ∷ 𝖗 → 𝖗
    --- Returns the closest long to the argument, with ties rounding up.
    round               ∷ 𝖗 → Long
    logBase x y         =  log y / log x
    -- tan  x              =  sin  x / cos  x
    -- tanh x              =  sinh x / cosh x

instance Floating Double where
    acos = J.acos
    asin = J.asin
    atan = J.atan
    cos  = J.cos
    cosh = J.cosh
    e    = J.e
    exp  = J.exp
    floor = J.floor
    log  = J.log
    pi = J.pi
    asinh x = log (x + sqrt (1.0 + x*x))
    acosh x = log (x + (x + 1.0) * sqrt ((x - 1.0)/(x + 1.0)))
    atanh x = 0.5 * log ((1.0 + x) / (1.0 - x))
    (**) = (J.**)
    round = J.round
    sin  = J.sin
    sinh = J.sinh
    sqrt = J.sqrt
    tan  = J.tan    
    tanh = J.tanh

instance Floating Float where
    acos = Double.float . J.acos
    asin = Double.float . J.asin
    atan = Double.float . J.atan
    cos  = Double.float . J.cos
    cosh = Double.float . J.cosh
    e    = J.e.float
    exp  = Double.float . J.exp
    floor = J.floor
    log  = Double.float . J.log
    pi = J.pi.float
    asinh x = log (x + sqrt (1.0 + x*x))
    acosh x = log (x + (x + 1.0) * sqrt ((x - 1.0)/(x + 1.0)))
    atanh x = 0.5 * log ((1.0 + x) / (1.0 - x))
    (x**y) = Double.float (x J.** y)
    round = J.round
    sin  = Double.float . J.sin
    sinh = Double.float . J.sinh
    sqrt = Double.float . J.sqrt
    tan  = Double.float . J.tan    
    tanh = Double.float . J.tanh
