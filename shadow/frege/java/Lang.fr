{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011, Ingo Wechsung
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:
    
        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
    
        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission. 
        
    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
 * Here live all classes and interfaces from @java.lang@ except those already
 * introduced in the Prelude.
 -}


protected package frege.java.Lang where

import frege.prelude.PreludeBase
import frege.prelude.PreludeBase public(Throwable, ClassNotFoundException)
import frege.prelude.PreludeIO
-- import frege.prelude.PreludeText
import frege.prelude.PreludeMonad


-- type Throwable = PreludeBase.Throwable
-- type ClassNotFoundException = PreludeBase.ClassNotFoundException

instance Exceptional Throwable where
    pure native javaClass "java.lang.Throwable.class" :: Class Throwable

instance Exceptional ClassNotFoundException where
    pure native javaClass "java.lang.ClassNotFoundException.class" :: Class ClassNotFoundException

protected data IOException = pure native java.io.IOException
derive Exceptional IOException

--- A @java.lang.Runnable@, can be created from 'IO' or 'ST' actions
data Runnable = native java.lang.Runnable where
    --- nowarn: argument of type 'ST' s ()
    --- Create a java Runnable from a 'ST' @s@ '()'.
    --- When the @run@ method is called from java code, the ST action will be performed.
    native new frege.runtime.SwingSupport.runnable :: ST s () -> ST s (Mutable s Runnable)
    --- perform the ST action that is associated with this runnable. 
    native run :: Mutable s Runnable -> ST s ()

-- Class Loading & Resources
private pure native md "frege.runtime.Meta.FregePackage.class" :: Class a

-- type ClassLoader = Mutable RealWorld ClassLoaderIO
data ClassLoader = mutable native java.lang.ClassLoader where
        native getClassLoader :: Class a -> IO ClassLoader
        current = getClassLoader md

-- protected data OutputStream = native java.io.OutputStream 
protected data PrintStream = mutable native java.io.PrintStream

data Appendable = native java.lang.Appendable where
    native append :: Mutable s Appendable -> Char -> ST s (Mutable s Appendable)
                        throws IOException
                  |  Mutable s Appendable -> String -> ST s (Mutable s Appendable)
                        throws IOException

-- (<<) :: Show a => IOMut Appendable -> a -> IOMut Appendable
-- app << a = do app <- app; app.append (display a)
 
data System = pure native java.lang.System where
    pure native getenv       java.lang.System.getenv            :: String -> Maybe String
    pure native getProperty  java.lang.System.getProperty       :: String -> Maybe String
    --- warning: use of exit is discouraged, use 'setExitCode'
    native exit              java.lang.System.exit              :: Int -> IO ()
    native currentTimeMillis java.lang.System.currentTimeMillis :: () -> IO Long
    native nanoTime          java.lang.System.nanoTime          :: () -> IO Long
    native err "java.lang.System.err" :: Mutable RealWorld PrintStream
    native out "java.lang.System.out" :: Mutable RealWorld PrintStream 


data CharSequence = pure native java.lang.CharSequence where
    pure native charAt                                  :: CharSequence -> Int -> Char
    pure native length                                  :: CharSequence -> Int
    pure native subSeq  subSequence                     :: CharSequence -> Int -> Int -> CharSequence
    pure native toString                                :: CharSequence -> String
    pure native fromString "(java.lang.CharSequence)"   :: String -> CharSequence


--- Resembles @java.lang.StringBuilder@
data StringBuilder = native java.lang.StringBuilder where
    native new      :: String -> ST s (Mutable s StringBuilder)
    native toString :: Mutable s StringBuilder -> ST s String
