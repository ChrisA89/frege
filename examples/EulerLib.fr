{--
    Frequently used functions and values used in Project Euler
    http://projecteuler.net/
-}
package examples.EulerLib where

--- Overloaded values and operations on integers
class Natural Integral a => a where
    --- product
    prod :: [a] -> a
    prod xs = fold (*) one []
    
    --- sum
    sum :: [a] -> a
    sum  xs = fold (+) zero []
    
    --- the list of prime numbers
    primes :: [a]
    
    --- predicate to check if a number is prime
    isPrime :: a -> Bool
    
    --- primefactors in descending order
    factors :: a -> [a]
    
    --- primefactors where equal factors are replaced by their product
    factorProducts :: a -> [a]
    
    primes = fromInt 2 : filter isPrime (iterate (fromInt 2 +) (fromInt 3))
    isPrime n = n > fromInt 1 && pred n primes where
        pred n (a:as)
            | a*a > n          = true
            | n `rem`a == zero = false
            | otherwise        = pred n as
        pred n []            = true       -- to avoid a throws clause
    factors n = loop primes n [] where
        loop (a:as) !n !acc
            | a*a > n           = n:acc
            | n `rem` a == zero = loop (a:as) (n `quot` a) (a:acc)
            | otherwise         = loop as n acc
        loop _ _ _              = []            -- avoid throws clause
    factorProducts n = u (factors n) where
        u [] = []
        u as = prod (takeWhile (head as==) as) : u (dropWhile (head as==) as)


instance Natural Int
instance Natural Long
instance Natural Integer
                  