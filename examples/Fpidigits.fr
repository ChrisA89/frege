package Fpidigits where

{-
    Almost as fast as the java version, yet needs lots of memory
    The reason is that loop builds up bigger and bigger thunks,
    so that in the end:
    
    One instance of "frege.rt.Lam1$1" loaded by 
    "sun.misc.Launcher$AppClassLoader @ 0x298a0738" 
    occupies 207.840.920 (99,57%) bytes. 
    The memory is accumulated in one instance of "frege.rt.Lam4$2" 
      
-}
import frege.List ()
-- import frege.IO   (stdout `<<`)

data F = !F {q :: Integer, r :: Integer, s :: Integer, t :: Integer}

main (arg:_)
    | Right n <- arg.int  = println (result n)-- loop 10 0 (str2 f0 1) n
    where result n = (joined "" • map show • take n)  (str2 f0 1)



f0 = F 1n 0n 0n 1n
fi :: Int -> F
fi n = let k = n.big in F k (4n*k+2n) 0n (2n*k+1n)
spaces = "                                         "


loop :: Int -> Int -> [Int] -> Int -> IO ()
loop n s xs limit | s >= limit = do
    print (strhead spaces n)
    print "\t:"
    println s
loop 0 s xs limit    = do
    print "\t:"
    println s
    loop 10 s xs limit
loop n s (x:xs) limit = do
    print x
    loop (n-1) (s+1) xs limit

flr  x           (F q r s t) = (q*x + r) `div` (s*x + t)
comp1 (F q r s t) (F u v w x) = F (q*u+r*w) (q*v+r*x) (t*w) (t*x)
comp2 (F q r s t) (F u v w x) = F (q*u) (q*v+r*x) (s*u) (s*v+t*x)

str z (xss@x:xs) | y == flr 4n z = let
                                    !f = F Integer.ten (y*(-Integer.ten)) 0n 1n
                                    !cfz = comp1 f z
                                in show y : str cfz xss
             | otherwise    =   str (comp2 z x) xs
             where
                !y = flr 3n z

infixr 4 `!:`
!a `!:` as = a:as

str2 z !n
    | y == flr 4n z = let
            !f = F Integer.ten ((-Integer.ten)*y) 0n 1n
            !cfz = comp1 f z
        in y.int !: str2 cfz n
    | otherwise = str2 (comp2 z (fi n)) (n+1)
    where
        y = flr 3n z