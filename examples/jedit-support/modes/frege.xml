<?xml version="1.0"?>

<!DOCTYPE MODE SYSTEM "xmode.dtd">

<!--
	Frege mode (derived from Haskell mode by Stephen Blackheath)
-->

<MODE>

	<PROPS>
		<PROPERTY NAME="commentStart" VALUE="{-" />
		<PROPERTY NAME="commentEnd" VALUE="-}" />
		<PROPERTY NAME="lineComment" VALUE="--" />
		<!-- apparently, this is required... -->
		<PROPERTY NAME="tabSize" VALUE="4" />
		<PROPERTY NAME="indentSize" VALUE="4" />
	</PROPS>

	<RULES IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="FALSE">
		<!-- Pragmas. -->
		<SPAN TYPE="COMMENT2">
			<BEGIN>{--</BEGIN>
			<END>-}</END>
		</SPAN>

		<SPAN TYPE="COMMENT1">
			<BEGIN>{-</BEGIN>
			<END>-}</END>
		</SPAN>

		<EOL_SPAN TYPE="COMMENT2">---</EOL_SPAN>
		<EOL_SPAN TYPE="COMMENT1">--</EOL_SPAN>

		<SPAN TYPE="LITERAL1" ESCAPE="\" NO_LINE_BREAK="TRUE">
			<BEGIN>"</BEGIN>
			<END>"</END>
		</SPAN>

		<SPAN TYPE="LITERAL2"  ESCAPE="\" NO_WORD_BREAK="TRUE">
			<BEGIN>'</BEGIN>
			<END>'</END>
		</SPAN>
		<SPAN TYPE="LITERAL3"  ESCAPE="\" NO_WORD_BREAK="TRUE">
			<BEGIN>#</BEGIN>
			<END>#</END>
		</SPAN>
		<SPAN TYPE="LITERAL4"  NO_WORD_BREAK="TRUE">
			<BEGIN>`</BEGIN>
			<END>`</END>
		</SPAN>

                <!-- Reserved words. -->
                <SEQ_REGEXP TYPE="KEYWORD1">\bcase\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\b(class|interface)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bdata\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bfalse\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\btrue\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bpublic\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\babstract\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bprivate\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bpackage\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bderive\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bdo\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\belse\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bforall\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bif\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bimport\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bin\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\binfix[lr]?\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\binstance\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\blet\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bof\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bthen\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\btype\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bwhere\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\b_\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\berror\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bundefined\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\botherwise\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bexit\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bexcept\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bnew\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\breturn\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bvoid\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="LABEL">\bmain\b</SEQ_REGEXP>
                <!-- Non-Haskell-98 keywords -->
                <SEQ_REGEXP TYPE="KEYWORD1">\bnative\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD1">\bpure\b</SEQ_REGEXP>

                <SEQ_REGEXP TYPE="DIGIT">0[xX][0-9a-fA-F]+</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="DIGIT">[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?</SEQ_REGEXP>
                
                <!-- Prelude functions (qualified or not) -->
                <SEQ_REGEXP TYPE="KEYWORD4">\b(fold(l|r|M)?|map(M_?)?|forM_?|unless|when)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(filter|sort(By)?|each|joinStr)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(keys|lookup|insert|update|delete|values|contains|fromKeys|fromList)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(int|float|double|big|long)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(print([Ll]n)?)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(std(out|err|in)|show|display)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(either|maybe|length|all|any)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(zip(With)?|ord|take(While)?)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(ctos|ord|(un)?packed)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(snd|fst|unique(By)?|uniq(By)?|group(By)?)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(sort(By)?|partition|using|comparing|ascending|descending)\b</SEQ_REGEXP>
                <SEQ_REGEXP TYPE="KEYWORD4">\b(null|(un)?curry|unzip|not|fmap)\b</SEQ_REGEXP>
                <!-- constructor/type (qualified or not) -->
                <SEQ_REGEXP TYPE="KEYWORD2">\b[A-Z][a-z_A-Z0-9]*\b</SEQ_REGEXP>
                <!-- variable/function (qualified or not) -->
                <SEQ_REGEXP TYPE="NULL">\b[a-z][a-z_A-Z0-9]*'*</SEQ_REGEXP>

                
                <!-- (, including the specific case of (..) but excluding all other cases
                    where it's an operator in parentheses -->
                <SEQ_REGEXP TYPE="KEYWORD3">::?</SEQ_REGEXP>
                <SEQ TYPE="KEYWORD3">=</SEQ>
                <SEQ TYPE="KEYWORD3">\</SEQ>
                <SEQ TYPE="KEYWORD3">|</SEQ>
                <SEQ TYPE="KEYWORD3">(</SEQ>
                <SEQ TYPE="KEYWORD3">)</SEQ>
                <SEQ TYPE="KEYWORD3">,</SEQ>
                <SEQ TYPE="KEYWORD3">;</SEQ>
                <SEQ TYPE="KEYWORD3">[</SEQ>
                <SEQ TYPE="KEYWORD3">]</SEQ>
                <SEQ TYPE="KEYWORD3">{</SEQ>
                <SEQ TYPE="KEYWORD3">}</SEQ>
                <SEQ TYPE="KEYWORD3">&lt;-</SEQ>
                <SEQ TYPE="KEYWORD3">-&gt;</SEQ>
                <SEQ_REGEXP TYPE="OPERATOR">[^,;=:\(\)\[\]}{"'#`\w\d\s]+</SEQ_REGEXP>
	</RULES>

</MODE>
