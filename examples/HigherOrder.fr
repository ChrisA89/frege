
package examples.HigherOrder
        -- inline(numfunc)
    where

import Data.List 

with :: (Num a, Num b) => (forall e.Num e => [e]->[e]) -> [a] -> [b] -> ([a], [b])
with f xs ys = (f xs; f ys)

numfunc :: Num a => [a] -> [a]
numfunc = map (1+)

-- wrong :: (Enum a, Num a) => ([a], [Integer])
wrong = with nu  (nu  [1..10]) ([100_000_000_000n..100_000_000_010n])
    where
        nu :: Num n => [n] -> [n]
        nu = map (1+)
        
higher :: Num b => (forall a.Num a => f a -> f a) -> f b -> f b
higher f xs = f xs    

useh = higher (fmap (+1)) 

main args
    | null args = print "no args: " >> println (wrong)
    | otherwise = print "some args: " >> println wrong     