{--
    It was observed that the 3 year numbers 2013, 2014 and 2015 
    each have 3 prime factors that are pairwise different.
    
    The question was raised when this will happen next time.
    -}
    
module examples.YearNumbers where

import Data.List
import examples.EulerLib

--- Check if a number has the property that it has 3 (different) prime factors
--- Return just the factors or 'Nothing'
fac n k 
    | length uniqs == k,
      length primfacs == k = Just primfacs
    | otherwise            = Nothing
    where primfacs = factors n
          uniqs    = (uniq . sort) primfacs

{-- 
    Just the triple of the 3 prime factors of 3 successive numbers,
    or 'Nothing' if they do not all have the 'fac3' property.
    -}
triple n k = do
    first  <- fac n k
    second <- fac (succ n) k
    third  <- fac (succ (succ n)) k
    return (first, second, third)

--- Check if the intersection of two lists is empty or {2}
diff a b = null c || c == [fromInt 2] where c = (a `intersect` b)

main _ =  do
        mapM_ println (take 20 (examples 3) ++ take 20 (examples 4))
        println $ (head . examples) 5  
    where 
        examples k = [ ((n,a), (succ n,b), (succ (succ n),c))
             | n <- iterate succ 1n,
               (a,b,c) <- triple n k,
               diff a b, diff a c, diff b c ]
                           
        