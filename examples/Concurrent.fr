module examples.Concurrent where

data Thread = mutable native java.lang.Thread where
    native new      :: MutableIO Runnable -> IO Thread
    native start    :: Thread -> IO ()
    native sleep java.lang.Thread.sleep
                    :: Long   -> IO () throws InterruptedException

data IllegalStateException = pure native java.lang.IllegalStateException
derive Exceptional IllegalStateException

data NoSuchElementException = pure native java.util.NoSuchElementException
derive Exceptional NoSuchElementException

data BlockingQueue e = mutable native java.util.concurrent.BlockingQueue where
    --- add element to blocking queue, throw exception if not possible
    native add      :: BlockingQueue e -> e -> IO Bool throws IllegalStateException
    --- add element to blocking queue, return false if not possible
    native offer    :: BlockingQueue e -> e -> IO Bool
    --- add element to blocking queue, block until possible
    native put      :: BlockingQueue e -> e -> IO () throws InterruptedException
    
    --- get and remove element from blocking queue, throw exception if it is empty
    native remove   :: BlockingQueue e -> IO e throws NoSuchElementException
    --- get and remove element from blocking queue, return null if it is empty
    native poll     :: BlockingQueue e -> IO (Maybe e)
    --- get and remove element from blocking queue, block until something is available
    native take     :: BlockingQueue e -> IO e throws InterruptedException

data ArrayBlockingQueue e = mutable native java.util.concurrent.ArrayBlockingQueue where
    native new      :: Int -> IO (ArrayBlockingQueue e)
                     | Int -> Bool ->  IO (ArrayBlockingQueue e)           
    
abstract data MVar a = MV (BlockingQueue a) where
    newEmpty        = ArrayBlockingQueue.new 1 >>= return . MV
    new a           = do m <- newEmpty; m.put a
    put   (MV q) a  = q.put a         
    take  (MV q)    = q.take
    offer (MV q) a  = q.offer a
    poll  (MV q)    = q.poll  
    
-- Haskell compatibility
newEmptyMVar    = MVar.newEmpty
newMVar         = MVar.new 
tryTakeMVar     = MVar.poll
tryPutMVar      = MVar.offer   
                
forkIO :: IO () -> IO Thread
forkIO action = do
    r <- Runnable.new action
    t <- Thread.new r
    t.start
    return t  

main args = do
    m <- newEmptyMVar
    m.take
        
            
example1 = do
    forkIO (replicateM_ 100000 (putChar 'a'))
    replicateM_ 100000 (putChar 'b')

example2 =  do
    s <- getLine
    case s.long of
        Right n -> forkIO (setReminder n) >> example2
        Left _  -> println ("exiting ...")
    
setReminder :: Long -> IO ()
setReminder n = do
        println ("Ok, I remind you in " ++ show n ++ " seconds")
        Thread.sleep (1000L*n)
        println (show n ++ " seconds is up!")
            
    
      