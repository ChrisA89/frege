module examples.Mockingbird

    where

import Data.List


--- representation of SKI expressions with variables and constants 
data SKI = S | K | I | Var String | Const String | App SKI SKI

{-- 
    Something like
    
    > SKKy
    
    is represented as left leaning 'App' tree, but sometimes we
    want to use the isomorphism with a list:
    
    > flat (App (App (App a b) c) d) = [a, b, c, d]
    > flat p = [p] -- where p is not an App
    
    This only flattens the outermost 'App', of course.
    Note that the result is never the empty list, as atomic SKI expressions
    result in a singleton list.
    -}
flat = reverse . flat'
    where flat' (App a b) = b:flat' a
          flat' x         = [x]
          
--- The converse of 'fold', the following law holds:
--- > unflat (flat x) == x
--- Can be used like 
--- > unflat (replicate 1000 I)
unflat = foldl1 (<>) 

infixl 7 `<>`

--- Embed the SKI syntax into Frege.
--- The expression
--- > SKK(S(KS)K)x
--- can be written thus:
--- S <> K <> K <> (S <> (K <> S) <> K) <> Var "x"     
(<>) = App


{--
    A "definition" of an additional combinator, like in
    
    > Bfgh = f(gh)        -- a bluebird
    > Mx   = xx           -- a mockingbird
    
    The left hand side must consist of an "combinator" in the form of a 'Const',
    that is applied to all the variables that occur in the right hand side.
    Every variable must appear only once in the left hand side.
    
    The right hand side is the defining expression, where only variables
    that have been introduced on the left are allowed. But here they can 
    appear in any order and 0,1 or more times.
    
    See also ':=', which allows to create the "bluebird" definition
    
    > Def  (App (App (App (Const "B") f) g) h)   (App f (App g h))
    
    like so:
    
    > "Bfgh" := (Var "f" <> (Var "g" <> Var "h"))
    
    -} 
data DEF = Def SKI SKI


derive Eq SKI

instance Show SKI where
    show S = "S"
    show K = "K"
    show I = "I"
    show (Var s)   = s
    show (Const s) = s
    show app = show first ++ concatMap showsub rest where first:rest = flat app
    
    showsub (app@App{}) = "(" ++ show app ++ ")"
    showsub ski = show ski

instance Show DEF where
    show (Def a b) = show a ++ " = " ++ show b


--- some variables 
vx = Var "x"
vy = Var "y"
vz = Var "z"
vw = Var "w"
va = Var "a"
vb = Var "b"
vc = Var "c"
vf = Var "f"
vg = Var "g"
vh = Var "h"

{-- 
    Reduce a SKI expression according to the following rules:
    - A primitive expressions (I,K,S,Var,Const) reduces to itself
    - @I <> a@ reduces to @a@
    - @K <> x <> y@ reduces to @x@
    - @S <> x <> y <> z@  reduces to   @x <> z <> (y <> z)@
    - @a<>b@ reduces to reduced @c<>b@, where @c@ is the reduced @a@. 

    Note that, if we have a<>b, b is not reduced.

    The definition below is a bit complex, but we must avoid 
    stack overflows on deeply nested expressions like
    
    >   unflat (replicate 5000 I)
    
    The reduction algorithm trades stack space against heap space, by
    going down to the expression nested deepest on the left, while pushing
    the right elemenst to a list (like 'flat'). Once the innermost expression
    has been reduced, we have either a Var, a Const or a basic combinator.
    
    If it is a basic combinator, then its effect on the argument list is 
    computed, and the process continues until we have an atom that connot 
    be applied to the list anymore. 
    
    For example 
    
    > II(KI)I                   
    > (((II)(KI))I)             II(KI)I
    > ((II)(KI))   [I]          II(KI)I
    > (II) [KI,I]               II(KI)I
    
    Only at this point do we see that we can reduce II:
    
    > I [KI, I]                 I(KI)I
    
    The I pops the first argument off the list and lets it operate on the tail.
    Now again, we have an expression of the form @a <> b@ on top:
    
    > (KI) [I]                  KII
    > K [I, I]                  KII
    
    Now K can operate on the list, by throwing the second element away and
    we continue to operate with the first I.
     
    > I []                      I
    -}
eval = evaluate false
evaluate eager = unflat . reduce []
    where
        -- reduce acc ex | traceLn ("reduce: " ++ show ex ++ "  " ++ show acc) = undefined
        -- first the basic laws
        reduce acc (App I y)                    = reduce acc y
        reduce acc (App (App K x) _)            = reduce acc x
        reduce acc (App (App (App S f) g) h)    = reduce acc (f <> h <> (g <> h))
        
        -- Now the critical step to avoid too deeply nested left recursions.
        -- The expression b is saved for later, and we continue with the left hand side
        -- Since this is tail recursion, it will be a loop at runtime.
        reduce acc (App a b)                    = reduce (b:acc) a
        
        -- At this point, the leftmost expression of the original
        -- expression is not of the form @a<>b@ anymore and the arguments
        -- are in the accumulator.
        -- For example, when we had
        --  (K <> K <> x) <> a <> b
        -- we have now evaluated (K <> K <> x) to K (by equation 2)
        -- and a,b are on the stack, so it looks like
        --   reduce [a,b] K
        -- and this is just another way to say
        --   reduce [] (K <> a <> b)
        -- But, we do now apply the basic reduction rules to the stack. 
        -- We could as well do 
        --        reduce [] (unflat (top:acc))
        -- but this way we avoid flattening/unflattening of the whole 
        -- expression all the time.
        reduce (x:xs)     I                     = reduce xs x
        reduce (x:_:xs)   K                     = reduce xs x 
        reduce (f:g:h:xs) S                     = reduce (h:(g<>h):xs) f
        -- At tis point, the expression is reduced.
        -- It is nether of the form (a <> b), nor is it a I,K or S
        -- that could operate on the list.
        -- We take the opportunity to optimize the arguments a bit, 
        -- without reducing them fully. For, if we did reduce them
        -- now, then evaluation of
        --  Yf,  where Y is the fixpoint operator Yf = f(Yf)
        -- would cause us to evaluate Yf again, which would result in
        -- f(Yf) and we had to reduce that Yf again and so on ad infinitum.
        reduce acc x                            = x:map f acc
            where f = if eager then evaluate true else opt
        
{--  This is a "light" reduce: it does not re-apply itself to the result
    of optimizing sub-expressions, hence in general
    
    > opt (a <> b) != opt (opt a <> opt b)
    
    It is used to remove superfluous K, I and S from the result,
    but it does not take into account all reducible expressions that
    result from the optimization. Hence it does not recurse potentially
    endlessly.
    -}
opt (App I y)                    = opt y
opt (App (App K x) _)            = opt x
opt (App (App (App S f) g) h)    = opt (f <> h <> (g <> h))
opt (App a b)                    = App (opt a) (opt b) -- no recursion here
opt x                            = x


identity = S <> K <> K


--- get the set of variables in an SKI expressions
freevars = uniq . sort . vars

--- get an unordered list of variables that occur in a SKI expressions, duplicates possible
vars (Var s)   = [s]
vars (App a b) = vars a ++ vars b
vars _ = []


--- Define new combinators like this:
--- >  "Uxy" :=  vy <> (vx <> vx <> vy)
--- Rules:
--- - The left hand side must not be the empty string
--- - The left hand side must start with an uppercase letter.
--- - The rest of the left hand side must be distinct lowercase letters.
--- - The right hand side is an SKI expression.
--- - The right hand side must not name variables that do not occur in the left hand side.

""  := rhs = error "The left hand side of a definition must not be empty."
lhs := rhs 
        | (c.charAt 0).isLowerCase 
            = error "The left hand side of a definition must not start with a variable."
        | (not . all Char.isLowerCase . unpacked . concat) vs 
            = error "Except for the first character, all characters of the left hand side must be lowercase letters."
        | (not . uniqvars) vs 
            = error "No variable name must occur more than once in the left hand side."
        | bad <- filter (`notElem`  vs) (freevars rhs), !(null bad)
            = error ("expression has free variables " ++ show bad)
        | otherwise = Def left rhs 
    where
        c:vs = map display (unpacked lhs)
        left = unflat (Const c : map Var vs)
        uniqvars [] = true
        uniqvars (a:as) = a `notElem` as && uniqvars as

--- Compute the SKI expression for a defined combinator.
--- for example:
--- > make ("Bfgh" := f <> (g <> h))
--- will return
--- > S <> (K <> S) <> K
--- Hence,
--- > B = S(KS)K
make (def@Def (Const c) ski)
    | traceLn ("result is " ++ show def) = undefined
    | otherwise = ski
make (def@Def (App a (Var b)) ski)
    | traceLn ("make SKI expression for  " ++ show def) = undefined
    | otherwise = make (Def a (b `elimination` ski))
    where
        byrule n ski | false, traceLn ("by rule " ++ show n ++ ": " ++show ski) = undefined
                     | otherwise = ski
        -- 1.  I is a v elimination for v, becaue Iv = v
        -- 2.  If v does not occur in x, then Kx is a v-elimination, because Kxv = x
        -- 3.  If Y does not contain v, then Y is a v-elimination of Yv, becaue Yv=Yv
        -- 4.  in YZ, the v-elimination is SY'Z' where Y' is a
        --     v elimination of Y and Z' is a v-elimination of Z
        v `elimination` x 
            | false, traceLn ("compute " ++ b ++ "-elimination of " ++ show x) = undefined 
            | otherwise  = case x of
                    Var s         
                        | s == v    = byrule 1 I
                        | otherwise = byrule 2 (K <> x)
                    App y (Var s) | s == v,
                        v `notElem` vars y = byrule 3 y
                    y | v `notElem` vars y = byrule 2 (K <> y)
                    App a b                = byrule 4 (S <> a' <> b') where
                        a' = v `elimination` a
                        b' = v `elimination` b
                        
make def = error ("not well formed: " ++ show def) 

--- Make sure that 'make' does work.
checkdef (def@Def left right) = do
    println ("Defintion: " ++ show def)
    let ski = make def
        const:vars = flat left
        app = unflat (ski:vars)
        eager = const != Const "Y"
        res = evaluate eager app
    println ("SKI Expression: " ++ show ski)
    println (show app ++ " should evaluate to " ++ show right)
    println (show (res == right) ++ ": " ++ show res)
    return (res == right)


mockingbird = "Mx"      :=  vx <> vx
flipper     = "Ffab"    :=  vf <> vb <> va
turing      = "Uxy"     :=  vy <> (vx <> vx <> vy)
fix         = "Yf"      :=  vf <> (theU <> theU <> vf) where theU = make turing
trush       = "Txy"     :=  vy <> vx
bluebird    = "Bxyz"    :=  vx <> (vy <> vz)
queer       = "Qxyz"    :=  vy <> (vx <> vz)
dove        = "Dxyzw"   :=  vx <> vy <> (vz <> vw)

birds = [bluebird, mockingbird, flipper, turing, trush, queer, dove, fix]
y = make fix
 
main args = do
    alle <- mapM checkdef birds
    println ("ALL TESTS: " ++ show (and alle))
    println ("fix = " ++ show y)
    println ("evaluating: " ++ show (y <> vf))
    let res = (eval (y <> vf))
    println res
    mapM_ println (take 10 (some res))
    println $ (eval . (<>vx) . unflat . replicate 10) (S<>K<>K)
  where
    some (App x rest) = x <> er : some er where er = eval rest 
    some x = [x]