#summary How to install and use the Eclipse Frege plugin.
#labels Phase-Deploy,Featured

An alternative to this page is the [http://fregepl.blogspot.com/p/fregide-tutorial.html fregIDE Tutorial]. It takes you from the installation to execution of a Hello World program with a lots of screenshots.

= Introduction =

The Eclipse plugin that supports Frege is called *fregIDE*. Don't ask how to pronounce that!

The fregIDE is hopefully already usable, but in an early stage of development. Currently, the following is supported:

  * Enabling a project to use the Frege Builder.
  * Frege preferences
  * Syntax coloring, including distinction between imported, top level and local names.
  * Outline view
  * Mouse over documentation
  * Mouse over navigation
  * Editor actions to support funny glyphs
  * Live error markers in the editor
  * Project build, i.e. compilation of Frege files
  * Compilation populates the problem view with errors, warnings and hints and the editor with persistent markers.
  * Run programs through JDT Run Configurations

= Prerequisites =

   * JRE 1.7 (no JDK required)
   * Eclipse 3.7

(I see the possibility that one could get that running with a 
lower JRE and Eclipse version, for example Eclipse 3.5 with JRE 1.6.
If you are bound to an environment that does not match the above and want to give it a try, contact me.)

The Frege programs developed in Eclipse will not depend on any Eclipse libraries. To run them apart from Eclipse, you'll still need Frege runtime classes. You can either use the ones that come with the Eclipse plugin (they will be in a file named `frege.ide_3.`_xx_._vvv_`.jar` located somewhere below the eclipse plugin directory) or download a binary compatible `frege3.`_xx_._vvv_`.jar` from the download page.

= Preparation =

Eclipse should have the following VM settings: 

{{{
-Xmx512m -Xss4m -XX:MaxPermSize=128M
}}}

For more information on `MaxPermSize` see [http://wiki.eclipse.org/FAQ_How_do_I_increase_the_permgen_size_available_to_Eclipse? the Eclipse FAQ]

The figure for `-Xss` is chosen so that source files with some ten thousand lines can be compiled. But the stack space allocated normally is not enough for serious work. Hence, the 4m are a safe bet.

The workspace should be configured to have all text files in UTF-8 encoding by default. The frege plugin currently does not support other encodings for frege source files. To compile frege files in different encodings, one needs to use the command line compiler with the `-encoding` option. However, as long as one restricts itself to ASCII, the encoding is of course immaterial.

= Installation =

  * Download the latest version of `fregIDE3.`_xx_._vvv_`.zip` labelled _Featured_ from the download page.
  * Start up Eclipse.
  * Open the preferences page `Window` -> `Preferences`, and go to the `Install/Update` section. Open the `Available Software Sites` page and `Add...` the *IMP Update Site* with Location  `http://download.eclipse.org/technology/imp/updates/`. Close the preferences page. (This must be done upon first install of fregIDE only.)
  * Open the installation page `Help` -> `Install New Software`
  * Click `Add...` and enter a name, for example *fregIDE archive*. Then click `Archive...` and locate the downloaded zip file.
  * Turn *off* the check box `Group items by category`
  * Turn on the check box `Contact all update sites during installation to find required software`
  * In the list box select the feature `Functional Programming with Frege`
  * Click `Next>` to start the installation and confirm a few dialogs, license agreements and warnings because of unsigned content to complete it.
  * When asked, restart Eclipse to activate the installed plugins.

== Update ==

An update is performed like an installation. Eclipse will recognize automatically that the plugin is updated. After Eclipse has completed and is restarted, the following must be done for each Frege Project:

  * In the Package Explorer, remove the old `frege.ide_3.``*` library shown under _Referenced Libraries_ from the Build Path of the project.
  * Enable the Frege Builder again, this will add the new library to the project. 
  * Do a _Clean Build_ to address compatibility issues.


= Usage =

  * First create a Java project.
  * Review the `Preferences` -> `Frege` page. Choose colors and fonts.
  * From the context menu of the project, select `Enable Frege Builder`. This will add a library named `frege.ide_3.`_xx_._vvv_`.jar` to the _Referenced Libraries_ of the project.
  * Create a source file with extension `.fr` and begin editing.
  * For utilizing the navigation feature with regard to the standard library, create a dedicated Frege Project in the workspace, and unpack the source files from libsources`*`.zip available from download site. Note that release numbers of fregIDE and libsources must match exactly.
  * Enjoy.


= Known Issues =

Not yet implemented, but planned:

  * more Editor Actions (maybe "Insert Type Signature(s)")
  * code completion and other content proposals
  * QuickCheck support
  * Interpreter ("scrapbook")

Not implemented, unsure whether we need that:

  * text folding
  * text formatting


Usage issues:

  * When you feel that the GUI is getting too slow, you probably have several thousand lines of source code in the editor window. Time to think about modularization.
  * When editing module A that imports module B, changes in the source code of B will not be recognized until B is recompiled and the editor window of A is closed and re-opened again.