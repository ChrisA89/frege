#summary Brief Summary of Differences between Frege and
Haskell

This document is intended for people who have a working knowledge of Haskell and want to write Frege code. The objective is not to describe each difference in every detail. For this, please consult the Frege language reference manual. It is rather just an overview with brief explanations. However, if you feel some difference you stumble upon should be included here, please open an issue on the [http://code.google.com/p/frege/issues/list project page].

I refer to the Haskell language as described in the [http://haskell.org/definition/haskell2010.pdf “Haskell 2010 Language Report”]. This document follows in structure the Haskell 2010 Language Report. I give the section numbers for easy reference. Most of the time I will not repeat how things are in Haskell, for example I will not write “_In Haskell, this is such and such, whereas in
Frege, it is thus._” Rather, I just write “_thus_”.
Words and phrases like “_not yet_”, “_currently_”, “_at this time_” etc. indicate the possibility,
that the incompatibility they refer to will be eliminated later.

= Library/Prelude =

The Frege-Prelude defines many functions, type classes and types known from Haskell in a similar way. Apart from that, everything else will be quite different, because Frege uses the Java APIs whenever possible. At the time being, there is not much library support yet.

= 1.4 Namespaces / 5 Modules =

The compilation unit is a _package_ or _module_, whose name is a dot-separated sequence of identifiers, where the last one must start with an uppercase letter. 
Packages names are used only in import clauses. In all other cases, they are referenced by the simple name that was assigned in the import clause or, if there was none assigned, by the last component of the package name.

There are no export clauses. Constructors, functions and data types that must not be accessible from other modules can be marked *`private`*. A data type declaration can be marked *`abstract`*, this is equivalent to making all constructors private.
